{"version":3,"sources":["components/NavMenu/NavMenu.tsx","enums/AppDispatchActions.ts","context/AppContext.ts","utils/copyInput.ts","utils/conversion.ts","components/User/KeyGeneration.tsx","components/Transaction/Send.tsx","components/Transaction/Sign.tsx","components/Transaction/Transaction.tsx","components/User/UserItems.tsx","pages/Wallet.tsx","utils/mine.ts","utils/propagate.ts","components/Block/Statistics.tsx","utils/Tree.ts","utils/merkleTree.ts","components/Block/Block.tsx","components/Block/BlockChain.tsx","pages/Chain.tsx","components/Block/PreviewBlock.tsx","components/Transaction/TransactionItems.tsx","pages/Mine.tsx","reducers/AppReducer.ts","components/App/App.tsx","index.tsx"],"names":["NavMenu","Navbar","expand","className","Brand","aria-label","href","src","alt","width","Toggle","aria-controls","Collapse","id","Nav","Link","active","location","includes","ACTIONS","AppContext","React","createContext","undefined","copyKey","e","setCopied","type","index","totalUsers","visible","target","value","select","document","execCommand","blur","isPublic","newCopied","Array","fill","bufferToHex","hashBuffer","from","Uint8Array","map","b","toString","padStart","join","CryptoKeyToHex","format","key","a","window","crypto","subtle","exportKey","buf","digestMessage","message","msgUint8","TextEncoder","encode","digest","randomHash","len","getRandomValues","Uint32Array","KeyGeneration","useContext","state","dispatch","numRows","useRef","publicKeyRef","privateKeyRef","useState","copied","user","publicKey","generateKey","name","namedCurve","privateKey","publicKeyStr","privateKeyStr","current","innerText","length","balance","Number","toFixed","mainUser","SET_MAIN_USER","payload","newUsers","users","UPDATE_USERS","useEffect","addUser","InputGroup","Prepend","Text","Form","Control","as","rows","defaultValue","isValid","onFocus","onBlur","readOnly","ref","Feedback","Append","onClick","show","hiddenVal","Send","props","noValidate","onSubmit","handleSubmit","Group","details","to","amount","disabled","placeholder","signature","Button","variant","signed","block","Sign","validated","pattern","required","step","userBalance","Math","min","max","checkAmount","Transaction","setValidated","setSigned","formDetails","preventDefault","form","currentTarget","checkValidity","formValues","Object","values","slice","input","trans","JSON","parse","stringify","ADD_VERIFIED_TRANS","UserItems","i","resetCopy","Wallet","createTarget","numZeros","targetHash","re","RegExp","zerosStr","replace","mine","nonce","setHeader","setTarget","setSolution","setIsValid","round","random","candidateSolution","header","MAX_SAFE_INTEGER","substr","split","every","bit","propagateBlockStatus","prevHash","skipFirstUpdate","newRoot","transactions","timestamp","Date","now","chain","merkleRoot","currHash","valid","showTrans","newBlock","UPDATE_BLOCK","Statistics","disableMineBtn","setDisableMineBtn","hash","solution","style","color","selectedTrans","handleMine","role","Node","children","parent","pos","this","x","y","node","position","Tree","canvas","xStart","innerWidth","transaction","getContext","height","isLeft","offset","clearRect","newNode","left","calculatePosition","right","queue","push","shift","rectWidth","beginPath","font","strokeStyle","leafOrBodyColor","fillStyle","fillRect","fillText","forEach","child","moveTo","lineTo","stroke","calculateMerkleTreeFormation","verifiedTrans","setMerkleTree","tree","verifiedSignatures","selectedSignatures","signatures","filter","sig","hashArr","getMerkleRoot","Block","setTimestamp","setShowTrans","calculateNewMerkleRoot","newVal","newTrans","root","newHash","Fragment","onChange","parseFloat","BlockChain","Chain","PreviewBlock","treeCanvas","merkleTree","setIndex","setPrevHash","canvasTree","clear","flatTree","concat","reverse","flattenTree","addNode","drawTree","drawTreeDiagramOnCanvas","outerWidth","ADD_BLOCK","UPDATE_VERIFIED_TRANS","UPDATE_SELECTED_TRANS","handleAddBlock","TransactionItems","included","alert","selectTransaction","Mine","AppReducer","action","localStorage","setItem","selectedTransSignatures","ogState","App","useReducer","getItem","useMemo","basename","Provider","exact","path","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.33769ec7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\n\r\nimport \"./NavMenu.css\";\r\n\r\nexport default function NavMenu(): JSX.Element {\r\n  return (\r\n    <Navbar expand=\"lg\" className=\"mb-3\">\r\n      <Navbar.Brand aria-label=\"LibraCoin Logo\" href=\"https://github.com/lbragile/LibraCoin\">\r\n        <img src=\"./assets/libracoin-logo-256.png\" alt=\"LibraCoin Logo\" width=\"64\" />\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"ml-auto\">\r\n          <Nav.Link href=\"/LibraCoin/wallet\" active={location.href.includes(\"/wallet\")}>\r\n            Wallet\r\n          </Nav.Link>\r\n          <Nav.Link href=\"/LibraCoin/mine\" active={location.href.includes(\"/mine\")}>\r\n            Mine\r\n          </Nav.Link>\r\n          <Nav.Link href=\"/LibraCoin/blockchain\" active={location.href.includes(\"/blockchain\")}>\r\n            Blockchain\r\n          </Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\n","export enum ACTIONS {\r\n  ADD_VERIFIED_TRANS,\r\n  UPDATE_VERIFIED_TRANS,\r\n  UPDATE_SELECTED_TRANS,\r\n  UPDATE_USERS,\r\n  SET_MAIN_USER,\r\n  ADD_BLOCK,\r\n  UPDATE_BLOCK\r\n}\r\n","import React from \"react\";\r\nimport { IAction, IState } from \"../typings/AppTypes\";\r\n\r\ntype TAppContext = { state: IState; dispatch: React.Dispatch<IAction> } | undefined;\r\n\r\nexport const AppContext = React.createContext<TAppContext>(undefined);\r\n","export function copyKey(\r\n  e: React.FocusEvent<HTMLTextAreaElement | HTMLInputElement>,\r\n  setCopied: (arg: boolean[]) => void,\r\n  type?: \"public\" | \"private\",\r\n  index?: number,\r\n  totalUsers?: number\r\n): void {\r\n  const visible = !e.target.value.includes(\"◦\");\r\n  if (visible) {\r\n    e.target.select();\r\n    document.execCommand(\"copy\");\r\n  } else {\r\n    e.target.blur();\r\n  }\r\n\r\n  if (type) {\r\n    // wallet page, copying keys (public / private)\r\n    const isPublic = type === \"public\";\r\n    setCopied([isPublic, !isPublic && visible]);\r\n  } else {\r\n    // user items, copying public key\r\n    const newCopied = new Array(totalUsers).fill(false);\r\n    newCopied[index as number] = true;\r\n    setCopied(newCopied);\r\n  }\r\n}\r\n","import { TextEncoder } from \"text-encoding\";\r\n\r\nexport function bufferToHex(hashBuffer: ArrayBuffer): string {\r\n  const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\r\n  const hashHex = hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\"); // convert bytes to hex string\r\n  return hashHex;\r\n}\r\n\r\nexport async function CryptoKeyToHex(format: string, key: CryptoKey): Promise<string> {\r\n  const buf = (await window.crypto.subtle.exportKey(format, key)) as ArrayBuffer;\r\n  return bufferToHex(buf);\r\n}\r\n\r\nexport async function digestMessage(message: string): Promise<string> {\r\n  const msgUint8 = new TextEncoder().encode(message); // encode as (utf-8) Uint8Array\r\n  const hashBuffer = await window.crypto.subtle.digest(\"SHA-256\", msgUint8); // hash the message\r\n  return bufferToHex(hashBuffer);\r\n}\r\n\r\nexport function randomHash(len: number): string {\r\n  return bufferToHex(window.crypto.getRandomValues(new Uint32Array(len)));\r\n}\r\n","import React, { useRef, useState, useContext, useEffect } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\n\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState } from \"../../typings/AppTypes\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { copyKey } from \"../../utils/copyInput\";\r\nimport { CryptoKeyToHex } from \"../../utils/conversion\";\r\n\r\nimport \"./User.css\";\r\n\r\nexport default function KeyGeneration(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const numRows = useRef(4);\r\n  const publicKeyRef = useRef<HTMLTextAreaElement>(null);\r\n  const privateKeyRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n  const [copied, setCopied] = useState<boolean[]>([false, false]);\r\n\r\n  // add a user if it's the first time visiting\r\n  useEffect(() => {\r\n    addUser();\r\n  }, []);\r\n\r\n  async function addUser(): Promise<void> {\r\n    if (!state.user.publicKey) {\r\n      const { publicKey, privateKey } = await window.crypto.subtle.generateKey(\r\n        { name: \"ECDSA\", namedCurve: \"P-256\" },\r\n        true,\r\n        [\"sign\", \"verify\"]\r\n      );\r\n\r\n      const publicKeyStr = await CryptoKeyToHex(\"spki\", publicKey as CryptoKey);\r\n      const privateKeyStr = await CryptoKeyToHex(\"pkcs8\", privateKey as CryptoKey);\r\n      if (publicKeyRef.current && privateKeyRef.current) {\r\n        publicKeyRef.current.innerText = publicKeyStr;\r\n        privateKeyRef.current.innerText = new Array(privateKeyStr.length).fill(\"◦\").join(\"\");\r\n      }\r\n\r\n      const balance = Number(1000).toFixed(2);\r\n      const mainUser = { publicKey: publicKeyStr, privateKey: privateKeyStr, balance };\r\n      dispatch({ type: ACTIONS.SET_MAIN_USER, payload: { user: mainUser } });\r\n\r\n      const newUsers = [...state.users, { publicKey: publicKeyStr, balance }];\r\n      dispatch({ type: ACTIONS.UPDATE_USERS, payload: { users: newUsers } });\r\n    }\r\n  }\r\n\r\n  const togglePrivateKey = () => {\r\n    const show = privateKeyRef.current?.value.includes(\"◦\");\r\n    const hiddenVal = new Array(state.user.privateKey.length).fill(\"◦\").join(\"\");\r\n    (privateKeyRef.current as HTMLTextAreaElement).value = show ? state.user.privateKey : hiddenVal;\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid row d-flex align-items-center justify-content-center mx-1 mt-0 mt-lg-5 mb-0 mb-lg-5\">\r\n      <InputGroup className=\"user-key col-12 col-lg-5 px-0 mr-0 mr-lg-3\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Public</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"publicKey\"\r\n          as=\"textarea\"\r\n          rows={numRows.current}\r\n          className=\"rounded-right\"\r\n          defaultValue={state.user?.publicKey ?? \"\"}\r\n          isValid={copied[0]}\r\n          onFocus={(e: React.FocusEvent<HTMLTextAreaElement>) => copyKey(e, setCopied, \"public\")}\r\n          onBlur={() => setCopied([false, false])}\r\n          readOnly\r\n          ref={publicKeyRef}\r\n        />\r\n        <Form.Control.Feedback type=\"valid\">Copied to clipboard!</Form.Control.Feedback>\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"user-key col-12 col-lg-5 px-0\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Private</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n\r\n        <Form.Control\r\n          aria-label=\"privateKey\"\r\n          as=\"textarea\"\r\n          rows={numRows.current}\r\n          defaultValue={state.user?.privateKey ? new Array(state.user.privateKey.length).fill(\"◦\").join(\"\") : \"\"}\r\n          onFocus={(e: React.FocusEvent<HTMLTextAreaElement>) => copyKey(e, setCopied, \"private\")}\r\n          onBlur={() => setCopied([false, false])}\r\n          isValid={copied[1]}\r\n          readOnly\r\n          ref={privateKeyRef}\r\n        />\r\n        <InputGroup.Append>\r\n          <InputGroup.Text className=\"rounded-right\">\r\n            <span id=\"private-reveal-eyes\" onClick={togglePrivateKey}>\r\n              👀\r\n            </span>\r\n          </InputGroup.Text>\r\n        </InputGroup.Append>\r\n        <Form.Control.Feedback type=\"valid\">Copied to clipboard!</Form.Control.Feedback>\r\n      </InputGroup>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\r\nimport { ITransaction } from \"../../typings/AppTypes\";\r\nimport { ISign } from \"./Sign\";\r\n\r\ninterface ISend extends ISign {\r\n  details: ITransaction;\r\n  setSigned: (arg: boolean) => void;\r\n  setValidated: (arg: boolean) => void;\r\n}\r\n\r\nexport default function Send(props: ISend): JSX.Element {\r\n  return (\r\n    <Form noValidate className=\"col-12 col-lg-5 my-2 my-lg-0 trans-form\" onSubmit={(e) => props.handleSubmit(e)}>\r\n      <Form.Group>\r\n        <Form.Control className=\"text-truncate\" type=\"text\" defaultValue={props.details.to} readOnly />\r\n        <Form.Text className=\"text-muted\">The receiver&apos;s public key</Form.Text>\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <InputGroup className=\"mb-2\">\r\n          <Form.Control type=\"number\" defaultValue={props.details.amount} disabled />\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text className=\"rounded-right border-left-0\">LC</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <Form.Control\r\n          as=\"textarea\"\r\n          defaultValue={props.details.message}\r\n          rows={5}\r\n          placeholder=\"optional message...\"\r\n          readOnly\r\n        />\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <Form.Control type=\"text\" defaultValue={props.details.signature} readOnly />\r\n        <Form.Text className=\"text-muted\">\r\n          Transaction Signature → receiver uses this along with your public key to verify transaction.\r\n        </Form.Text>\r\n      </Form.Group>\r\n\r\n      <Button variant=\"primary\" type=\"submit\" disabled={!props.signed} block>\r\n        <b>Send</b>\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\n\r\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IState } from \"../../typings/AppTypes\";\r\n\r\nexport interface ISign {\r\n  validated: boolean;\r\n  signed: boolean;\r\n  handleSubmit: (e: React.FormEvent<HTMLFormElement>) => void;\r\n}\r\n\r\nexport default function Sign({ validated, signed, handleSubmit }: ISign): JSX.Element {\r\n  const { state } = useContext(AppContext) as { state: IState };\r\n\r\n  function checkAmount(e: React.FocusEvent<HTMLInputElement>): void {\r\n    const userBalance = state.user.balance ?? 1000;\r\n    e.target.value = Math.min(Math.max(0.1, +e.target.value), userBalance).toFixed(2);\r\n  }\r\n\r\n  return (\r\n    <Form noValidate validated={validated} className=\"col-12 col-lg-5 trans-form\" onSubmit={handleSubmit}>\r\n      <Form.Group>\r\n        <Form.Control className=\"text-truncate\" type=\"text\" defaultValue={state.user.publicKey ?? \"\"} readOnly />\r\n        <Form.Text className=\"text-muted\">\r\n          Your public key → used to verify transaction was signed using your private key\r\n        </Form.Text>\r\n        <h3 className=\"my-0 text-center\">↓</h3>\r\n        <Form.Control\r\n          className=\"text-truncate\"\r\n          type=\"text\"\r\n          placeholder=\"Receiver's public key\"\r\n          pattern=\"[A-Za-z0-9]{182,182}\"\r\n          required\r\n        />\r\n        <Form.Control.Feedback type=\"invalid\">\r\n          <b>Length or format are incorrect!</b>\r\n        </Form.Control.Feedback>\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <InputGroup className=\"mb-2\">\r\n          <Form.Control\r\n            type=\"number\"\r\n            step=\"any\"\r\n            placeholder={Number(1).toFixed(2)}\r\n            onBlur={(e: React.FocusEvent<HTMLInputElement>) => checkAmount(e)}\r\n            required\r\n          />\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text className=\"rounded-right border-left-0\">LC</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <Form.Control as=\"textarea\" rows={2} placeholder=\"optional message...\" />\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <Form.Control className=\"text-truncate\" type=\"text\" defaultValue={state.user.privateKey ?? \"\"} readOnly />\r\n        <Form.Text className=\"text-muted\">Your private key → not shared with anyone, keep this secret!</Form.Text>\r\n      </Form.Group>\r\n\r\n      <Button variant=\"primary\" type=\"submit\" disabled={signed} block>\r\n        <b>Sign</b>\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n","import React, { useState, useRef, useContext } from \"react\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { IAction, IState, ITransaction } from \"../../typings/AppTypes\";\r\nimport { digestMessage } from \"../../utils/conversion\";\r\n\r\nimport Send from \"./Send\";\r\nimport Sign from \"./Sign\";\r\nimport \"./Transaction.css\";\r\n\r\nexport default function Transaction(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const [validated, setValidated] = useState<boolean>(false);\r\n  const [signed, setSigned] = useState<boolean>(false);\r\n\r\n  const formDetails = useRef<ITransaction>({\r\n    to: \"\",\r\n    from: state.user.publicKey ?? \"\",\r\n    amount: undefined,\r\n    message: \"\",\r\n    signature: \"\"\r\n  });\r\n\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    setValidated(true);\r\n\r\n    const form = e.currentTarget;\r\n    if (form.checkValidity()) {\r\n      if (!signed) {\r\n        // haven't signed the transaction yet\r\n        const formValues = Object.values({ ...form }).slice(1, 4).map((input) => input.value); // prettier-ignore\r\n        [formDetails.current.to, formDetails.current.amount, formDetails.current.message] = formValues;\r\n\r\n        const message = formDetails.current.to + formDetails.current.from + formDetails.current.message + formDetails.current.amount; // prettier-ignore\r\n        formDetails.current.signature = await digestMessage(message);\r\n      } else {\r\n        // signed the transaction and need to send now\r\n        const trans = JSON.parse(JSON.stringify(formDetails.current)); // create separate reference\r\n        dispatch({ type: ACTIONS.ADD_VERIFIED_TRANS, payload: { trans } });\r\n        setValidated(false);\r\n      }\r\n\r\n      setSigned(!signed);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid d-flex justify-content-center mx-auto row my-4\">\r\n      <Sign validated={validated} signed={signed} handleSubmit={handleSubmit} />\r\n      <Send\r\n        validated={validated}\r\n        signed={signed}\r\n        handleSubmit={handleSubmit}\r\n        details={formDetails.current}\r\n        setSigned={setSigned}\r\n        setValidated={setValidated}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState, IUser } from \"../../typings/AppTypes\";\r\nimport { copyKey } from \"../../utils/copyInput\";\r\n\r\nimport \"./User.css\";\r\n\r\nexport default function UserItems(): JSX.Element {\r\n  const { state } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n  const [copied, setCopied] = useState<boolean[]>(new Array(state.users.length).fill(false));\r\n\r\n  function resetCopy(index: number): void {\r\n    const newCopied = JSON.parse(JSON.stringify(copied));\r\n    newCopied[index] = false;\r\n    setCopied(newCopied);\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-fluid mb-2\">\r\n      <h3 className=\"font-weight-bold\">Users</h3>\r\n      <div className=\"row flex-nowrap overflow-auto bg-dark mx-1 px-2 rounded\">\r\n        {state.users?.map((user: IUser, i: number) => {\r\n          return (\r\n            <Form className=\"user-item rounded flex-shrink-0\" key={`user${i}`}>\r\n              <InputGroup>\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>🔑</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <Form.Control\r\n                  aria-label=\"User Public Key\"\r\n                  type=\"text\"\r\n                  className=\"text-truncate rounded-right\"\r\n                  onFocus={(e: React.FocusEvent<HTMLInputElement>) =>\r\n                    copyKey(e, setCopied, undefined, i, state.users.length)\r\n                  }\r\n                  onBlur={() => resetCopy(i)}\r\n                  defaultValue={user.publicKey}\r\n                  isValid={copied[i]}\r\n                  readOnly\r\n                />\r\n                <Form.Control.Feedback type=\"valid\">Copied to clipboard</Form.Control.Feedback>\r\n              </InputGroup>\r\n\r\n              <InputGroup className=\"mt-2\">\r\n                <Form.Control aria-label=\"balance\" type=\"number\" defaultValue={user.balance} disabled />\r\n                <InputGroup.Append>\r\n                  <InputGroup.Text>LC</InputGroup.Text>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n            </Form>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport NavMenu from \"../components/NavMenu/NavMenu\";\r\nimport KeyGeneration from \"../components/User/KeyGeneration\";\r\nimport Transaction from \"../components/Transaction/Transaction\";\r\nimport UserItems from \"../components/User/UserItems\";\r\n\r\nexport default function Wallet(): JSX.Element {\r\n  return (\r\n    <div>\r\n      <NavMenu />\r\n      <KeyGeneration />\r\n      <Transaction />\r\n      <UserItems />\r\n    </div>\r\n  );\r\n}\r\n","import { digestMessage, randomHash } from \"./conversion\";\r\n\r\nasync function createTarget(numZeros: number): Promise<string> {\r\n  const targetHash = await digestMessage(randomHash(20));\r\n\r\n  // replace leading bits with zeros\r\n  const re = new RegExp(`^.{0,${numZeros}}`, \"g\");\r\n  const zerosStr = Array(numZeros).fill(\"0\").join(\"\");\r\n\r\n  return targetHash.replace(re, zerosStr);\r\n}\r\n\r\nexport async function mine(\r\n  nonce: number,\r\n  setHeader: (arg: number) => void,\r\n  setTarget: (arg: string) => void,\r\n  setSolution: (arg: string) => void,\r\n  setIsValid: (arg: boolean) => void\r\n): Promise<string> {\r\n  // make target\r\n  const numZeros = Math.round(Math.random()) + 2;\r\n  const targetHash = await createTarget(numZeros);\r\n  setTarget(targetHash);\r\n\r\n  // mine\r\n  let candidateSolution = \"\";\r\n  let header = nonce; // re-assigning for clarity\r\n  while (header <= Number.MAX_SAFE_INTEGER) {\r\n    candidateSolution = await digestMessage(header.toString());\r\n    setSolution(candidateSolution);\r\n    setHeader(header++);\r\n\r\n    const leadingBits = candidateSolution.substr(0, numZeros).split(\"\");\r\n    if (leadingBits.every((bit) => bit === \"0\")) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  setIsValid(candidateSolution <= targetHash);\r\n  return candidateSolution;\r\n}\r\n","import { ACTIONS } from \"../enums/AppDispatchActions\";\r\nimport { IAction, IBlock, IState, ITransaction } from \"../typings/AppTypes\";\r\nimport { digestMessage } from \"./conversion\";\r\n\r\nexport async function propagateBlockStatus(\r\n  state: IState,\r\n  dispatch: React.Dispatch<IAction>,\r\n  block: IBlock,\r\n  prevHash: string,\r\n  skipFirstUpdate: boolean,\r\n  newRoot?: string,\r\n  transactions?: ITransaction[],\r\n  timestamp = Date.now()\r\n): Promise<void> {\r\n  const index = block.index;\r\n\r\n  for (let i = index; i < state.chain.length; i++) {\r\n    const merkleRoot = newRoot && i === index ? newRoot : state.chain[i].merkleRoot;\r\n    const currHash = i === index ? prevHash : await digestMessage(i + prevHash + merkleRoot);\r\n    const valid = skipFirstUpdate ? i === index : false;\r\n    const showTrans = state.chain[i].showTrans ?? false;\r\n    prevHash = i === index ? block.prevHash : prevHash;\r\n    transactions = i === index && transactions ? transactions : state.chain[i].transactions;\r\n\r\n    const newBlock = { index: i, timestamp, prevHash, currHash, transactions, merkleRoot, valid, showTrans };\r\n\r\n    prevHash = currHash; // next block's prevHash is this block's currHash\r\n\r\n    dispatch({ type: ACTIONS.UPDATE_BLOCK, payload: { block: newBlock } });\r\n  }\r\n}\r\n","import React, { useState, useRef, useContext } from \"react\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IBlock, IState } from \"../../typings/AppTypes\";\r\nimport { mine } from \"../../utils/mine\";\r\nimport { propagateBlockStatus } from \"../../utils/propagate\";\r\n\r\ninterface IStats {\r\n  chain: boolean;\r\n  isValid: boolean;\r\n  solution: string;\r\n  setIsValid: (arg: boolean) => void;\r\n  setSolution: (arg: string) => void;\r\n  block?: IBlock;\r\n}\r\n\r\nexport default function Statistics(props: IStats): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const nonce = useRef<number>();\r\n  const [header, setHeader] = useState<number>();\r\n  const [target, setTarget] = useState<string>();\r\n  const [disableMineBtn, setDisableMineBtn] = useState<boolean>(false);\r\n\r\n  async function handleMine() {\r\n    nonce.current = Math.round(Math.random() * 1e6);\r\n\r\n    setDisableMineBtn(true);\r\n    const hash = await mine(nonce.current, setHeader, setTarget, props.setSolution, props.setIsValid);\r\n    setDisableMineBtn(false);\r\n\r\n    // propagate changes if needed\r\n    if (props.chain && props.block) {\r\n      await propagateBlockStatus(state, dispatch, props.block, hash, true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={props.chain ? \"bordered-background\" : \"col-11 col-lg-5 mx-3\"}>\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Nonce</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control type=\"number\" defaultValue={props.solution ? nonce.current : \"\"} disabled />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Header</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control type=\"number\" defaultValue={header} disabled />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text className=\"font-weight-bold\">Target</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control className=\"text-truncate\" type=\"text\" defaultValue={target} readOnly />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Sol&apos;n</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          className=\"text-truncate\"\r\n          type=\"text\"\r\n          style={props.isValid ? { color: \"green\" } : { color: \"red\" }}\r\n          defaultValue={props.solution}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <Button\r\n        variant=\"primary\"\r\n        className=\"btn-block d-block mt-3\"\r\n        disabled={props.isValid || (!props.chain && state.selectedTrans.length === 0) || disableMineBtn}\r\n        onClick={() => handleMine()}\r\n      >\r\n        <h4 className=\"m-0\">\r\n          Mine {disableMineBtn && <span className=\"spinner-border spinner-border-md mx-3\" role=\"status\" />}\r\n        </h4>\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","import { ITransaction } from \"../typings/AppTypes\";\r\n\r\n// modified from https://github.com/foqc/bfs-canvas-tree\r\ninterface ICoordinate {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nclass Node {\r\n  value: string;\r\n  children: Node[];\r\n  parent: Node | null;\r\n  pos: ICoordinate;\r\n\r\n  constructor(value: string) {\r\n    this.value = value;\r\n    this.children = [];\r\n    this.parent = null;\r\n    this.pos = { x: 0, y: 0 };\r\n  }\r\n\r\n  get left(): Node {\r\n    return this.children[0];\r\n  }\r\n\r\n  set left(node: Node) {\r\n    node.parent = this;\r\n    this.children[0] = node;\r\n  }\r\n\r\n  get right(): Node {\r\n    return this.children[1];\r\n  }\r\n\r\n  set right(node: Node) {\r\n    node.parent = this;\r\n    this.children[1] = node;\r\n  }\r\n\r\n  get position(): ICoordinate {\r\n    return this.pos;\r\n  }\r\n\r\n  set position(position: ICoordinate) {\r\n    this.pos = position;\r\n  }\r\n}\r\n\r\nexport class Tree {\r\n  #root: Node | null;\r\n  #transactionSignatures: string[];\r\n  #startPosition: ICoordinate;\r\n  #dim: { width: number; height: number };\r\n  #ctx: CanvasRenderingContext2D | null;\r\n\r\n  constructor(canvas: HTMLCanvasElement, transactions: ITransaction[]) {\r\n    const xStart = window.innerWidth < 1200 ? window.innerWidth * 1.8 : (window.innerWidth / 2) * 0.7;\r\n    this.#root = null;\r\n    this.#transactionSignatures = transactions.map((transaction) => transaction.signature.slice(0, 25) + \"...\");\r\n    this.#startPosition = { x: xStart, y: 5 };\r\n    this.#ctx = canvas.getContext(\"2d\");\r\n    this.#dim = { width: canvas.width, height: canvas.height };\r\n  }\r\n\r\n  calculatePosition({ x, y }: ICoordinate, isLeft = false): ICoordinate {\r\n    const offset = 50;\r\n    return { x: isLeft ? x - offset * 6 : x + offset * 6, y: y + offset };\r\n  }\r\n\r\n  clear(): void {\r\n    if (this.#ctx) {\r\n      this.#ctx.clearRect(0, 0, this.#dim.width, this.#dim.height);\r\n    }\r\n  }\r\n\r\n  addNode(value: string): void {\r\n    const newNode = new Node(value !== \"\" ? value.slice(0, 25) + \"...\" : \"\");\r\n    if (!this.#root) {\r\n      newNode.position = this.#startPosition;\r\n      this.#root = newNode;\r\n    } else {\r\n      // start at root, if no node on left add and break, likewise for right\r\n      // only move in direction that does not have both children\r\n      let node = this.#root;\r\n      while (node) {\r\n        if (!node.left) {\r\n          newNode.position = this.calculatePosition(node.position, true);\r\n          node.left = newNode;\r\n          break;\r\n        }\r\n\r\n        if (!node.right) {\r\n          newNode.position = this.calculatePosition(node.position);\r\n          node.right = newNode;\r\n          break;\r\n        }\r\n\r\n        node = !node.left.left || !node.left.right ? node.left : node.right;\r\n      }\r\n    }\r\n  }\r\n\r\n  drawTree(): void {\r\n    const queue = [] as Node[];\r\n    queue.push(this.#root as Node);\r\n\r\n    // level order traversal\r\n    while (queue.length !== 0) {\r\n      const node = queue.shift();\r\n      const rectWidth = node && node.value.length * 9;\r\n\r\n      if (this.#ctx && rectWidth && node) {\r\n        // draw the root node\r\n        const { x, y } = node.position;\r\n        this.#ctx.beginPath();\r\n\r\n        this.#ctx.font = \"1rem Arial\";\r\n        this.#ctx.strokeStyle = \"#000\";\r\n\r\n        const leafOrBodyColor = this.#transactionSignatures.includes(node.value) ? \"#ddf\" : \"#ff0a\";\r\n        this.#ctx.fillStyle = node.value === this.#root?.value ? \"#dfd\" : leafOrBodyColor;\r\n\r\n        this.#ctx.fillRect(x - rectWidth / 2, y + 5, rectWidth, 30);\r\n        this.#ctx.fillStyle = \"#000\";\r\n        this.#ctx.fillText(node.value, x + 10 - rectWidth / 2, y + 27);\r\n\r\n        // draw it's children\r\n        node.children.forEach((child, i) => {\r\n          child.position.x = i === 1 ? child.position.x - 150 : child.position.x + 150; // avoid overlap\r\n          queue.push(child);\r\n          if (this.#ctx) {\r\n            this.#ctx.beginPath();\r\n            this.#ctx.moveTo(x + 0.5, y + 35);\r\n            this.#ctx.lineTo(child.position.x + 0.5, child.position.y + 5);\r\n            this.#ctx.stroke();\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Tree } from \"./Tree\";\r\nimport { ITransaction } from \"../typings/AppTypes\";\r\nimport { digestMessage } from \"./conversion\";\r\n\r\nexport async function calculateMerkleTreeFormation(\r\n  verifiedTrans: ITransaction[],\r\n  selectedTrans: ITransaction[],\r\n  setMerkleTree?: (arg: string[][]) => void\r\n): Promise<string> {\r\n  let tree = [[\"\"]];\r\n  if (selectedTrans.length > 0) {\r\n    // need to make sure node's in tree appear in same order as in the verified transaction pane, regardless of selection order\r\n    const verifiedSignatures = verifiedTrans.map((trans) => trans.signature);\r\n    const selectedSignatures = selectedTrans.map((trans) => trans.signature);\r\n    let signatures = verifiedSignatures.filter((sig) => selectedSignatures.includes(sig));\r\n    tree = [signatures];\r\n\r\n    while (signatures.length !== 1) {\r\n      const hashArr = [] as string[];\r\n      for (let i = 0; i < signatures.length; i += 2) {\r\n        const hash = signatures[i + 1] ? await digestMessage(signatures[i] + signatures[i + 1]) : signatures[i];\r\n        hashArr.push(hash);\r\n      }\r\n\r\n      signatures = hashArr;\r\n      tree.push(hashArr);\r\n    }\r\n  }\r\n\r\n  if (setMerkleTree) {\r\n    setMerkleTree(tree);\r\n  }\r\n\r\n  return getMerkleRoot(tree);\r\n}\r\n\r\nexport function getMerkleRoot(tree: string[][]): string {\r\n  return tree[tree.length - 1][0];\r\n}\r\n\r\nexport function flattenTree(tree: string[][]): string[] {\r\n  let flatTree = [] as string[];\r\n  // need to reverse each tree row so that printing produces the right order!\r\n  for (let i = 0; i < tree.length; i++) {\r\n    flatTree = flatTree.concat(tree[i].reverse());\r\n  }\r\n\r\n  return flatTree;\r\n}\r\n\r\nexport function drawTreeDiagramOnCanvas(\r\n  merkleTree: string[][],\r\n  canvas: HTMLCanvasElement | null,\r\n  transactions: ITransaction[]\r\n): void {\r\n  if (canvas) {\r\n    const canvasTree = new Tree(canvas, transactions);\r\n    canvasTree.clear();\r\n    const flatTree = flattenTree(merkleTree);\r\n    for (let i = flatTree.length - 1; i >= 0; i--) {\r\n      canvasTree.addNode(flatTree[i]);\r\n    }\r\n    canvasTree.drawTree();\r\n  }\r\n}\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\n\r\nimport Statistics from \"./Statistics\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IBlock, IState, ITransaction } from \"../../typings/AppTypes\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\n\r\nimport { digestMessage } from \"../../utils/conversion\";\r\nimport { calculateMerkleTreeFormation } from \"../../utils/merkleTree\";\r\nimport { propagateBlockStatus } from \"../../utils/propagate\";\r\n\r\nimport \"./Block.css\";\r\n\r\ntype TChange = \"from\" | \"to\" | \"message\" | \"amount\";\r\ntype TInputChange<T = HTMLInputElement> = React.ChangeEvent<T>;\r\n\r\nexport default function Block({ block }: { block: IBlock }): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const [solution, setSolution] = useState<string>(\"\");\r\n  const [timestamp, setTimestamp] = useState<number>(Date.now());\r\n  const [isValid, setIsValid] = useState<boolean>(block.valid ?? true);\r\n  const [showTrans, setShowTrans] = useState<boolean>(block.showTrans ?? false);\r\n\r\n  // update timestamp when solution is mined\r\n  useEffect(() => setTimestamp(Date.now()), [solution]);\r\n\r\n  async function calculateNewMerkleRoot(newVal: number | string, index: number, type: TChange): Promise<void> {\r\n    const newTrans = JSON.parse(JSON.stringify(block.transactions)); // deep copy\r\n\r\n    // update the changed value & signature\r\n    newTrans[index][type] = newVal;\r\n    newTrans[index].signature = await digestMessage(newTrans[index].to + newTrans[index].from + newTrans[index].amount + newTrans[index].message); // prettier-ignore\r\n\r\n    // calculate new merkle root and currHash\r\n    const root = await calculateMerkleTreeFormation(newTrans, newTrans);\r\n    const newHash = await digestMessage(block.index + block.prevHash + root);\r\n\r\n    await propagateBlockStatus(state, dispatch, block, newHash, false, root, newTrans);\r\n  }\r\n\r\n  function handleViewTransactions(): void {\r\n    setShowTrans(!showTrans);\r\n    dispatch({ type: ACTIONS.UPDATE_BLOCK, payload: { block: { ...block, showTrans: !showTrans } } });\r\n  }\r\n\r\n  return (\r\n    <div className=\"block flex-column flex-shrink-0\">\r\n      <div className={\"my-3 mx-1 p-2 rounded \" + (isValid ? \"valid-block\" : \"invalid-block\")}>\r\n        <Form>\r\n          <InputGroup className=\"my-2\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Index</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control type=\"number\" defaultValue={block.index} disabled />\r\n          </InputGroup>\r\n\r\n          <InputGroup className=\"my-2\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Timestamp</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control type=\"number\" defaultValue={solution ? timestamp : block.timestamp} disabled />\r\n          </InputGroup>\r\n\r\n          <InputGroup className=\"my-2\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Previous #</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control className=\"text-truncate\" type=\"text\" defaultValue={block.prevHash} readOnly />\r\n          </InputGroup>\r\n\r\n          <InputGroup className=\"my-2\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Current #</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              className=\"text-truncate\"\r\n              type=\"text\"\r\n              defaultValue={solution ? solution : block.currHash}\r\n              readOnly\r\n            />\r\n          </InputGroup>\r\n\r\n          <InputGroup className=\"my-2\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Merkle #</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            {block.index === 0 ? (\r\n              <Form.Control type=\"text\" defaultValue={\"\"} disabled />\r\n            ) : (\r\n              <React.Fragment>\r\n                <Form.Control className=\"text-truncate\" type=\"text\" defaultValue={block.merkleRoot} readOnly />\r\n                <InputGroup.Append>\r\n                  <InputGroup.Text className=\"show-trans-eye\" onClick={() => handleViewTransactions()}>\r\n                    {showTrans ? \"🙈\" : \"🙉\"}\r\n                  </InputGroup.Text>\r\n                </InputGroup.Append>\r\n              </React.Fragment>\r\n            )}\r\n          </InputGroup>\r\n        </Form>\r\n\r\n        <Statistics\r\n          chain={true}\r\n          block={block}\r\n          solution={solution}\r\n          setSolution={setSolution}\r\n          isValid={isValid}\r\n          setIsValid={setIsValid}\r\n        />\r\n      </div>\r\n\r\n      {showTrans && (\r\n        <div className=\"row flex-nowrap overflow-auto mx-2\">\r\n          {block.transactions.map((transaction: ITransaction, i: number) => {\r\n            return (\r\n              <div className=\"col-12 mr-2 bg-light border border-dark p-1 rounded\" key={`blockTrans${i}`}>\r\n                <Form.Group className=\"mb-2 text-center\">\r\n                  <Form.Control\r\n                    className=\"text-truncate\"\r\n                    type=\"text\"\r\n                    value={transaction.from}\r\n                    onChange={(e: TInputChange) => calculateNewMerkleRoot(e.target.value, i, \"from\")}\r\n                  />\r\n                  <h3 className=\"my-0\">↓</h3>\r\n                  <Form.Control\r\n                    className=\"text-truncate\"\r\n                    type=\"text\"\r\n                    value={transaction.to}\r\n                    onChange={(e: TInputChange) => calculateNewMerkleRoot(e.target.value, i, \"to\")}\r\n                  />\r\n                </Form.Group>\r\n\r\n                <InputGroup className=\"mb-2\">\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text>Msg</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <Form.Control\r\n                    as=\"textarea\"\r\n                    value={transaction.message}\r\n                    onChange={(e: TInputChange<HTMLTextAreaElement>) =>\r\n                      calculateNewMerkleRoot(e.target.value, i, \"message\")\r\n                    }\r\n                  />\r\n                </InputGroup>\r\n\r\n                <InputGroup className=\"mb-2\">\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    value={transaction.amount && parseFloat(transaction.amount + \"\").toFixed(2)}\r\n                    onChange={(e: TInputChange) => calculateNewMerkleRoot(e.target.value, i, \"amount\")}\r\n                  />\r\n                  <InputGroup.Append>\r\n                    <InputGroup.Text>LC</InputGroup.Text>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n\r\n                <InputGroup>\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text>Sig</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <Form.Control className=\"text-truncate\" type=\"text\" defaultValue={transaction.signature} readOnly />\r\n                </InputGroup>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\n\r\nimport Block from \"./Block\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState } from \"../../typings/AppTypes\";\r\n\r\nimport \"./Block.css\";\r\n\r\nexport default function BlockChain(): JSX.Element {\r\n  const { state } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  return (\r\n    <div className=\"mx-3 row flex-nowrap overflow-auto\">\r\n      {state.chain.map((block) => (\r\n        <Block block={block} key={Math.random()} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport NavMenu from \"../components/NavMenu/NavMenu\";\r\nimport BlockChain from \"../components/Block/BlockChain\";\r\n\r\nexport default function Chain(): JSX.Element {\r\n  return (\r\n    <div>\r\n      <NavMenu />\r\n      <BlockChain />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useRef, useState, useEffect, useContext } from \"react\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\n\r\nimport Statistics from \"./Statistics\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState } from \"../../typings/AppTypes\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { calculateMerkleTreeFormation, drawTreeDiagramOnCanvas, getMerkleRoot } from \"../../utils/merkleTree\";\r\n\r\nimport \"./Block.css\";\r\n\r\nexport default function PreviewBlock(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const treeCanvas = useRef<HTMLCanvasElement | null>(null);\r\n\r\n  const [solution, setSolution] = useState<string>(\"\");\r\n  const [isValid, setIsValid] = useState<boolean>(false);\r\n  const [timestamp, setTimestamp] = useState<number>(Date.now());\r\n  const [merkleTree, setMerkleTree] = useState<string[][]>([[\"\"]]);\r\n  const [index, setIndex] = useState<number>(state.chain[state.chain.length - 1].index + 1);\r\n  const [prevHash, setPrevHash] = useState<string>(state.chain[state.chain.length - 1].currHash);\r\n\r\n  useEffect(() => {\r\n    calculateMerkleTreeFormation(state.verifiedTrans, state.selectedTrans, setMerkleTree);\r\n    setIsValid(false);\r\n  }, [state.selectedTrans]);\r\n\r\n  // draw tree in canvas\r\n  useEffect(() => {\r\n    drawTreeDiagramOnCanvas(merkleTree, treeCanvas.current, state.selectedTrans);\r\n  }, [merkleTree]);\r\n\r\n  // update timestamp & currentHash when solution is mined\r\n  useEffect(() => setTimestamp(Date.now()), [solution]);\r\n\r\n  function handleAddBlock() {\r\n    const block = {\r\n      index,\r\n      prevHash,\r\n      currHash: solution,\r\n      transactions: state.selectedTrans,\r\n      timestamp,\r\n      merkleRoot: getMerkleRoot(merkleTree),\r\n      valid: state.chain[index - 1].valid, // validity depends on previous block\r\n      showTrans: false\r\n    };\r\n\r\n    // add the block, update verified transactions, clear selected transactions\r\n    dispatch({ type: ACTIONS.ADD_BLOCK, payload: { block } });\r\n    dispatch({ type: ACTIONS.UPDATE_VERIFIED_TRANS });\r\n    dispatch({ type: ACTIONS.UPDATE_SELECTED_TRANS, payload: { selectedTrans: [] } });\r\n\r\n    // update preview details\r\n    setIsValid(false);\r\n    setIndex(index + 1);\r\n    setPrevHash(solution);\r\n    setSolution(\"\");\r\n    setTimestamp(Date.now());\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-fluid row d-flex justify-content-center mx-auto my-3\">\r\n      <div className=\"mb-2 d-none d-lg-block\">\r\n        <h4 className=\"font-weight-bold text-center\">Merkle Tree Visualization</h4>\r\n        <canvas ref={treeCanvas} className=\"border border-dark rounded\" width={window.outerWidth * 0.7} />\r\n      </div>\r\n\r\n      <Statistics\r\n        chain={false}\r\n        solution={solution}\r\n        setSolution={setSolution}\r\n        isValid={isValid}\r\n        setIsValid={setIsValid}\r\n      />\r\n\r\n      <Form className={\"col-10 col-lg-5 my-4 my-lg-0 pb-2 rounded \" + (isValid ? \"valid-block\" : \"invalid-block\")}>\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Index</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control type=\"number\" value={index} disabled />\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Timestamp</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control type=\"number\" value={timestamp} disabled />\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Previous #</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control className=\"text-truncate\" type=\"text\" value={prevHash} readOnly />\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Current #</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control className=\"text-truncate\" type=\"text\" value={solution} readOnly />\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"mt-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Merkle #</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control className=\"text-truncate\" type=\"text\" value={getMerkleRoot(merkleTree)} readOnly />\r\n        </InputGroup>\r\n\r\n        {isValid && (\r\n          <Button className=\"mt-2\" variant=\"success\" block onClick={() => handleAddBlock()}>\r\n            <h3 className=\"my-0 font-weight-bold\">+</h3>\r\n          </Button>\r\n        )}\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { IAction, IState, ITransaction } from \"../../typings/AppTypes\";\r\n\r\nimport \"./Transaction.css\";\r\n\r\nexport default function TransactionItems(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  function selectTransaction(transaction: ITransaction): void {\r\n    let selectedTrans: ITransaction[] = JSON.parse(JSON.stringify(state)).selectedTrans;\r\n    const signatures = selectedTrans.map((x) => x.signature);\r\n    const included = signatures.includes(transaction.signature);\r\n\r\n    if (selectedTrans.length < 4 || included) {\r\n      // if just selected - push onto stack, else remove it\r\n      // adjust backgrounds according to selection/deselection\r\n      if (!included) {\r\n        selectedTrans.push(transaction);\r\n      } else {\r\n        selectedTrans = selectedTrans.filter((x) => x.signature !== transaction.signature);\r\n      }\r\n\r\n      dispatch({ type: ACTIONS.UPDATE_SELECTED_TRANS, payload: { selectedTrans } });\r\n    } else {\r\n      alert(\"You can mine at most 4 transactions at a time!\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <h3 className=\"font-weight-bold\">Verified Transactions</h3>\r\n      <div className=\"trans-list row flex-nowrap overflow-auto bg-dark mx-1 px-2 rounded\">\r\n        {state.verifiedTrans.map((transaction: ITransaction, i: number) => {\r\n          return (\r\n            <div\r\n              className={\r\n                \"trans-item \" +\r\n                (state.selectedTrans.map((x) => x.signature).includes(transaction.signature) ? \"selected\" : \"not-selected\") // prettier-ignore\r\n              }\r\n              onClick={() => selectTransaction(transaction)}\r\n              key={`verifiedTrans${i}`}\r\n            >\r\n              <Form.Group className=\"mb-2 text-center\">\r\n                <Form.Control className=\"text-truncate\" type=\"text\" defaultValue={transaction.from} readOnly />\r\n                <h3 className=\"my-0\">↓</h3>\r\n                <Form.Control className=\"text-truncate\" type=\"text\" defaultValue={transaction.to} readOnly />\r\n              </Form.Group>\r\n\r\n              <InputGroup className=\"mb-2\">\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>Msg</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <Form.Control as=\"textarea\" defaultValue={transaction.message} readOnly />\r\n              </InputGroup>\r\n\r\n              <InputGroup className=\"mb-2\">\r\n                <Form.Control type=\"number\" defaultValue={transaction.amount} disabled />\r\n                <InputGroup.Append>\r\n                  <InputGroup.Text>LC</InputGroup.Text>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n\r\n              <InputGroup>\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>Sig</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <Form.Control className=\"text-truncate\" type=\"text\" defaultValue={transaction.signature} readOnly />\r\n              </InputGroup>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport NavMenu from \"../components/NavMenu/NavMenu\";\r\nimport PreviewBlock from \"../components/Block/PreviewBlock\";\r\nimport TransactionItems from \"../components/Transaction/TransactionItems\";\r\n\r\nexport default function Mine(): JSX.Element {\r\n  return (\r\n    <div>\r\n      <NavMenu />\r\n      <TransactionItems />\r\n      <PreviewBlock />\r\n    </div>\r\n  );\r\n}\r\n","import { ACTIONS } from \"../enums/AppDispatchActions\";\r\nimport { IAction, IState, IUser, ITransaction, IBlock, IMainUser } from \"../typings/AppTypes\";\r\n\r\nexport const AppReducer = (state: IState, action: IAction): IState => {\r\n  switch (action.type) {\r\n    case ACTIONS.ADD_VERIFIED_TRANS: {\r\n      const { trans } = action.payload as { trans: ITransaction };\r\n      state.verifiedTrans.push(trans);\r\n      localStorage.setItem(\"verTrans\", JSON.stringify(state.verifiedTrans));\r\n      return state;\r\n    }\r\n\r\n    case ACTIONS.UPDATE_VERIFIED_TRANS: {\r\n      const selectedTransSignatures = state.selectedTrans.map((x) => x.signature);\r\n      const verifiedTrans = state.verifiedTrans.filter((x) => !selectedTransSignatures.includes(x.signature));\r\n      localStorage.setItem(\"verTrans\", JSON.stringify(verifiedTrans));\r\n      return { ...state, verifiedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_SELECTED_TRANS: {\r\n      const { selectedTrans } = action.payload as { selectedTrans: ITransaction[] };\r\n      localStorage.setItem(\"selTrans\", JSON.stringify(selectedTrans));\r\n      return { ...state, selectedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_USERS: {\r\n      const { users } = action.payload as { users: IUser[] };\r\n      localStorage.setItem(\"users\", JSON.stringify(users));\r\n      return { ...state, users };\r\n    }\r\n\r\n    case ACTIONS.SET_MAIN_USER: {\r\n      const { user } = action.payload as { user: IMainUser };\r\n      localStorage.setItem(\"user\", JSON.stringify(user));\r\n      return { ...state, user };\r\n    }\r\n\r\n    case ACTIONS.ADD_BLOCK: {\r\n      const { block } = action.payload as { block: IBlock };\r\n      state.chain.push(block);\r\n      localStorage.setItem(\"chain\", JSON.stringify(state.chain));\r\n      return state;\r\n    }\r\n\r\n    case ACTIONS.UPDATE_BLOCK: {\r\n      const { block } = action.payload as { block: IBlock };\r\n      const ogState = JSON.parse(JSON.stringify(state));\r\n      ogState.chain[block.index] = block;\r\n      localStorage.setItem(\"chain\", JSON.stringify(ogState.chain));\r\n      return { ...ogState, chain: ogState.chain };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { useMemo, useReducer } from \"react\";\r\nimport { Route, BrowserRouter as Router, Redirect } from \"react-router-dom\";\r\n\r\nimport Wallet from \"../../pages/Wallet\";\r\nimport Chain from \"../../pages/Chain\";\r\nimport Mine from \"../../pages/Mine\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport { AppReducer } from \"../../reducers/AppReducer\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\n\r\nexport default function App(): JSX.Element {\r\n  const [state, dispatch] = useReducer(AppReducer, {\r\n    verifiedTrans: JSON.parse(localStorage.getItem(\"verTrans\") as string) ?? [],\r\n    selectedTrans: JSON.parse(localStorage.getItem(\"selTrans\") as string) ?? [],\r\n    users: JSON.parse(localStorage.getItem(\"users\") as string) ?? [],\r\n    user: JSON.parse(localStorage.getItem(\"user\") as string) ?? {},\r\n    chain: JSON.parse(localStorage.getItem(\"chain\") as string) ?? [\r\n      {\r\n        index: 0,\r\n        prevHash: \"\",\r\n        currHash: new Array(64).fill(\"0\").join(\"\"),\r\n        transactions: [],\r\n        timestamp: Date.parse(\"04/31/2021\"),\r\n        merkleRoot: \"\"\r\n      }\r\n    ]\r\n  });\r\n\r\n  // prevent re-rendering children when App re-renders\r\n  const value = useMemo(() => ({ state, dispatch }), [state, dispatch]);\r\n\r\n  return (\r\n    <Router basename={\"/LibraCoin\"}>\r\n      <AppContext.Provider value={value}>\r\n        <Route exact path=\"/\">\r\n          <Redirect to=\"/wallet\" />\r\n        </Route>\r\n        <Route path=\"/wallet\" component={Wallet} />\r\n        <Route path=\"/mine\" component={Mine} />\r\n        <Route path=\"/blockchain\" component={Chain} />\r\n      </AppContext.Provider>\r\n    </Router>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App/App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}