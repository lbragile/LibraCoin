{"version":3,"sources":["components/NavMenu/NavMenu.tsx","enums/AppDispatchActions.ts","context/AppContext.ts","utils/copyInput.ts","utils/conversion.ts","components/User/KeyGeneration.tsx","components/Transaction/SendUI.tsx","components/Transaction/SignUI.tsx","components/Transaction/Transaction.tsx","components/User/UserItems.tsx","pages/Wallet.tsx","utils/mine.ts","components/Block/Statistics.tsx","components/Block/Tree.ts","utils/merkleTree.ts","components/Block/BlockTrans.tsx","components/Block/Block.tsx","components/Block/BlockChain.tsx","pages/Chain.tsx","components/Block/PreviewBlock.tsx","components/Transaction/TransactionItems.tsx","pages/Mine.tsx","reducers/AppReducer.ts","components/App/App.tsx","index.tsx"],"names":["NavMenu","Navbar","expand","className","Brand","href","src","alt","width","Toggle","aria-controls","Collapse","id","Nav","Link","active","location","includes","ACTIONS","AppContext","React","createContext","undefined","copyKey","e","setCopied","type","target","select","setSelectionRange","document","execCommand","isPublic","value","bufferToHex","hashBuffer","Array","from","Uint8Array","map","b","toString","padStart","join","digestMessage","message","a","msgUint8","TextEncoder","encode","window","crypto","subtle","digest","randomHash","len","getRandomValues","Uint32Array","KeyGeneration","useContext","state","dispatch","publicKeyRef","useRef","privateKeyRef","numRows","useState","copied","CryptoKeyToHex","format","key","exportKey","buf","generateKey","name","namedCurve","publicKey","privateKey","publicKeyStr","privateKeyStr","current","innerText","length","fill","localStorage","setItem","JSON","stringify","balance","newUsers","users","UPDATE_USERS","payload","useEffect","parse","getItem","addUser","Form","Group","Label","Control","as","rows","defaultValue","isValid","onFocus","ref","Feedback","onClick","SendUI","props","noValidate","onSubmit","handleSubmit","details","to","disabled","Text","InputGroup","amount","Prepend","placeholder","signature","Button","variant","signed","block","SignUI","validated","pattern","required","onBlur","userBalance","Math","min","max","toFixed","checkAmount","Transaction","setValidated","setSigned","formDetails","preventDefault","form","currentTarget","checkValidity","formInputs","formValues","Object","values","slice","input","ADD_VERIFIED_TRANS","trans","UserItems","user","Append","random","Wallet","createTarget","numZeros","targetHash","re","RegExp","zerosStr","replace","mine","nonce","setHeader","setTarget","setSolution","setIsValid","round","candidateSolution","header","Number","MAX_SAFE_INTEGER","substr","split","every","bit","Statistics","hash","propagateBlockStatus","chain","solution","style","color","selectedTrans","handleMine","Node","children","parent","pos","this","x","y","node","position","Tree","canvas","transactions","xStart","innerWidth","transaction","getContext","height","isLeft","offset","clearRect","newNode","left","calculatePosition","right","queue","push","shift","rectWidth","beginPath","font","strokeStyle","leafOrBodyColor","fillStyle","fillRect","fillText","forEach","child","i","moveTo","lineTo","stroke","calculateMerkleTreeFormation","verifiedTrans","setMerkleTree","tree","verifiedSignatures","selectedSignatures","signatures","filter","sig","hashArr","getMerkleRoot","BlockTrans","setMerkleRoot","setTrans","calculateNewMerkleRoot","index","newVal","newTrans","root","onChange","parseFloat","Block","Date","now","timestamp","setTimestamp","merkleRoot","valid","showTrans","setShowTrans","newRoot","prevHash","newHash","skipFirstUpdate","currHash","newBlock","UPDATE_BLOCK","Fragment","updateBlockStatus","BlockChain","Chain","PreviewBlock","treeCanvas","merkleTree","setIndex","setPrevHash","canvasTree","clear","flatTree","concat","reverse","flattenTree","addNode","drawTree","drawTreeDiagramOnCanvas","ADD_BLOCK","UPDATE_VERIFIED_TRANS","UPDATE_SELECTED_TRANS","handleAddBlock","TransactionLineUI","included","alert","selectTransaction","Mine","AppReducer","action","prevTrans","selectedTransSignatures","App","useReducer","useMemo","basename","Provider","exact","path","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.68851b40.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\n\r\nimport \"./NavMenu.css\";\r\n\r\nexport default function NavMenu(): JSX.Element {\r\n  return (\r\n    <Navbar expand=\"lg\" className=\"mb-3\">\r\n      <Navbar.Brand href=\"https://github.com/lbragile/LibraCoin\">\r\n        <img src=\"./assets/libracoin-logo-256.png\" alt=\"LibraCoin Logo\" width=\"64\" />\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"ml-auto\">\r\n          <Nav.Link href=\"/LibraCoin/wallet\" active={location.href.includes(\"/wallet\")}>\r\n            Wallet\r\n          </Nav.Link>\r\n          <Nav.Link href=\"/LibraCoin/mine\" active={location.href.includes(\"/mine\")}>\r\n            Mine\r\n          </Nav.Link>\r\n          <Nav.Link href=\"/LibraCoin/blockchain\" active={location.href.includes(\"/blockchain\")}>\r\n            Blockchain\r\n          </Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\n","export enum ACTIONS {\r\n  ADD_VERIFIED_TRANS,\r\n  UPDATE_VERIFIED_TRANS,\r\n  UPDATE_SELECTED_TRANS,\r\n  UPDATE_USERS,\r\n  ADD_BLOCK,\r\n  UPDATE_BLOCK\r\n}\r\n","import React from \"react\";\r\nimport { IAction, IState } from \"../typings/AppTypes\";\r\n\r\ntype TAppContext = { state: IState; dispatch: React.Dispatch<IAction> } | undefined;\r\n\r\nexport const AppContext = React.createContext<TAppContext>(undefined);\r\n","export function copyKey(\r\n  e: React.FocusEvent<HTMLTextAreaElement | HTMLInputElement>,\r\n  setCopied: (arg: boolean[]) => void,\r\n  type?: \"public\" | \"private\"\r\n): void {\r\n  e.target.select();\r\n  e.target.setSelectionRange(0, 1e6);\r\n  document.execCommand(\"copy\");\r\n\r\n  // wallet page, copying keys\r\n  if (type) {\r\n    const isPublic = type === \"public\";\r\n    setCopied([isPublic, !isPublic && !e.target.value.includes(\"◦\")]);\r\n  } else {\r\n    setCopied([true]);\r\n  }\r\n}\r\n","export function bufferToHex(hashBuffer: ArrayBuffer): string {\r\n  const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\r\n  const hashHex = hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\"); // convert bytes to hex string\r\n  return hashHex;\r\n}\r\n\r\nexport async function digestMessage(message: string): Promise<string> {\r\n  const msgUint8 = new TextEncoder().encode(message); // encode as (utf-8) Uint8Array\r\n  const hashBuffer = await window.crypto.subtle.digest(\"SHA-256\", msgUint8); // hash the message\r\n  return bufferToHex(hashBuffer);\r\n}\r\n\r\nexport function randomHash(len: number): string {\r\n  return bufferToHex(window.crypto.getRandomValues(new Uint32Array(len)));\r\n}\r\n","import React, { useRef, useState, useContext, useEffect } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState } from \"../../typings/AppTypes\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { copyKey } from \"../../utils/copyInput\";\r\nimport { bufferToHex } from \"../../utils/conversion\";\r\n\r\nimport \"./User.css\";\r\n\r\nexport default function KeyGeneration(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const publicKeyRef = useRef<HTMLTextAreaElement>(null);\r\n  const privateKeyRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n  const numRows = useRef(3);\r\n\r\n  const [copied, setCopied] = useState<boolean[]>([false, false]);\r\n\r\n  // add a user if it's the first time visiting\r\n  useEffect(() => {\r\n    if (!JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey) {\r\n      addUser();\r\n    }\r\n  }, []);\r\n\r\n  async function CryptoKeyToHex(format: string, key: CryptoKey): Promise<string> {\r\n    const buf = (await window.crypto.subtle.exportKey(format, key)) as ArrayBuffer;\r\n    return bufferToHex(buf);\r\n  }\r\n\r\n  async function addUser(): Promise<void> {\r\n    const { publicKey, privateKey } = await window.crypto.subtle.generateKey(\r\n      { name: \"ECDSA\", namedCurve: \"P-256\" },\r\n      true,\r\n      [\"sign\", \"verify\"]\r\n    );\r\n\r\n    const publicKeyStr = await CryptoKeyToHex(\"spki\", publicKey as CryptoKey);\r\n    const privateKeyStr = await CryptoKeyToHex(\"pkcs8\", privateKey as CryptoKey);\r\n    if (publicKeyRef.current && privateKeyRef.current) {\r\n      publicKeyRef.current.innerText = publicKeyStr;\r\n      privateKeyRef.current.innerText = new Array(privateKeyStr.length).fill(\"◦\").join(\"\");\r\n    }\r\n    localStorage.setItem(\"user\", JSON.stringify({ publicKey: publicKeyStr, privateKey: privateKeyStr, balance: 1000 })); // prettier-ignore\r\n\r\n    const newUsers = [...state.users, { publicKey: publicKeyStr, balance: 1000 }];\r\n    dispatch({ type: ACTIONS.UPDATE_USERS, payload: { users: newUsers } });\r\n  }\r\n\r\n  const togglePrivateKey = () => {\r\n    if (privateKeyRef.current) {\r\n      if (privateKeyRef.current.value.includes(\"◦\")) {\r\n        privateKeyRef.current.value = JSON.parse(localStorage.getItem(\"user\") as string).privateKey;\r\n      } else {\r\n        privateKeyRef.current.value = new Array(privateKeyRef.current.value.length).fill(\"◦\").join(\"\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid row d-flex align-items-center justify-content-center mx-auto\">\r\n      <Form.Group className=\"user-key col-5 px-0\">\r\n        <Form.Label className=\"mb-3\">\r\n          <h4 className=\"mb-0\">Public:</h4>\r\n        </Form.Label>\r\n        <Form.Control\r\n          as=\"textarea\"\r\n          rows={numRows.current}\r\n          defaultValue={localStorage.getItem(\"user\") && JSON.parse(localStorage.getItem(\"user\") as string).publicKey}\r\n          isValid={copied[0]}\r\n          onFocus={(e: React.FocusEvent<HTMLTextAreaElement>) => copyKey(e, setCopied, \"public\")}\r\n          ref={publicKeyRef}\r\n        />\r\n        <Form.Control.Feedback type=\"valid\">Copied to clipboard!</Form.Control.Feedback>\r\n      </Form.Group>\r\n\r\n      <Form.Group className=\"user-key col-5 px-0 ml-4\">\r\n        <Form.Label className=\"mb-3\">\r\n          <h4 className=\"mb-0\">\r\n            Private:{\" \"}\r\n            {JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey && (\r\n              <span id=\"private-reveal-eyes\" onClick={togglePrivateKey}>\r\n                👀\r\n              </span>\r\n            )}\r\n          </h4>\r\n        </Form.Label>\r\n        <Form.Control\r\n          as=\"textarea\"\r\n          rows={numRows.current}\r\n          defaultValue={\r\n            localStorage.getItem(\"user\")\r\n              ? new Array(JSON.parse(localStorage.getItem(\"user\") as string).privateKey.length).fill(\"◦\").join(\"\")\r\n              : \"\"\r\n          }\r\n          onFocus={(e: React.FocusEvent<HTMLTextAreaElement>) => copyKey(e, setCopied, \"private\")}\r\n          isValid={copied[1]}\r\n          ref={privateKeyRef}\r\n        />\r\n        <Form.Control.Feedback type=\"valid\">Copied to clipboard!</Form.Control.Feedback>\r\n      </Form.Group>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\r\nimport { ITransaction } from \"../../typings/AppTypes\";\r\nimport { ISign } from \"./SignUI\";\r\n\r\ninterface ISend extends ISign {\r\n  details: ITransaction;\r\n  setSigned: (arg: boolean) => void;\r\n  setValidated: (arg: boolean) => void;\r\n}\r\n\r\nexport default function SendUI(props: ISend): JSX.Element {\r\n  return (\r\n    <Form noValidate className=\"col-12 col-lg-5 my-2 my-lg-0 trans-form\" onSubmit={(e) => props.handleSubmit(e)}>\r\n      <Form.Group>\r\n        <Form.Control type=\"text\" defaultValue={props.details.to} disabled={true} />\r\n        <Form.Text className=\"text-muted\">The receiver&apos;s public key</Form.Text>\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <InputGroup className=\"mb-2\">\r\n          <Form.Control type=\"number\" defaultValue={props.details.amount} disabled={true} />\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>LC</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <Form.Control\r\n          as=\"textarea\"\r\n          defaultValue={props.details.message}\r\n          rows={5}\r\n          placeholder=\"optional message...\"\r\n          disabled={true}\r\n        />\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <Form.Control type=\"text\" defaultValue={props.details.signature} disabled={true} />\r\n        <Form.Text className=\"text-muted\">\r\n          Transaction Signature → receiver uses this along with your public key to verify transaction.\r\n        </Form.Text>\r\n      </Form.Group>\r\n\r\n      <Button variant=\"primary\" type=\"submit\" disabled={!props.signed} block>\r\n        <b>Send</b>\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\r\n\r\nexport interface ISign {\r\n  validated: boolean;\r\n  signed: boolean;\r\n  handleSubmit: (e: React.FormEvent<HTMLFormElement>) => void;\r\n}\r\n\r\nexport default function SignUI({ validated, signed, handleSubmit }: ISign): JSX.Element {\r\n  function checkAmount(e: React.ChangeEvent<HTMLInputElement>): void {\r\n    const userBalance = JSON.parse(localStorage.getItem(\"user\") as string)?.balance || 1000;\r\n    e.target.value = Math.min(Math.max(0.1, +e.target.value), userBalance).toFixed(2).toString(); // prettier-ignore\r\n  }\r\n\r\n  return (\r\n    <Form noValidate validated={validated} className=\"col-12 col-lg-5 trans-form\" onSubmit={handleSubmit}>\r\n      <Form.Group>\r\n        <Form.Control\r\n          type=\"text\"\r\n          defaultValue={JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey || \"\"}\r\n          disabled={true}\r\n        />\r\n        <Form.Text className=\"text-muted\">\r\n          Your public key → used to verify transaction was signed using your private key\r\n        </Form.Text>\r\n        <h3 className=\"my-0 text-center\">↓</h3>\r\n        <Form.Control type=\"text\" placeholder=\"Receiver's public key\" pattern=\"[A-Za-z0-9]{182,182}\" required />\r\n        <Form.Control.Feedback type=\"invalid\">Must be of the same format as your public key</Form.Control.Feedback>\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <InputGroup className=\"mb-2\">\r\n          <Form.Control\r\n            type=\"number\"\r\n            placeholder=\"1.00\"\r\n            onBlur={(e: React.ChangeEvent<HTMLInputElement>) => checkAmount(e)}\r\n            required\r\n          />\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>LC</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <Form.Control as=\"textarea\" rows={2} placeholder=\"optional message...\" />\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <Form.Control\r\n          type=\"text\"\r\n          defaultValue={JSON.parse(localStorage.getItem(\"user\") as string)?.privateKey || \"\"}\r\n          disabled={true}\r\n        />\r\n        <Form.Text className=\"text-muted\">Your private key → not shared with anyone, keep this secret!</Form.Text>\r\n      </Form.Group>\r\n\r\n      <Button variant=\"primary\" type=\"submit\" disabled={signed} block>\r\n        <b>Sign</b>\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n","import React, { useState, useRef, useContext } from \"react\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { IAction, IState, ITransaction } from \"../../typings/AppTypes\";\r\nimport { digestMessage } from \"../../utils/conversion\";\r\n\r\nimport SendUI from \"./SendUI\";\r\nimport SignUI from \"./SignUI\";\r\nimport \"./Transaction.css\";\r\n\r\nexport default function Transaction(): JSX.Element {\r\n  const { dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const [validated, setValidated] = useState<boolean>(false);\r\n  const [signed, setSigned] = useState<boolean>(false);\r\n\r\n  const formDetails = useRef<ITransaction>({\r\n    to: \"\",\r\n    from: JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey ?? \"\",\r\n    amount: undefined,\r\n    message: \"\",\r\n    signature: \"\"\r\n  });\r\n\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const form = e.currentTarget;\r\n    setValidated(true);\r\n\r\n    if (form.checkValidity() && !signed) {\r\n      // haven't signed the transaction yet\r\n      const formInputs = { ...form };\r\n      const formValues = Object.values(formInputs)\r\n        .slice(1, 4)\r\n        .map((input) => input.value);\r\n\r\n      formDetails.current.to = formValues[0];\r\n      formDetails.current.amount = formValues[1];\r\n      formDetails.current.message = formValues[2];\r\n      const message = formDetails.current.to + formDetails.current.from + formDetails.current.message + formDetails.current.amount; // prettier-ignore\r\n      formDetails.current.signature = await digestMessage(message);\r\n\r\n      setSigned(true);\r\n    } else if (form.checkValidity()) {\r\n      // signed the transaction and need to send now\r\n      dispatch({ type: ACTIONS.ADD_VERIFIED_TRANS, payload: { trans: formDetails.current } });\r\n      setSigned(false);\r\n      setValidated(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid d-flex justify-content-center mx-auto row my-4\">\r\n      <SignUI validated={validated} signed={signed} handleSubmit={handleSubmit} />\r\n      <SendUI\r\n        validated={validated}\r\n        setValidated={setValidated}\r\n        signed={signed}\r\n        setSigned={setSigned}\r\n        handleSubmit={handleSubmit}\r\n        details={formDetails.current}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState, IUser } from \"../../typings/AppTypes\";\r\nimport { copyKey } from \"../../utils/copyInput\";\r\n\r\nimport \"./User.css\";\r\n\r\nexport default function UserItems(): JSX.Element {\r\n  const { state } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n  const [copied, setCopied] = useState<boolean[]>([false]);\r\n\r\n  return (\r\n    <div className=\"container-fluid mb-2\">\r\n      <h3 className=\"font-weight-bold\"> Users</h3>\r\n      <div className=\"row flex-nowrap overflow-auto bg-dark mx-1 px-2 rounded\">\r\n        {state.users?.map((user: IUser) => {\r\n          return (\r\n            <Form className=\"user-item rounded\" key={Math.random()}>\r\n              <Form.Group>\r\n                <Form.Text className=\"font-weight-bold mb-1 my-0\">Public Key</Form.Text>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  className=\"text-truncate\"\r\n                  onFocus={(e: React.FocusEvent<HTMLInputElement>) => copyKey(e, setCopied)}\r\n                  defaultValue={user.publicKey}\r\n                  isValid={copied[0]}\r\n                />\r\n                <Form.Control.Feedback type=\"valid\">Copied to clipboard</Form.Control.Feedback>\r\n              </Form.Group>\r\n\r\n              <InputGroup className=\"mt-2\">\r\n                <Form.Control type=\"number\" defaultValue={user.balance.toFixed(2)} disabled={true} />\r\n                <InputGroup.Append>\r\n                  <InputGroup.Text>LC</InputGroup.Text>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n            </Form>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport NavMenu from \"../components/NavMenu/NavMenu\";\r\nimport KeyGeneration from \"../components/User/KeyGeneration\";\r\nimport Transaction from \"../components/Transaction/Transaction\";\r\nimport UserItems from \"../components/User/UserItems\";\r\n\r\nexport default function Wallet(): JSX.Element {\r\n  return (\r\n    <div>\r\n      <NavMenu />\r\n      <KeyGeneration />\r\n      <Transaction />\r\n      <UserItems />\r\n    </div>\r\n  );\r\n}\r\n","import { digestMessage, randomHash } from \"./conversion\";\r\n\r\nasync function createTarget(numZeros: number): Promise<string> {\r\n  const targetHash = await digestMessage(randomHash(20));\r\n\r\n  // replace leading bits with zeros\r\n  const re = new RegExp(`^.{0,${numZeros}}`, \"g\");\r\n  const zerosStr = Array(numZeros).fill(\"0\").join(\"\");\r\n\r\n  return targetHash.replace(re, zerosStr);\r\n}\r\n\r\nexport async function mine(\r\n  nonce: number,\r\n  setHeader: (arg: number) => void,\r\n  setTarget: (arg: string) => void,\r\n  setSolution: (arg: string) => void,\r\n  setIsValid: (arg: boolean) => void\r\n): Promise<string> {\r\n  // make target\r\n  const numZeros = Math.round(Math.random()) + 2;\r\n  const targetHash = await createTarget(numZeros);\r\n  setTarget(targetHash);\r\n\r\n  // mine\r\n  let candidateSolution = \"\";\r\n  let header = nonce; // re-assigning for clarity\r\n  while (header <= Number.MAX_SAFE_INTEGER) {\r\n    candidateSolution = await digestMessage(header.toString());\r\n    setSolution(candidateSolution);\r\n    setHeader(header++);\r\n\r\n    const leadingBits = candidateSolution.substr(0, numZeros).split(\"\");\r\n    if (leadingBits.every((bit) => bit === \"0\")) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  setIsValid(candidateSolution <= targetHash);\r\n  return candidateSolution;\r\n}\r\n","import React, { useState, useRef, useContext } from \"react\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IState } from \"../../typings/AppTypes\";\r\nimport { mine } from \"../../utils/mine\";\r\n\r\ninterface IStats {\r\n  chain: boolean;\r\n  isValid: boolean;\r\n  solution: string;\r\n  setIsValid: (arg: boolean) => void;\r\n  setSolution: (arg: string) => void;\r\n  propagateBlockStatus?: (\r\n    prevHash: string,\r\n    skipFirstUpdate: boolean,\r\n    newRoot?: string,\r\n    timestamp?: number\r\n  ) => Promise<void>;\r\n}\r\n\r\nexport default function Statistics(props: IStats): JSX.Element {\r\n  const { state } = useContext(AppContext) as { state: IState };\r\n\r\n  const nonce = useRef<number>();\r\n  const [header, setHeader] = useState<number>();\r\n  const [target, setTarget] = useState<string>();\r\n\r\n  async function handleMine() {\r\n    nonce.current = Math.round(Math.random() * 1e6);\r\n    const hash = await mine(nonce.current, setHeader, setTarget, props.setSolution, props.setIsValid);\r\n    if (props.propagateBlockStatus) {\r\n      await props.propagateBlockStatus(hash, true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={props.chain ? \"bordered-background\" : \"col-11 col-lg-5 mx-3\"}>\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Nonce</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control type=\"number\" defaultValue={props.solution ? nonce.current : \"\"} disabled={true} />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Header</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control type=\"number\" defaultValue={header} disabled={true} />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text className=\"font-weight-bold\">Target</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control type=\"text\" defaultValue={target} disabled={true} />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Sol&apos;n</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          type=\"text\"\r\n          style={props.isValid ? { color: \"green\" } : { color: \"red\" }}\r\n          defaultValue={props.solution}\r\n          disabled={true}\r\n        />\r\n      </InputGroup>\r\n\r\n      <Button\r\n        variant=\"primary\"\r\n        className=\"btn-block d-block mt-3\"\r\n        disabled={props.isValid || (!props.chain && state.selectedTrans.length === 0)}\r\n        onClick={() => handleMine()}\r\n      >\r\n        <h4 className=\"m-0\">Mine</h4>\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","import { ITransaction } from \"../../typings/AppTypes\";\r\n\r\n// modified from https://github.com/foqc/bfs-canvas-tree\r\ninterface ICoordinate {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nclass Node {\r\n  value: string;\r\n  children: Node[];\r\n  parent: Node | null;\r\n  pos: ICoordinate;\r\n\r\n  constructor(value: string) {\r\n    this.value = value;\r\n    this.children = [];\r\n    this.parent = null;\r\n    this.pos = { x: 0, y: 0 };\r\n  }\r\n\r\n  get left(): Node {\r\n    return this.children[0];\r\n  }\r\n\r\n  set left(node: Node) {\r\n    node.parent = this;\r\n    this.children[0] = node;\r\n  }\r\n\r\n  get right(): Node {\r\n    return this.children[1];\r\n  }\r\n\r\n  set right(node: Node) {\r\n    node.parent = this;\r\n    this.children[1] = node;\r\n  }\r\n\r\n  get position(): ICoordinate {\r\n    return this.pos;\r\n  }\r\n\r\n  set position(position: ICoordinate) {\r\n    this.pos = position;\r\n  }\r\n}\r\n\r\nexport class Tree {\r\n  #root: Node | null;\r\n  #transactionSignatures: string[];\r\n  #startPosition: ICoordinate;\r\n  #dim: { width: number; height: number };\r\n  #ctx: CanvasRenderingContext2D | null;\r\n\r\n  constructor(canvas: HTMLCanvasElement, transactions: ITransaction[]) {\r\n    const xStart = window.innerWidth < 1200 ? window.innerWidth * 1.8 : (window.innerWidth / 2) * 0.8;\r\n    this.#root = null;\r\n    this.#transactionSignatures = transactions.map((transaction) => transaction.signature.slice(0, 25) + \"...\");\r\n    this.#startPosition = { x: xStart, y: 5 };\r\n    this.#ctx = canvas.getContext(\"2d\");\r\n    this.#dim = { width: canvas.width, height: canvas.height };\r\n  }\r\n\r\n  calculatePosition({ x, y }: ICoordinate, isLeft = false): ICoordinate {\r\n    const offset = 50;\r\n    return { x: isLeft ? x - offset * 6 : x + offset * 6, y: y + offset };\r\n  }\r\n\r\n  clear(): void {\r\n    if (this.#ctx) {\r\n      this.#ctx.clearRect(0, 0, this.#dim.width, this.#dim.height);\r\n    }\r\n  }\r\n\r\n  addNode(value: string): void {\r\n    const newNode = new Node(value !== \"\" ? value.slice(0, 25) + \"...\" : \"\");\r\n    if (!this.#root) {\r\n      newNode.position = this.#startPosition;\r\n      this.#root = newNode;\r\n    } else {\r\n      // start at root, if no node on left add and break, likewise for right\r\n      // only move in direction that does not have both children\r\n      let node = this.#root;\r\n      while (node) {\r\n        if (!node.left) {\r\n          newNode.position = this.calculatePosition(node.position, true);\r\n          node.left = newNode;\r\n          break;\r\n        }\r\n\r\n        if (!node.right) {\r\n          newNode.position = this.calculatePosition(node.position);\r\n          node.right = newNode;\r\n          break;\r\n        }\r\n\r\n        node = !node.left.left || !node.left.right ? node.left : node.right;\r\n      }\r\n    }\r\n  }\r\n\r\n  drawTree(): void {\r\n    const queue = [] as Node[];\r\n    queue.push(this.#root as Node);\r\n\r\n    // level order traversal\r\n    while (queue.length !== 0) {\r\n      const node = queue.shift();\r\n      const rectWidth = node && node.value.length * 9;\r\n\r\n      if (this.#ctx && rectWidth && node) {\r\n        // draw the root node\r\n        const { x, y } = node.position;\r\n        this.#ctx.beginPath();\r\n\r\n        this.#ctx.font = \"1rem Arial\";\r\n        this.#ctx.strokeStyle = \"#000\";\r\n\r\n        const leafOrBodyColor = this.#transactionSignatures.includes(node.value) ? \"#ddf\" : \"#ff0a\";\r\n        this.#ctx.fillStyle = node.value === this.#root?.value ? \"#dfd\" : leafOrBodyColor;\r\n\r\n        this.#ctx.fillRect(x - rectWidth / 2, y + 5, rectWidth, 30);\r\n        this.#ctx.fillStyle = \"#000\";\r\n        this.#ctx.fillText(node.value, x + 10 - rectWidth / 2, y + 27);\r\n\r\n        // draw it's children\r\n        node.children.forEach((child, i) => {\r\n          child.position.x = i === 1 ? child.position.x - 150 : child.position.x + 150; // avoid overlap\r\n          queue.push(child);\r\n          if (this.#ctx) {\r\n            this.#ctx.beginPath();\r\n            this.#ctx.moveTo(x + 0.5, y + 35);\r\n            this.#ctx.lineTo(child.position.x + 0.5, child.position.y + 5);\r\n            this.#ctx.stroke();\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Tree } from \"../components/Block/Tree\";\r\nimport { ITransaction } from \"../typings/AppTypes\";\r\nimport { digestMessage } from \"./conversion\";\r\n\r\nexport async function calculateMerkleTreeFormation(\r\n  verifiedTrans: ITransaction[],\r\n  selectedTrans: ITransaction[],\r\n  setMerkleTree?: (arg: string[][]) => void\r\n): Promise<string> {\r\n  let tree = [[\"\"]];\r\n  if (selectedTrans.length > 0) {\r\n    // need to make sure node's in tree appear in same order as in the verified transaction pane, regardless of selection order\r\n    const verifiedSignatures = verifiedTrans.map((trans) => trans.signature);\r\n    const selectedSignatures = selectedTrans.map((trans) => trans.signature);\r\n    let signatures = verifiedSignatures.filter((sig) => selectedSignatures.includes(sig));\r\n    tree = [signatures];\r\n\r\n    while (signatures.length !== 1) {\r\n      const hashArr = [] as string[];\r\n      for (let i = 0; i < signatures.length; i += 2) {\r\n        const hash = signatures[i + 1] ? await digestMessage(signatures[i] + signatures[i + 1]) : signatures[i];\r\n        hashArr.push(hash);\r\n      }\r\n\r\n      signatures = hashArr;\r\n      tree.push(hashArr);\r\n    }\r\n  }\r\n\r\n  if (setMerkleTree) {\r\n    setMerkleTree(tree);\r\n  }\r\n\r\n  return getMerkleRoot(tree);\r\n}\r\n\r\nexport function getMerkleRoot(tree: string[][]): string {\r\n  return tree[tree.length - 1][0];\r\n}\r\n\r\nexport function flattenTree(tree: string[][]): string[] {\r\n  let flatTree = [] as string[];\r\n  // need to reverse each tree row so that printing produces the right order!\r\n  for (let i = 0; i < tree.length; i++) {\r\n    flatTree = flatTree.concat(tree[i].reverse());\r\n  }\r\n\r\n  return flatTree;\r\n}\r\n\r\nexport function drawTreeDiagramOnCanvas(\r\n  merkleTree: string[][],\r\n  canvas: HTMLCanvasElement | null,\r\n  transactions: ITransaction[]\r\n): void {\r\n  if (canvas) {\r\n    const canvasTree = new Tree(canvas, transactions);\r\n    canvasTree.clear();\r\n    const flatTree = flattenTree(merkleTree);\r\n    for (let i = flatTree.length - 1; i >= 0; i--) {\r\n      canvasTree.addNode(flatTree[i]);\r\n    }\r\n    canvasTree.drawTree();\r\n  }\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { IBlock, ITransaction } from \"../../typings/AppTypes\";\r\nimport { digestMessage } from \"../../utils/conversion\";\r\nimport { calculateMerkleTreeFormation } from \"../../utils/merkleTree\";\r\n\r\nimport \"./Block.css\";\r\n\r\ntype TChange = \"from\" | \"to\" | \"message\" | \"amount\";\r\ninterface IBlockTrans {\r\n  block: IBlock;\r\n  setMerkleRoot: (arg: string) => void;\r\n}\r\n\r\nexport default function BlockTrans({ block, setMerkleRoot }: IBlockTrans): JSX.Element {\r\n  const [trans, setTrans] = useState<ITransaction[]>(block.transactions);\r\n\r\n  async function calculateNewMerkleRoot(\r\n    e: React.ChangeEvent<HTMLInputElement>,\r\n    index: number,\r\n    type: TChange\r\n  ): Promise<void> {\r\n    const newVal = e.target.value;\r\n    const newTrans = JSON.parse(JSON.stringify(trans)); // deep copy\r\n\r\n    // update the changed value\r\n    newTrans[index] = { ...newTrans[index], [type]: newVal };\r\n\r\n    // new signature\r\n    newTrans[index].signature = await digestMessage(newTrans[index].to + newTrans[index].from + newTrans[index].amount + newTrans[index].message); // prettier-ignore\r\n    setTrans(newTrans);\r\n\r\n    const root = await calculateMerkleTreeFormation(newTrans, newTrans);\r\n    setMerkleRoot(root);\r\n\r\n    // TODO: persist changes, and propagate details to blocks in Block.tsx\r\n  }\r\n\r\n  return (\r\n    <div className=\"bg-dark col p-1 rounded\">\r\n      {trans.map((transaction: ITransaction, i: number) => {\r\n        return (\r\n          <div className=\"bg-light p-2 m-1 rounded\" key={Math.random()}>\r\n            <Form.Group className=\"mb-2 text-center\">\r\n              <Form.Control\r\n                type=\"text\"\r\n                value={transaction.from}\r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => calculateNewMerkleRoot(e, i, \"from\")}\r\n              />\r\n              <h3 className=\"my-0\">↓</h3>\r\n              <Form.Control\r\n                type=\"text\"\r\n                value={transaction.to}\r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => calculateNewMerkleRoot(e, i, \"to\")}\r\n              />\r\n            </Form.Group>\r\n\r\n            <InputGroup className=\"mb-2\">\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>Msg</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                value={transaction.message}\r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => calculateNewMerkleRoot(e, i, \"message\")}\r\n              />\r\n            </InputGroup>\r\n\r\n            <InputGroup className=\"mb-2\">\r\n              <Form.Control\r\n                type=\"number\"\r\n                value={transaction.amount && parseFloat(transaction.amount + \"\").toFixed(2)}\r\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => calculateNewMerkleRoot(e, i, \"amount\")}\r\n              />\r\n              <InputGroup.Append>\r\n                <InputGroup.Text>LC</InputGroup.Text>\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n\r\n            <InputGroup className=\"mb-2\">\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>Sig</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <Form.Control type=\"text\" defaultValue={transaction.signature} disabled={true} />\r\n            </InputGroup>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\n\r\nimport Statistics from \"./Statistics\";\r\nimport { IAction, IBlock, IState } from \"../../typings/AppTypes\";\r\n\r\nimport \"./Block.css\";\r\nimport { digestMessage } from \"../../utils/conversion\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport BlockTrans from \"./BlockTrans\";\r\n\r\nexport default function Block({ details }: { details: IBlock }): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const [solution, setSolution] = useState<string>(\"\");\r\n  const [timestamp, setTimestamp] = useState<number>(Date.now());\r\n  const [merkleRoot, setMerkleRoot] = useState<string>(details.merkleRoot);\r\n  const [isValid, setIsValid] = useState<boolean>(details.valid ?? true);\r\n  const [showTrans, setShowTrans] = useState<boolean>(false);\r\n\r\n  // update timestamp when solution is mined\r\n  useEffect(() => setTimestamp(Date.now()), [solution]);\r\n\r\n  async function updateBlockStatus(e: React.ChangeEvent<HTMLInputElement>): Promise<void> {\r\n    const newRoot = e.target.value;\r\n    const newHash = await digestMessage(details.index + details.prevHash + newRoot);\r\n    setIsValid(newRoot === merkleRoot);\r\n    setTimestamp(Date.now());\r\n    setSolution(newHash);\r\n    setMerkleRoot(newRoot);\r\n\r\n    // after updating the block, propagate the changes\r\n    await propagateBlockStatus(newHash, false, newRoot);\r\n  }\r\n\r\n  async function propagateBlockStatus(\r\n    prevHash: string,\r\n    skipFirstUpdate: boolean,\r\n    newRoot?: string,\r\n    timestamp = Date.now()\r\n  ): Promise<void> {\r\n    const index = details.index;\r\n\r\n    for (let i = index; i < state.chain.length; i++) {\r\n      const merkleRoot = newRoot && i === index ? newRoot : state.chain[i].merkleRoot;\r\n      const currHash = i === index ? prevHash : await digestMessage(i + prevHash + merkleRoot);\r\n\r\n      const newBlock = {\r\n        index: i,\r\n        timestamp,\r\n        prevHash: i === index ? details.prevHash : prevHash,\r\n        currHash,\r\n        transactions: state.chain[i].transactions,\r\n        merkleRoot,\r\n        valid: skipFirstUpdate ? i === index : false\r\n      };\r\n\r\n      prevHash = currHash; // next block's prevHash is this block's currHash\r\n\r\n      dispatch({ type: ACTIONS.UPDATE_BLOCK, payload: { block: newBlock } });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex-column\">\r\n      <div className={\"block my-3 mx-1 p-2 rounded \" + (isValid ? \"valid-block\" : \"invalid-block\")}>\r\n        <Form>\r\n          <InputGroup className=\"my-2\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Index</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control type=\"number\" defaultValue={details.index} disabled={true} />\r\n          </InputGroup>\r\n\r\n          <InputGroup className=\"my-2\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Timestamp</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control type=\"number\" defaultValue={solution ? timestamp : details.timestamp} disabled={true} />\r\n          </InputGroup>\r\n\r\n          <InputGroup className=\"my-2\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Previous #</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control type=\"text\" defaultValue={details.prevHash} disabled={true} />\r\n          </InputGroup>\r\n\r\n          <InputGroup className=\"my-2\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Current #</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control type=\"text\" defaultValue={solution ? solution : details.currHash} disabled={true} />\r\n          </InputGroup>\r\n\r\n          <InputGroup className=\"my-2\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Merkle #</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            {details.index === 0 ? (\r\n              <Form.Control type=\"text\" defaultValue={\"\"} disabled={true} />\r\n            ) : (\r\n              <React.Fragment>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  value={merkleRoot}\r\n                  onChange={(e: React.ChangeEvent<HTMLInputElement>) => updateBlockStatus(e)}\r\n                />\r\n                <InputGroup.Append>\r\n                  <InputGroup.Text className=\"show-trans-eye\" onClick={() => setShowTrans(!showTrans)}>\r\n                    {showTrans ? \"🙈\" : \"🙉\"}\r\n                  </InputGroup.Text>\r\n                </InputGroup.Append>\r\n              </React.Fragment>\r\n            )}\r\n          </InputGroup>\r\n        </Form>\r\n\r\n        <Statistics\r\n          chain={true}\r\n          solution={solution}\r\n          setSolution={setSolution}\r\n          isValid={isValid}\r\n          setIsValid={setIsValid}\r\n          propagateBlockStatus={propagateBlockStatus}\r\n        />\r\n      </div>\r\n\r\n      {showTrans && <BlockTrans block={details} setMerkleRoot={setMerkleRoot} />}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\n\r\nimport Block from \"./Block\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState } from \"../../typings/AppTypes\";\r\n\r\nimport \"./Block.css\";\r\n\r\nexport default function BlockChain(): JSX.Element {\r\n  const { state } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  return (\r\n    <div className=\"mx-3 row flex-nowrap overflow-auto\">\r\n      {state.chain.map((block) => (\r\n        <Block details={block} key={Math.random()} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport NavMenu from \"../components/NavMenu/NavMenu\";\r\nimport BlockChain from \"../components/Block/BlockChain\";\r\n\r\nexport default function Chain(): JSX.Element {\r\n  return (\r\n    <div>\r\n      <NavMenu />\r\n      <BlockChain />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useRef, useState, useEffect, useContext } from \"react\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\n\r\nimport Statistics from \"./Statistics\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState } from \"../../typings/AppTypes\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { calculateMerkleTreeFormation, drawTreeDiagramOnCanvas, getMerkleRoot } from \"../../utils/merkleTree\";\r\n\r\nimport \"./Block.css\";\r\n\r\nexport default function PreviewBlock(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const treeCanvas = useRef<HTMLCanvasElement | null>(null);\r\n\r\n  const [solution, setSolution] = useState<string>(\"\");\r\n  const [isValid, setIsValid] = useState<boolean>(false);\r\n  const [timestamp, setTimestamp] = useState<number>(Date.now());\r\n  const [merkleTree, setMerkleTree] = useState<string[][]>([[\"\"]]);\r\n  const [index, setIndex] = useState<number>(state.chain[state.chain.length - 1].index + 1);\r\n  const [prevHash, setPrevHash] = useState<string>(state.chain[state.chain.length - 1].currHash);\r\n\r\n  useEffect(() => {\r\n    calculateMerkleTreeFormation(state.verifiedTrans, state.selectedTrans, setMerkleTree);\r\n    setIsValid(false);\r\n  }, [state.selectedTrans]);\r\n\r\n  // draw tree in canvas\r\n  useEffect(() => {\r\n    drawTreeDiagramOnCanvas(merkleTree, treeCanvas.current, state.selectedTrans);\r\n  }, [merkleTree]);\r\n\r\n  // update timestamp & currentHash when solution is mined\r\n  useEffect(() => setTimestamp(Date.now()), [solution]);\r\n\r\n  function handleAddBlock() {\r\n    const block = {\r\n      index,\r\n      prevHash,\r\n      currHash: solution,\r\n      transactions: state.selectedTrans,\r\n      timestamp,\r\n      merkleRoot: getMerkleRoot(merkleTree),\r\n      valid: state.chain[index - 1].valid, // validity depends on previous block\r\n    };\r\n\r\n    // add the block, update verified transactions, clear selected transactions\r\n    dispatch({ type: ACTIONS.ADD_BLOCK, payload: { block } });\r\n    dispatch({ type: ACTIONS.UPDATE_VERIFIED_TRANS });\r\n    dispatch({ type: ACTIONS.UPDATE_SELECTED_TRANS, payload: { selectedTrans: [] } });\r\n\r\n    // update preview details\r\n    setIsValid(false);\r\n    setIndex(index + 1);\r\n    setPrevHash(solution);\r\n    setSolution(\"\");\r\n    setTimestamp(Date.now());\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-fluid row d-flex justify-content-center mx-auto my-3\">\r\n      <div className=\"overflow-auto mb-2\">\r\n        <h4 className=\"font-weight-bold text-center\">Merkle Tree Visualization</h4>\r\n        <canvas ref={treeCanvas} className=\"border border-dark rounded\" width={1500} />\r\n      </div>\r\n\r\n      <Statistics\r\n        chain={false}\r\n        solution={solution}\r\n        setSolution={setSolution}\r\n        isValid={isValid}\r\n        setIsValid={setIsValid}\r\n      />\r\n\r\n      <Form className={\"col-10 col-lg-5 my-4 my-lg-0 pb-2 rounded \" + (isValid ? \"valid-block\" : \"invalid-block\")}>\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Index</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control type=\"number\" value={index} disabled />\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Timestamp</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control type=\"number\" value={timestamp} disabled />\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Previous #</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control type=\"text\" value={prevHash} disabled />\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Current #</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control type=\"text\" value={solution} disabled />\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Merkle #</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control type=\"text\" value={getMerkleRoot(merkleTree)} disabled />\r\n        </InputGroup>\r\n\r\n        {isValid && (\r\n          <Button variant=\"success\" block onClick={() => handleAddBlock()}>\r\n            <h3 className=\"my-0 font-weight-bold\">+</h3>\r\n          </Button>\r\n        )}\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { IAction, IState, ITransaction } from \"../../typings/AppTypes\";\r\n\r\nimport \"./Transaction.css\";\r\n\r\nexport default function TransactionLineUI(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  function selectTransaction(transaction: ITransaction): void {\r\n    let selectedTrans = (JSON.parse(localStorage.getItem(\"selectedTransactions\") as string) as ITransaction[]) || [];\r\n    const signatures = selectedTrans.map((x) => x.signature);\r\n    const included = signatures.includes(transaction.signature);\r\n\r\n    if (selectedTrans.length < 4 || included) {\r\n      // if just selected - push onto stack, else remove it\r\n      // adjust backgrounds according to selection/deselection\r\n      if (!included) {\r\n        selectedTrans.push(transaction);\r\n      } else {\r\n        selectedTrans = selectedTrans.filter((x) => x.signature !== transaction.signature);\r\n      }\r\n\r\n      dispatch({ type: ACTIONS.UPDATE_SELECTED_TRANS, payload: { selectedTrans } });\r\n    } else {\r\n      alert(\"You can mine at most 4 transactions at a time!\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <h3 className=\"font-weight-bold\">Verified Transactions</h3>\r\n      <div className=\"trans-list row flex-nowrap overflow-auto bg-dark mx-1 px-2 rounded\">\r\n        {state.verifiedTrans.map((transaction: ITransaction) => {\r\n          return (\r\n            <div\r\n              className={\r\n                \"trans-item \" +\r\n                (state.selectedTrans.map((x) => x.signature).includes(transaction.signature) ? \"selected\" : \"not-selected\") // prettier-ignore\r\n              }\r\n              onClick={() => selectTransaction(transaction)}\r\n              key={Math.random()}\r\n            >\r\n              <Form.Group className=\"mb-2 text-center\">\r\n                <Form.Control type=\"text\" defaultValue={transaction.from} disabled={true} />\r\n                <h3 className=\"my-0\">↓</h3>\r\n                <Form.Control type=\"text\" defaultValue={transaction.to} disabled={true} />\r\n              </Form.Group>\r\n\r\n              <InputGroup className=\"mb-2\">\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>Msg</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <Form.Control as=\"textarea\" defaultValue={transaction.message} disabled={true} />\r\n              </InputGroup>\r\n\r\n              <InputGroup className=\"mb-2\">\r\n                <Form.Control type=\"number\" defaultValue={transaction.amount} disabled={true} />\r\n                <InputGroup.Append>\r\n                  <InputGroup.Text>LC</InputGroup.Text>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n\r\n              <InputGroup className=\"mb-2\">\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>Sig</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <Form.Control type=\"text\" defaultValue={transaction.signature} disabled={true} />\r\n              </InputGroup>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport NavMenu from \"../components/NavMenu/NavMenu\";\r\nimport PreviewBlock from \"../components/Block/PreviewBlock\";\r\nimport TransactionItems from \"../components/Transaction/TransactionItems\";\r\n\r\nexport default function Mine(): JSX.Element {\r\n  return (\r\n    <div>\r\n      <NavMenu />\r\n      <TransactionItems />\r\n      <PreviewBlock />\r\n    </div>\r\n  );\r\n}\r\n","import { ACTIONS } from \"../enums/AppDispatchActions\";\r\nimport { IAction, IState, IUser, ITransaction, IBlock } from \"../typings/AppTypes\";\r\n\r\nexport const AppReducer = (state: IState, action: IAction): IState => {\r\n  switch (action.type) {\r\n    case ACTIONS.ADD_VERIFIED_TRANS: {\r\n      const newTrans = (action.payload as { trans: ITransaction }).trans;\r\n      const prevTrans = JSON.parse(localStorage.getItem(\"transactions\") as string) ?? [];\r\n      const verifiedTrans = [...prevTrans, newTrans];\r\n      localStorage.setItem(\"transactions\", JSON.stringify(verifiedTrans));\r\n      return { ...state, verifiedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_VERIFIED_TRANS: {\r\n      const selectedTransSignatures = state.selectedTrans.map((x) => x.signature);\r\n      const verifiedTrans = state.verifiedTrans.filter((x) => !selectedTransSignatures.includes(x.signature));\r\n      localStorage.setItem(\"transactions\", JSON.stringify(verifiedTrans));\r\n      return { ...state, verifiedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_SELECTED_TRANS: {\r\n      const selectedTrans = (action.payload as { selectedTrans: ITransaction[] }).selectedTrans;\r\n      localStorage.setItem(\"selectedTransactions\", JSON.stringify(selectedTrans));\r\n      return { ...state, selectedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_USERS: {\r\n      const users = (action.payload as { users: IUser[] }).users;\r\n      localStorage.setItem(\"users\", JSON.stringify(users));\r\n      return { ...state, users };\r\n    }\r\n\r\n    case ACTIONS.ADD_BLOCK: {\r\n      const { block } = action.payload as { block: IBlock };\r\n      const chain = [...state.chain, block];\r\n      localStorage.setItem(\"chain\", JSON.stringify(chain));\r\n      return { ...state, chain };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_BLOCK: {\r\n      const { block } = action.payload as { block: IBlock };\r\n      const chain = JSON.parse(localStorage.getItem(\"chain\") as string);\r\n      chain[block.index] = block;\r\n      localStorage.setItem(\"chain\", JSON.stringify(chain));\r\n      return { ...state, chain };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { useMemo, useReducer } from \"react\";\r\nimport { Route, BrowserRouter as Router, Redirect } from \"react-router-dom\";\r\n\r\nimport Wallet from \"../../pages/Wallet\";\r\nimport Chain from \"../../pages/Chain\";\r\nimport Mine from \"../../pages/Mine\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport { AppReducer } from \"../../reducers/AppReducer\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\n\r\nexport default function App(): JSX.Element {\r\n  const [state, dispatch] = useReducer(AppReducer, {\r\n    verifiedTrans: JSON.parse(localStorage.getItem(\"transactions\") as string) ?? [],\r\n    selectedTrans: JSON.parse(localStorage.getItem(\"selectedTransactions\") as string) ?? [],\r\n    users: JSON.parse(localStorage.getItem(\"users\") as string) ?? [],\r\n    chain: JSON.parse(localStorage.getItem(\"chain\") as string) ?? [\r\n      {\r\n        index: 0,\r\n        prevHash: \"\",\r\n        currHash: new Array(256).fill(\"0\").join(\"\"),\r\n        transactions: [],\r\n        timestamp: Date.parse(\"04/31/2021\"),\r\n      },\r\n    ],\r\n  });\r\n\r\n  // prevent re-rendering children when App re-renders\r\n  const value = useMemo(() => ({ state, dispatch }), [state, dispatch]);\r\n\r\n  return (\r\n    <Router basename={\"/LibraCoin\"}>\r\n      <AppContext.Provider value={value}>\r\n        <Route exact path=\"/\">\r\n          <Redirect to=\"/wallet\" />\r\n        </Route>\r\n        <Route path=\"/wallet\" component={Wallet} />\r\n        <Route path=\"/mine\" component={Mine} />\r\n        <Route path=\"/blockchain\" component={Chain} />\r\n      </AppContext.Provider>\r\n    </Router>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App/App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}