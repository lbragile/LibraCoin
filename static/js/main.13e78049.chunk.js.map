{"version":3,"sources":["components/Navbar/NavbarUI.tsx","components/Block/block_class.ts","components/Transaction/transaction_class.ts","components/Chain/chain_class.ts","components/Wallet/Wallet_class.ts","enums/AppDispatchActions.ts","context/AppContext.ts","utils/copyInput.ts","components/Wallet/KeyGeneration.tsx","components/Transaction/SendUI.tsx","components/Transaction/SignUI.tsx","components/Transaction/TransactionUI.tsx","components/User/UserItems.tsx","pages/Wallet.tsx","components/Block/StatisticsUI.tsx","components/Block/BlockUI.tsx","components/Chain/ChainUI.tsx","components/Transaction/TransactionItems.tsx","pages/Mine.tsx","reducers/AppReducer.ts","components/App/App.tsx","index.tsx"],"names":["NavbarUI","Navbar","bg","expand","className","Brand","href","src","alt","width","Toggle","aria-controls","Collapse","id","Nav","Link","active","location","includes","Block","index","prevHash","currHash","transactions","timestamp","Date","now","this","Transaction","amount","from","to","message","Chain","chain","genericCryptoKey","type","extractable","algorithm","name","usages","genesisTransaction","genesisCurrHash","Array","fill","join","length","user","push","len","bufferToHex","window","crypto","getRandomValues","Uint32Array","a","msgUint8","TextEncoder","encode","subtle","digest","hashBuffer","numZeros","instance","digestMessage","randomHash","targetHash","re","RegExp","zerosStr","replace","nonce","leadingZeros","setNonce","setSolution","candidateSolution","Number","MAX_SAFE_INTEGER","toString","substr","split","every","bit","blockchain","i","failureIndex","slice","validStates","localStorage","setItem","JSON","stringify","transaction","signature","data","stringToArrayBuffer","verify","hash","isValid","console","log","addBlock","newHash","newBlock","lastBlock","blockChain","str","buf","ArrayBuffer","bufView","Uint16Array","strLen","charCodeAt","Uint8Array","map","b","padStart","parse","getItem","ACTIONS","Wallet","publicKey","privateKey","balance","generateKey","namedCurve","keyPair","sign","verifyTransaction","alert","format","key","exportKey","AppContext","React","createContext","undefined","copyKey","e","setCopied","target","select","setSelectionRange","document","execCommand","isPublic","value","KeyGeneration","useContext","state","dispatch","useRef","numRows","useState","copied","addUser","initialize","CryptoKeyToHex","publicKeyStr","privateKeyStr","current","innerText","newUsers","users","UPDATE_USERS","payload","Button","variant","onClick","Form","Group","Label","Control","as","rows","defaultValue","onFocus","ref","Feedback","SendUI","props","Modal","show","validated","centered","backdrop","onHide","setShow","setSigned","setValidated","animation","Header","closeButton","Body","noValidate","onSubmit","handleSubmit","controlId","details","disabled","InputGroup","Prepend","Text","block","SignUI","pattern","required","placeholder","onBlur","userBalance","Math","min","max","toFixed","checkAmount","TransactionUI","signed","formDetails","preventDefault","form","currentTarget","checkValidity","formInputs","formValues","Object","values","input","prevTrans","UserItems","random","WalletUI","StatisticsUI","origNonce","mineBtn","setTarget","setShowBtn","setIsValid","solutionHash","round","createTarget","mine","UPDATE_VERIFIED_TRANS","updateBlocksInChain","style","color","solution","selectedTrans","handleMine","BlockUI","startValid","setBlockchain","showBtn","setTimestamp","og_hash","useEffect","Fragment","onChange","handleTransactionInfoChange","ChainUI","startStates","setStartStates","result","TransactionLineUI","verifiedTrans","x","filter","UPDATE_SELECTED_TRANS","selectTransaction","Mine","AppReducer","action","selectedTransSignatures","App","useReducer","basename","Provider","exact","path","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"2VAKe,SAASA,IACtB,OACE,eAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,OAAO,KAAKC,UAAU,OAAxC,UACE,cAACH,EAAA,EAAOI,MAAR,CAAcC,KAAK,wCAAnB,SACE,qBAAKC,IAAI,kCAAkCC,IAAI,iBAAiBC,MAAM,SAExE,cAACR,EAAA,EAAOS,OAAR,CAAeC,gBAAc,qBAC7B,cAACV,EAAA,EAAOW,SAAR,CAAiBC,GAAG,mBAApB,SACE,eAACC,EAAA,EAAD,CAAKV,UAAU,UAAf,UACE,cAACU,EAAA,EAAIC,KAAL,CAAUT,KAAK,oBAAoBU,OAAQC,SAASX,KAAKY,SAAS,WAAlE,oBAGA,cAACJ,EAAA,EAAIC,KAAL,CAAUT,KAAK,kBAAkBU,OAAQC,SAASX,KAAKY,SAAS,SAAhE,kBAGA,cAACJ,EAAA,EAAIC,KAAL,CAAUT,KAAK,wBAAwBU,OAAQC,SAASX,KAAKY,SAAS,eAAtE,gC,oFClBGC,EAOX,WAAYC,EAAeC,EAAkBC,EAAkBC,GAA8B,yBAN7FH,WAM4F,OAL5FC,cAK4F,OAJ5FC,cAI4F,OAH5FC,kBAG4F,OAF5FC,UAAYC,KAAKC,MAGfC,KAAKP,MAAQA,EACbO,KAAKN,SAAWA,EAChBM,KAAKL,SAAWA,EAChBK,KAAKJ,aAAeA,GCbXK,EAMX,WAAYC,EAAgBC,EAAiBC,EAAeC,GAAmB,yBAL/EH,YAK8E,OAJ9EC,UAI8E,OAH9EC,QAG8E,OAF9EC,aAE8E,EAC5EL,KAAKE,OAASA,EACdF,KAAKG,KAAOA,EACZH,KAAKI,GAAKA,EACVJ,KAAKK,QAAUA,G,iHCNNC,EAAb,WAuBE,WAAYC,GAA6B,sLApB1B,IAoByB,yDACtC,IAAMC,EAAmB,CACvBC,KAAM,SACNC,aAAa,EACbC,UAAW,CAAEC,KAAM,SACnBC,OAAQ,CAAC,WAGLC,EAAqB,CAAC,IAAIb,EAAY,EAAGO,EAAkBA,IAC3DO,EAAkBC,MAAM,IAAIC,KAAK,KAAKC,KAAK,IACjD,YAAAlB,KAAA,aAAcO,QAAd,IAAcA,IAAS,CAAC,IAAIf,EAAM,EAAG,GAAIuB,EAAiBD,IAC1D,YAAAd,KAAA,MAA6B,GAC7B,YAAAA,KAAA,MAAc,GAnClB,4CAsCE,WACE,OAAO,YAAAA,KAAP,QAvCJ,qBA0CE,WACE,OAAO,YAAAA,KAAA,MAAY,YAAAA,KAAA,MAAYmB,OAAS,KA3C5C,qBA8CE,SAAQC,GACN,YAAApB,KAAA,MAAYqB,KAAKD,KA/CrB,wBAkDE,SAAWE,GACT,OAAOhB,EAAMiB,YAAYC,OAAOC,OAAOC,gBAAgB,IAAIC,YAAYL,OAnD3E,kEAsDE,WAAoBjB,GAApB,iBAAAuB,EAAA,6DACQC,GAAW,IAAIC,aAAcC,OAAO1B,GAD5C,SAE2BmB,OAAOC,OAAOO,OAAOC,OAAO,UAAWJ,GAFlE,cAEQK,EAFR,yBAGS5B,EAAMiB,YAAYW,IAH3B,2CAtDF,wHA4DE,WAAmBC,GAAnB,mBAAAP,EAAA,sEAC2BtB,EAAM8B,SAASC,cAAc/B,EAAM8B,SAASE,WAAW,KADlF,cACQC,EADR,OAIQC,EAAK,IAAIC,OAAJ,eAAmBN,EAAnB,KAAgC,KACrCO,EAAW1B,MAAMmB,GAAUlB,KAAK,KAAKC,KAAK,IALlD,kBAOSqB,EAAWI,QAAQH,EAAIE,IAPhC,2CA5DF,gHAsEE,WACEE,EACAC,EACAC,EACAC,GAJF,eAAAnB,EAAA,sDAMMoB,EAAoB,GAN1B,YAOSJ,GAASK,OAAOC,kBAPzB,iCAQ8BlD,KAAKqC,cAAcO,EAAMO,YARvD,UAQIH,EARJ,OASID,EAAYC,IAEQA,EAAkBI,OAAO,EAAGP,GAAcQ,MAAM,IACpDC,OAAM,SAACC,GAAD,MAAiB,MAARA,KAZnC,mDAgBIT,EAASF,KAhBb,gDAmBSI,GAnBT,iDAtEF,qIA4FE,WAA0BQ,GAA1B,qBAAA5B,EAAA,sDAGW6B,EADLC,EAAe,EAFrB,YAG6BD,EAAID,EAAWrC,QAH5C,mBAImD,OAA3CqC,EAAWC,EAAI,GAAG9D,SAASgE,MAAM,EAAG,GAJ5C,uBAKMD,EAAeD,EAAI,EALzB,2BAGoDA,IAHpD,sBAUQG,EAAc,GACXH,EAAI,EAXf,aAWkBA,EAAID,EAAWrC,QAXjC,sBAYQsC,EAAIC,GAZZ,wBAcMF,EAAWC,GAAG/D,SAAW8D,EAAWC,EAAI,GAAG9D,SAdjD,UAeqCW,EAAM8B,SAASC,cAAcmB,EAAWC,GAAG/D,UAfhF,QAeM8D,EAAWC,GAAG9D,SAfpB,OAkBMkE,aAAaC,QAAQ,QAASC,KAAKC,UAAUR,IAlBnD,QAsBII,EAAYvC,KAAKoC,EAAIC,GAtBzB,QAWyCD,IAXzC,iDAyBS,CAAEG,cAAaJ,eAzBxB,4CA5FF,6HAwHE,WAAwBS,EAA0BC,GAAlD,iBAAAtC,EAAA,6DACQuC,EAAO7D,EAAM8D,oBAAoBL,KAAKC,UAAUC,IADxD,SAEwBxC,OAAOO,OAAOqC,OAAO,CAAEzD,KAAM,QAAS0D,KAAM,WAAaL,EAAY9D,KAAM+D,EAAWC,GAF9G,cAEQI,EAFR,UAKI,YAAAvE,KAAA,MAA2BqB,KAAK4C,GAChCO,QAAQC,IAAI,gCACZD,QAAQC,IAAR,mCAAwC,YAAAzE,KAAA,MAA2BmB,OAAnE,4BAGE,YAAAnB,KAAA,MAA2BmB,SAA3B,YAAsCnB,KAAtC,QACFA,KAAK0E,SAAS,GAAd,YAAkB1E,KAAlB,OACA,YAAAA,KAAA,MAA6B,IAZjC,kBAeSuE,GAfT,gDAxHF,+EA0IE,SAASI,EAAiB/E,GACxB,IAAMgF,EAAW,IAAIpF,EAAMQ,KAAK6E,UAAUpF,MAAQ,EAAGO,KAAK6E,UAAUlF,SAAUgF,EAAS/E,GACvF,YAAAI,KAAA,MAAYqB,KAAKuD,GACjBf,aAAaC,QAAQ,QAASC,KAAKC,UAAUhE,KAAK8E,gBA7ItD,kCAQE,SAA2BC,GAGzB,IAFA,IAAMC,EAAM,IAAIC,YAAyB,EAAbF,EAAI5D,QAC1B+D,EAAU,IAAIC,YAAYH,GACvBvB,EAAI,EAAG2B,EAASL,EAAI5D,OAAQsC,EAAI2B,EAAQ3B,IAC/CyB,EAAQzB,GAAKsB,EAAIM,WAAW5B,GAE9B,OAAOuB,IAdX,yBAiBE,SAAmB9C,GAGjB,OAFkBlB,MAAMb,KAAK,IAAImF,WAAWpD,IAClBqD,KAAI,SAACC,GAAD,OAAOA,EAAErC,SAAS,IAAIsC,SAAS,EAAG,QAAMvE,KAAK,QAnB/E,KAAaZ,EAMJ8B,SAAW,IAAI9B,EAAMyD,KAAK2B,MAAM7B,aAAa8B,QAAQ,WCPvD,ICHKC,EDGCC,EAAb,WAKE,aAAe,yBAJfC,eAIc,OAHdC,gBAGc,OAFdC,aAEc,EACZhG,KAAK8F,UAAY,CAAErF,KAAM,SAAUC,aAAa,EAAMC,UAAW,CAAEC,KAAM,SAAWC,OAAQ,CAAC,WAC7Fb,KAAK+F,WAAa,CAAEtF,KAAM,UAAWC,aAAa,EAAMC,UAAW,CAAEC,KAAM,SAAWC,OAAQ,CAAC,SAC/Fb,KAAKgG,QAAU,IARnB,qFAWE,4BAAApE,EAAA,sEACwBJ,OAAOC,OAAOO,OAAOiE,YAAY,CAAErF,KAAM,QAASsF,WAAY,UAAW,EAAM,CAAC,OAAQ,WADhH,OACQC,EADR,OAEEnG,KAAK8F,UAAYK,EAAQL,UACzB9F,KAAK+F,WAAaI,EAAQJ,WAH5B,gDAXF,sFAsBE,SAAmB1F,GACjB,OAAO,IAAIyB,aAAcC,OAAO1B,KAvBpC,8DA0BE,WAAgBH,EAAgBE,EAAeC,GAA/C,mBAAAuB,EAAA,2DACM1B,GAAUF,KAAKgG,SADrB,wBAEU/B,EAAc,IAAIhE,EAAYC,EAAQF,KAAK8F,UAAW1F,EAAIC,GAC1D8D,EAAO7D,EAAM8D,oBAAoBL,KAAKC,UAAUC,IAH1D,SAI4BzC,OAAOC,OAAOO,OAAOoE,KAAK,CAAExF,KAAM,QAAS0D,KAAM,WAAatE,KAAK+F,WAAY5B,GAJ3G,cAIUD,EAJV,gBAM0B5D,EAAM8B,SAASiE,kBAAkBpC,EAAaC,GANxE,cASMlE,KAAKgG,SAAW9F,EAEhBoG,MAAM,wBAXZ,wBAcIA,MAAM,8DAdV,iDA1BF,gIAiBE,WAA4BC,EAAgBC,GAA5C,uFACqBhF,OAAOC,OAAOO,OAAOyE,UAAUF,EAAQC,GAD5D,cACQxB,EADR,yBAES1E,EAAMiB,YAAYyD,IAF3B,2CAjBF,gEEEa0B,EAAaC,IAAMC,mBAA2BC,GCLpD,SAASC,EACdC,EACAC,EACAvG,GAOA,GALAsG,EAAEE,OAAOC,SACTH,EAAEE,OAAOE,kBAAkB,EAAG,KAC9BC,SAASC,YAAY,QAGjB5G,EAAM,CACR,IAAM6G,EAAoB,WAAT7G,EACjBuG,EAAU,CAACM,GAAWA,IAAaP,EAAEE,OAAOM,MAAMhI,SAAS,iBAE3DyH,EAAU,EAAC,K,SFdHpB,K,8CAAAA,E,8CAAAA,E,6BAAAA,M,WGWG,SAAS4B,IAA8B,IAAD,MACvBC,qBAAWf,GAA/BgB,EAD2C,EAC3CA,MAAOC,EADoC,EACpCA,SAET7B,EAAY8B,iBAA4B,MACxC7B,EAAa6B,iBAA4B,MAEzCC,EAAUD,iBAAO,GAN4B,EAQvBE,mBAAoB,EAAC,GAAO,IARL,mBAQ5CC,EAR4C,KAQpCf,EARoC,KAU7CgB,EAAO,uCAAG,kCAAApG,EAAA,6DACRR,EAAO,IAAIyE,EADH,SAERzE,EAAK6G,aAFG,uBAIapC,EAAOqC,eAAe,OAAQ9G,EAAK0E,WAJhD,cAIRqC,EAJQ,gBAKctC,EAAOqC,eAAe,QAAS9G,EAAK2E,YALlD,OAKRqC,EALQ,OAMVtC,EAAUuC,SAAWtC,EAAWsC,UAClCvC,EAAUuC,QAAQC,UAAYH,EAC9BpC,EAAWsC,QAAQC,UAAY,IAAItH,MAAMoH,EAAcjH,QAAQF,KAAK,UAAKC,KAAK,KAG1EqH,EAXQ,sBAWOb,EAAMc,OAXb,CAWoB,CAAE1C,UAAWqC,EAAcnC,QAAS5E,EAAK4E,WAC3EnC,aAAaC,QAAQ,OAAQC,KAAKC,UAAU,CAAE8B,UAAWqC,EAAcpC,WAAYqC,EAAepC,QAAS5E,EAAK4E,WAChHnC,aAAaC,QAAQ,QAASC,KAAKC,UAAUuE,IAC7CZ,EAAS,CAAElH,KAAMmF,EAAQ6C,aAAcC,QAAS,CAAEF,MAAOD,KAd3C,4CAAH,qDA2Bb,OACE,sBAAK9J,UAAU,MAAf,WACG,UAACsF,KAAK2B,MAAM7B,aAAa8B,QAAQ,gBAAjC,aAAC,EAAoDG,WAOpD,qBAAKrH,UAAU,UANf,qBAAKA,UAAU,QAAf,SACE,cAACkK,EAAA,EAAD,CAAQC,QAAQ,UAAUnK,UAAU,uBAAuBoK,QAASb,EAApE,6BAOJ,qBAAKvJ,UAAU,QAAf,SACE,eAACqK,EAAA,EAAKC,MAAN,CAAYtK,UAAU,WAAtB,UACE,cAACqK,EAAA,EAAKE,MAAN,CAAYvK,UAAU,OAAtB,SACE,+CAEF,cAACqK,EAAA,EAAKG,QAAN,CACEC,GAAG,WACHC,KAAMtB,EAAQQ,QACde,aAAcvF,aAAa8B,QAAQ,SAAW5B,KAAK2B,MAAM7B,aAAa8B,QAAQ,SAAmBG,UACjGvB,QAASwD,EAAO,GAChBsB,QAAS,SAACtC,GAAD,OAA8CD,EAAQC,EAAGC,EAAW,WAC7EsC,IAAKxD,IAEP,cAACgD,EAAA,EAAKG,QAAQM,SAAd,CAAuB9I,KAAK,QAA5B,uCAGJ,qBAAKhC,UAAU,QAAf,SACE,eAACqK,EAAA,EAAKC,MAAN,CAAYtK,UAAU,WAAtB,UACE,cAACqK,EAAA,EAAKE,MAAN,CAAYvK,UAAU,OAAtB,SACE,8CACe,KACZ,UAAAsF,KAAK2B,MAAM7B,aAAa8B,QAAQ,gBAAhC,eAAoDG,YACnD,sBAAM5G,GAAG,sBAAsB2J,QA3CpB,WACnB9C,EAAWsC,UACTtC,EAAWsC,QAAQd,MAAMhI,SAAS,UACpCwG,EAAWsC,QAAQd,MAAQxD,KAAK2B,MAAM7B,aAAa8B,QAAQ,SAAmBI,WAE9EA,EAAWsC,QAAQd,MAAQ,IAAIvG,MAAM+E,EAAWsC,QAAQd,MAAMpG,QAAQF,KAAK,UAAKC,KAAK,MAsC7E,+BAMN,cAAC4H,EAAA,EAAKG,QAAN,CACEC,GAAG,WACHC,KAAMtB,EAAQQ,QACde,aACEvF,aAAa8B,QAAQ,QACjB,IAAI3E,MAAM+C,KAAK2B,MAAM7B,aAAa8B,QAAQ,SAAmBI,WAAW5E,QAAQF,KAAK,UAAKC,KAAK,IAC/F,GAENmI,QAAS,SAACtC,GAAD,OAA8CD,EAAQC,EAAGC,EAAW,YAC7EzC,QAASwD,EAAO,GAChBuB,IAAKvD,IAEP,cAAC+C,EAAA,EAAKG,QAAQM,SAAd,CAAuB9I,KAAK,QAA5B,0C,4BCvFK,SAAS+I,EAAOC,GAC7B,OACE,8BACE,eAACC,EAAA,EAAD,CACEC,KAAMF,EAAME,KACZC,UAAWH,EAAMG,UAAUzG,WAC3B0G,UAAQ,EACRC,SAAS,SACTC,OAAQ,WACNN,EAAMO,SAAQ,GACdP,EAAMQ,WAAU,GAChBR,EAAMS,cAAa,IAErBC,WAAW,EAVb,UAYE,cAACT,EAAA,EAAMU,OAAP,CAAcC,aAAW,EAAzB,SACE,gEAEF,cAACX,EAAA,EAAMY,KAAP,UACE,eAACxB,EAAA,EAAD,CAAMyB,YAAU,EAACC,SAAUf,EAAMgB,aAAjC,UACE,eAAC3B,EAAA,EAAKC,MAAN,CAAY2B,UAAU,SAAtB,UACE,cAAC5B,EAAA,EAAKE,MAAN,UACE,sCAEF,cAACF,EAAA,EAAKG,QAAN,CAAcxI,KAAK,OAAO2I,aAAcK,EAAMkB,QAAQvK,GAAIwK,UAAU,OAGtE,eAAC9B,EAAA,EAAKC,MAAN,CAAY2B,UAAU,aAAtB,UACE,cAAC5B,EAAA,EAAKE,MAAN,UACE,0CAEF,eAAC6B,EAAA,EAAD,CAAYpM,UAAU,OAAtB,UACE,cAACqK,EAAA,EAAKG,QAAN,CAAcxI,KAAK,OAAO2I,aAAcK,EAAMkB,QAAQzK,OAAQ0K,UAAU,IACxE,cAACC,EAAA,EAAWC,QAAZ,UACE,cAACD,EAAA,EAAWE,KAAZ,yBAKN,eAACjC,EAAA,EAAKC,MAAN,CAAY2B,UAAU,eAAtB,UACE,cAAC5B,EAAA,EAAKE,MAAN,UACE,2CAEF,cAACF,EAAA,EAAKG,QAAN,CAAcC,GAAG,WAAWE,aAAcK,EAAMkB,QAAQtK,QAAS8I,KAAM,EAAGyB,UAAU,OAGtF,eAAC9B,EAAA,EAAKC,MAAN,CAAY2B,UAAU,gBAAtB,UACE,cAAC5B,EAAA,EAAKE,MAAN,UACE,6CAEF,cAACF,EAAA,EAAKG,QAAN,CAAcxI,KAAK,OAAO2I,aAAcK,EAAMkB,QAAQzG,UAAW0G,UAAU,IAC3E,cAAC9B,EAAA,EAAKiC,KAAN,CAAWtM,UAAU,aAArB,qFAKF,cAACkK,EAAA,EAAD,CAAQC,QAAQ,UAAUnI,KAAK,SAASuK,OAAK,EAA7C,SACE,iDC1DC,SAASC,EAAOxB,GAA4B,IAAD,IAQxD,OACE,8BACE,eAACC,EAAA,EAAD,CAAOC,KAAMF,EAAME,KAAME,UAAQ,EAACC,SAAS,SAASC,OAAQ,kBAAMN,EAAMO,SAAQ,IAAQG,WAAW,EAAnG,UACE,cAACT,EAAA,EAAMU,OAAP,CAAcC,aAAW,EAAzB,SACE,gEAEF,cAACX,EAAA,EAAMY,KAAP,UACE,eAACxB,EAAA,EAAD,CAAMyB,YAAU,EAACX,UAAWH,EAAMG,UAAWY,SAAUf,EAAMgB,aAA7D,UACE,eAAC3B,EAAA,EAAKC,MAAN,CAAY2B,UAAU,YAAtB,UACE,cAAC5B,EAAA,EAAKE,MAAN,UACE,wCAEF,cAACF,EAAA,EAAKG,QAAN,CACExI,KAAK,OACL2I,cAAc,UAAArF,KAAK2B,MAAM7B,aAAa8B,QAAQ,gBAAhC,eAAoDG,YAAa,KAEjF,cAACgD,EAAA,EAAKiC,KAAN,CAAWtM,UAAU,aAArB,oGAKF,eAACqK,EAAA,EAAKC,MAAN,CAAY2B,UAAU,UAAtB,UACE,cAAC5B,EAAA,EAAKE,MAAN,UACE,sCAEF,cAACF,EAAA,EAAKG,QAAN,CAAcxI,KAAK,OAAOyK,QAAQ,uBAAuBC,UAAQ,IACjE,cAACrC,EAAA,EAAKG,QAAQM,SAAd,CAAuB9I,KAAK,UAA5B,8DAKF,eAACqI,EAAA,EAAKC,MAAN,CAAY2B,UAAU,cAAtB,UACE,cAAC5B,EAAA,EAAKE,MAAN,UACE,0CAEF,eAAC6B,EAAA,EAAD,CAAYpM,UAAU,OAAtB,UACE,cAACqK,EAAA,EAAKG,QAAN,CACExI,KAAK,OACL2K,YAAY,OACZC,OAAQ,SAACtE,GAAD,OA9CxB,SAAqBA,GAA+C,IAAD,EAC3DuE,GAAc,UAAAvH,KAAK2B,MAAM7B,aAAa8B,QAAQ,gBAAhC,eAAoDK,UAAW,IACnFe,EAAEE,OAAOM,MAAQgE,KAAKC,IAAID,KAAKE,IAAI,IAAM1E,EAAEE,OAAOM,OAAQ+D,GACvDI,QAAQ,GACRvI,WA0C+DwI,CAAY5E,IAChEoE,UAAQ,IAEV,cAACN,EAAA,EAAWC,QAAZ,UACE,cAACD,EAAA,EAAWE,KAAZ,yBAKN,eAACjC,EAAA,EAAKC,MAAN,CAAY2B,UAAU,eAAtB,UACE,cAAC5B,EAAA,EAAKE,MAAN,UACE,2CAEF,cAACF,EAAA,EAAKG,QAAN,CAAcC,GAAG,WAAWkC,YAAY,sBAAsBjC,KAAM,OAGtE,eAACL,EAAA,EAAKC,MAAN,CAAY2B,UAAU,eAAtB,UACE,cAAC5B,EAAA,EAAKE,MAAN,UACE,+CAEF,cAACF,EAAA,EAAKG,QAAN,CACExI,KAAK,OACL2I,cAAc,UAAArF,KAAK2B,MAAM7B,aAAa8B,QAAQ,gBAAhC,eAAoDI,aAAc,GAChFoF,UAAQ,IAEV,cAACrC,EAAA,EAAKiC,KAAN,CAAWtM,UAAU,aAArB,kEAGF,cAACkK,EAAA,EAAD,CAAQC,QAAQ,UAAUnI,KAAK,SAASuK,OAAK,EAA7C,SACE,iDChFC,SAASY,IAA8B,IAAD,MAC3B9D,oBAAkB,GADS,mBAC5C6B,EAD4C,KACtCK,EADsC,OAEjBlC,oBAAkB,GAFD,mBAE5C8B,EAF4C,KAEjCM,EAFiC,OAGvBpC,oBAAkB,GAHK,mBAG5C+D,EAH4C,KAGpC5B,EAHoC,KAK7C6B,EAAclE,iBAAqB,CACvCxH,GAAI,GACJD,KAAI,oBAAE4D,KAAK2B,MAAM7B,aAAa8B,QAAQ,gBAAlC,aAAE,EAAoDG,iBAAtD,QAAmE,GACvE5F,OAAQ,EACRG,QAAS,GACT6D,UAAW,KAGPuG,EAAY,uCAAG,WAAO1D,GAAP,qBAAAnF,EAAA,yDACnBmF,EAAEgF,iBACIC,EAAOjF,EAAEkF,cACf/B,GAAa,IAET8B,EAAKE,iBAAoBL,EALV,wBAOXM,EAPW,eAOOH,GAClBI,EAAaC,OAAOC,OAAOH,GAC9BxI,MAAM,EAAG,GACT4B,KAAI,SAACgH,GAAD,OAAWA,EAAMhF,SAExBuE,EAAYzD,QAAQjI,GAAKgM,EAAW,GACpCN,EAAYzD,QAAQnI,QAAUkM,EAAW,GACzCN,EAAYzD,QAAQhI,QAAU+L,EAAW,GAdxB,UAeqB9L,EAAM8B,SAASC,cAAc0B,KAAKC,UAAU8H,EAAYzD,UAf7E,QAejByD,EAAYzD,QAAQnE,UAfH,OAiBjB+F,GAAU,GAjBO,wBAkBR+B,EAAKE,kBAERM,EAAYzI,KAAK2B,MAAM7B,aAAa8B,QAAQ,kBAA8B,GAChF9B,aAAaC,QAAQ,eAAgBC,KAAKC,UAAL,sBAAmBwI,GAAnB,CAA8BV,EAAYzD,YAC/E2B,GAAQ,GACRC,GAAU,GACVC,GAAa,IAxBI,4CAAH,sDA4BlB,OACE,gCACE,wBAAQzL,UAAU,yCAAyCoK,QAAS,kBAAMmB,GAAQ,IAAlF,8BAGE6B,EAGA,cAACrC,EAAD,CACEG,KAAMA,EACNK,QAASA,EACTJ,UAAWA,EACXM,aAAcA,EACdD,UAAWA,EACXQ,aAAcA,EACdE,QAASmB,EAAYzD,UATvB,cAAC4C,EAAD,CAAQtB,KAAMA,EAAMK,QAASA,EAASJ,UAAWA,EAAWa,aAAcA,O,MC9CnE,SAASgC,IAA0B,IAAD,EACvC/E,EAAUD,qBAAWf,GAArBgB,MADuC,EAEnBI,mBAAoB,EAAC,IAFF,mBAExCC,EAFwC,KAEhCf,EAFgC,KAI/C,OACE,8BACE,gCACE,6BACE,yCAEF,qBAAK9H,GAAG,kBAAR,mBACGwI,EAAMc,aADT,aACG,EAAajD,KAAI,SAACnE,GACjB,OACE,eAAC0H,EAAA,EAAD,CAAMrK,UAAU,OAAhB,UACE,eAACqK,EAAA,EAAKC,MAAN,WACE,cAACD,EAAA,EAAKE,MAAN,UACE,oBAAIvK,UAAWsJ,EAAS,OAAS,OAAjC,2BAEF,cAACe,EAAA,EAAKG,QAAN,CACExI,KAAK,OACLhC,UAAU,gBACV4K,QAAS,SAACtC,GAAD,OAA2CD,EAAQC,EAAGC,IAC/DoC,aAAchI,EAAK0E,UACnBvB,QAASwD,EAAO,KAElB,cAACe,EAAA,EAAKG,QAAQM,SAAd,CAAuB9I,KAAK,QAA5B,oCAGF,eAACqI,EAAA,EAAKC,MAAN,WACE,cAACD,EAAA,EAAKE,MAAN,UACE,oBAAIvK,UAAU,OAAd,wBAEF,8BAAI2C,EAAK4E,QAAQ0F,QAAQ,GAAzB,cAnBwBH,KAAKmB,oBCdhC,SAASC,IACtB,OACE,sBAAKlO,UAAU,uBAAf,UACE,cAACJ,EAAD,IACA,cAACmJ,EAAD,IACA,cAACoE,EAAD,IACA,cAACa,EAAD,OCIS,SAASG,EAAanD,GAA6B,IAAD,EACnChC,qBAAWf,GAA/BgB,EADuD,EACvDA,MAAOC,EADgD,EAChDA,SAETkF,EAAYjF,mBACZkF,EAAUlF,iBAA0B,MAJqB,EAKrCE,qBALqC,mBAKxDlF,EALwD,KAKjDE,EALiD,OAMnCgF,qBANmC,mBAMxDb,EANwD,KAMhD8F,EANgD,iDAQ/D,gCAAAnL,EAAA,6DACE6H,EAAMuD,YAAW,GACjBvD,EAAMwD,YAAW,GAEbC,EAAe,GAGnBL,EAAUxE,QAAUkD,KAAK4B,MAAsB,IAAhB5B,KAAKmB,UAC9BvK,EAAWoJ,KAAK4B,MAAM5B,KAAKmB,UAAY,EAR/C,SAS2BpM,EAAM8B,SAASgL,aAAajL,GATvD,UASQI,EATR,OAUEwK,EAAUxK,IAGNuK,EAAQzE,QAbd,wBAcIyE,EAAQzE,QAAQuC,UAAW,EAd/B,UAeyBtK,EAAM8B,SAASiL,KAAKR,EAAUxE,QAASlG,EAAUW,EAAU2G,EAAM1G,aAf1F,QAeImK,EAfJ,OAgBIJ,EAAQzE,QAAQuC,UAAW,EAhB/B,QAmBMsC,GAAgB3K,IACdkH,EAAMhK,QACRa,EAAM8B,SAAS0C,WAAW2E,EAAMhK,OAAOE,SAAWuN,EAClDrJ,aAAaC,QAAQ,QAASC,KAAKC,UAAU1D,EAAM8B,SAAS0C,cAG9D6C,EAAS,CAAElH,KAAMmF,EAAQ0H,wBAEzBhN,EAAM8B,SAASmL,oBAAoBjN,EAAM8B,SAAS0C,YAClD2E,EAAMwD,YAAW,IA5BrB,6CAR+D,sBAwC/D,OACE,sBAAKxO,UAAWgL,EAAMlJ,MAAQ,sBAAwB,aAAtD,UACE,eAACuI,EAAA,EAAKC,MAAN,WACE,cAACD,EAAA,EAAKE,MAAN,UACE,oBAAIvK,UAAU,OAAd,sBAEF,cAACqK,EAAA,EAAKG,QAAN,CAAcxI,KAAK,SAAS2I,aAAcyD,EAAUxE,QAASuC,UAAU,OAGzE,eAAC9B,EAAA,EAAKC,MAAN,WACE,cAACD,EAAA,EAAKE,MAAN,UACE,oBAAIvK,UAAU,OAAd,uCAEF,cAACqK,EAAA,EAAKG,QAAN,CAAcxI,KAAK,SAAS2I,aAAcxG,EAAOgI,UAAU,OAG7D,eAAC9B,EAAA,EAAKC,MAAN,WACE,cAACD,EAAA,EAAKE,MAAN,UACE,oBAAIvK,UAAU,OAAd,uBAEF,cAACqK,EAAA,EAAKG,QAAN,CAAcxI,KAAK,OAAO2I,aAAcnC,EAAQ2D,UAAU,OAG5D,eAAC9B,EAAA,EAAKC,MAAN,WACE,cAACD,EAAA,EAAKE,MAAN,UACE,oBAAIvK,UAAU,OAAd,yBAEF,cAACqK,EAAA,EAAKG,QAAN,CACExI,KAAK,OACL+M,MAAO/D,EAAMlF,QAAU,CAAEkJ,MAAO,SAAY,CAAEA,MAAO,OACrDrE,aAAcK,EAAMiE,SACpB9C,UAAU,OAId,cAACjC,EAAA,EAAD,CACEC,QAAQ,UACRnK,UAAU,yBACVmM,SAAUnB,EAAMlF,SAA0C,IAA/BmD,EAAMiG,cAAcxM,OAC/C0H,QAAS,kBA/EgD,0CA+E1C+E,IACftE,IAAKwD,EALP,SAOE,oBAAIrO,UAAU,MAAd,uB,MC1FO,SAASoP,EAAT,GAQE,IAPflD,EAOc,EAPdA,QACAmD,EAMc,EANdA,WACAC,EAKc,EALdA,cAKc,EACkBjG,mBAAiB,IADnC,mBACP4F,EADO,KACG3K,EADH,OAEgB+E,mBAAkBgG,GAFlC,mBAEPvJ,EAFO,KAEE0I,EAFF,OAGgBnF,oBAAkB,GAHlC,mBAGPkG,EAHO,KAGEhB,EAHF,OAIoBlF,mBAAiB6C,EAAUA,EAAQ9K,UAAYS,EAAM8B,SAASyC,UAAUhF,WAJ5F,mBAIPA,EAJO,KAIIoO,EAJJ,iDAed,WAA2ClH,GAA3C,iBAAAnF,EAAA,0DACM+I,EADN,wBAEUuD,EAAU5N,EAAM8B,SAAS0C,WAAW6F,EAAQlL,OAAOE,SAF7D,SAIuBW,EAAM8B,SAASC,cAChC/B,EAAM8B,SAAS0C,WAAW6F,EAAQlL,OAAOC,SAAWqH,EAAEE,OAAOM,OALnE,OAIUjD,EAJV,OAOIhE,EAAM8B,SAAS0C,WAAW6F,EAAQlL,OAAOE,SAAW2E,EAMpDT,aAAaC,QAAQ,QAASC,KAAKC,UAAU1D,EAAM8B,SAAS0C,aAG5D/B,EAAYuB,GACZ2I,EAAW3I,IAAS4J,GAAgC,OAArB5J,EAAKX,MAAM,EAAG,IAC7CoK,GAAiBA,EAAczN,EAAM8B,SAAS0C,YAlBlD,6CAfc,sBAqCd,OA/BAqJ,qBAAU,WACRF,EAAanO,KAAKC,SACjB,CAAC2N,IA8BF,eAAC,IAAMU,SAAP,YACIzD,GACA,cAACiC,EAAD,CACErM,OAAO,EACPyM,WAAYA,EACZU,SAAUA,EACV3K,YAAaA,EACbwB,QAASA,EACT0I,WAAYA,IAIhB,sBAAKxO,UAAW,UAAYkM,EAAU,UAAY,KAAOpG,EAAU,cAAgB,iBAAnF,UACE,eAACuE,EAAA,EAAKC,MAAN,WACE,cAACD,EAAA,EAAKE,MAAN,UACE,0CAEF,cAACF,EAAA,EAAKG,QAAN,CACExI,KAAK,SACL2I,aAAeuB,EAA+CA,EAAQlL,MAA7Ca,EAAM8B,SAASyC,UAAUpF,MAAQ,EAC1DmL,UAAU,OAGd,eAAC9B,EAAA,EAAKC,MAAN,WACE,cAACD,EAAA,EAAKE,MAAN,UACE,8CAEF,cAACF,EAAA,EAAKG,QAAN,CAAcxI,KAAK,SAAS8G,OAAQoD,GAAW+C,EAAW7N,EAAY8K,EAAQ9K,UAAW+K,UAAU,OAErG,eAAC9B,EAAA,EAAKC,MAAN,WACE,cAACD,EAAA,EAAKE,MAAN,UACE,kDAEF,cAACF,EAAA,EAAKG,QAAN,CACExI,KAAK,OACL2I,aAAeuB,EAA8CA,EAAQjL,SAA5CY,EAAM8B,SAASyC,UAAUlF,SAClDiL,UAAU,OAGd,eAAC9B,EAAA,EAAKC,MAAN,WACE,cAACD,EAAA,EAAKE,MAAN,UACE,iDAEF,cAACF,EAAA,EAAKG,QAAN,CAAcxI,KAAK,OAAO8G,OAAQoD,GAAW+C,EAAWA,EAAW/C,EAAQhL,SAAUiL,UAAU,OAEjG,eAAC9B,EAAA,EAAKC,MAAN,WACE,cAACD,EAAA,EAAKE,MAAN,UACE,gDAEF,cAACF,EAAA,EAAKG,QAAN,CACExI,KAAK,OACL8G,MAA0B,KAAZ,OAAPoD,QAAO,IAAPA,OAAA,EAAAA,EAASlL,OAAc,GAAK,MACnCmL,SAAUD,GAA6B,IAAlBA,EAAQlL,MAC7B4O,SAAU,SAACtH,GAAD,OA3FN,2CA2FkDuH,CAA4BvH,UAIpF4D,GAAWpG,GAAWyJ,GACtB,cAACrF,EAAA,EAAD,CAAQC,QAAQ,UAAUoC,OAAK,EAACnC,QAAS,kBArF/CvI,EAAM8B,SAASsC,SAASgJ,EAAU,SAClCV,GAAW,IAoFL,SACE,oBAAIvO,UAAU,wBAAd,iBAIHkM,GACC,cAACiC,EAAD,CACErM,OAAO,EACPd,MAAOkL,EAAQlL,MACfuN,WAAYA,EACZU,SAAUA,EACV3K,YAAaA,EACbwB,QAASA,EACT0I,WAAYA,U,MCtHT,SAASsB,IAAwB,IAAD,EACTzG,mBAAkBxH,EAAM8B,SAAS0C,YADxB,mBACtCtB,EADsC,KAC1BuK,EAD0B,OAEPjG,mBAAoB,IAAI9G,MAAMwC,EAAWrC,QAAQF,MAAK,IAF/C,mBAEtCuN,EAFsC,KAEzBC,EAFyB,KAY7C,OARAN,qBAAU,WACR,sBAAC,4BAAAvM,EAAA,sEACsBtB,EAAM8B,SAASmL,oBAAoB/J,GADzD,OACOkL,EADP,OAECD,EAAeC,EAAO9K,aACtBmK,EAAcW,EAAOlL,YAHtB,0CAAD,KAKC,CAACA,IAGF,gCACE,cAACnF,EAAD,IACA,qBAAKa,GAAG,aAAR,SACGsE,EAAW+B,KAAI,SAACyF,EAAOvH,GACtB,OACE,sBAAKhF,UAAU,kBAAf,UACE,cAACoP,EAAD,CAASlD,QAASK,EAAO8C,WAAYU,EAAY/K,GAAIsK,cAAeA,IACpE,qBAAKtP,UAAU,QAAf,4BAFoC8M,KAAKmB,kB,MCjBxC,SAASiC,IAAkC,IAAD,EAC3BlH,qBAAWf,GAA/BgB,EAD+C,EAC/CA,MAAOC,EADwC,EACxCA,SADwC,EAE3BG,mBAAoB,EAAC,IAFM,mBAEhDC,EAFgD,KAExCf,EAFwC,KAoBvD,OACE,gCACE,6BACE,yDAEF,qBAAK9H,GAAG,kBAAR,SACGwI,EAAMkH,cAAcrJ,KAAI,SAACtB,GACxB,OACE,sBACExF,UACE,eACCiJ,EAAMiG,cAAcpI,KAAI,SAACsJ,GAAD,OAAOA,EAAE3K,aAAW3E,SAAS0E,EAAYC,WAAa,WAAa,gBAE9F2E,QAAS,kBA7BrB,SAA2B5E,GACzB,IAAI0J,EAAiB5J,KAAK2B,MAAM7B,aAAa8B,QAAQ,0BAAyD,GAC3FgI,EAAcpI,KAAI,SAACsJ,GAAD,OAAOA,EAAE3K,aAI9B3E,SAAS0E,EAAYC,WAGnCyJ,EAAgBA,EAAcmB,QAAO,SAACD,GAAD,OAAOA,EAAE3K,YAAcD,EAAYC,aAFxEyJ,EAActM,KAAK4C,GAKrB0D,EAAS,CAAElH,KAAMmF,EAAQmJ,sBAAuBrG,QAAS,CAAEiF,mBAC3D9J,aAAaC,QAAQ,uBAAwBC,KAAKC,UAAU2J,IAgBnCqB,CAAkB/K,IALnC,UAQE,eAAC6E,EAAA,EAAKC,MAAN,CAAYtK,UAAU,mBAAtB,UACE,cAACqK,EAAA,EAAKG,QAAN,CAAcxI,KAAK,OAAOhC,UAAU,gBAAgB2K,aAAcnF,EAAY9D,OAC9E,oBAAI1B,UAAU,OAAd,oBACA,cAACqK,EAAA,EAAKG,QAAN,CAAcxI,KAAK,OAAOhC,UAAU,gBAAgB2K,aAAcnF,EAAY7D,QAGhF,eAAC0I,EAAA,EAAKC,MAAN,CAAYtK,UAAU,OAAtB,UACE,cAACqK,EAAA,EAAKE,MAAN,UACE,oBAAIvK,UAAU,OAAd,wBAEF,cAACqK,EAAA,EAAKG,QAAN,CAAcC,GAAG,WAAWzK,UAAU,gBAAgB2K,aAAcnF,EAAY5D,aAGlF,eAACyI,EAAA,EAAKC,MAAN,CAAYtK,UAAU,OAAtB,UACE,cAACqK,EAAA,EAAKE,MAAN,UACE,oBAAIvK,UAAU,OAAd,uBAEF,cAACqK,EAAA,EAAKG,QAAN,CAAcxI,KAAK,SAAShC,UAAU,gBAAgB2K,aAAcnF,EAAY/D,YAGlF,eAAC4I,EAAA,EAAKC,MAAN,CAAYtK,UAAU,OAAtB,UACE,cAACqK,EAAA,EAAKE,MAAN,UACE,oBAAIvK,UAAU,OAAd,0BAEF,cAACqK,EAAA,EAAKG,QAAN,CACExI,KAAK,OACLhC,UAAU,gBACV2K,aAAcnF,EAAYC,UAC1BmF,QAAS,SAACtC,GAAD,OAA2CD,EAAQC,EAAGC,IAC/DzC,QAASwD,EAAO,KAElB,cAACe,EAAA,EAAKG,QAAQM,SAAd,CAAuB9I,KAAK,QAA5B,sCAjCG8K,KAAKmB,kBCrCT,SAASuC,IACtB,OACE,sBAAKxQ,UAAU,kBAAf,UACE,cAACJ,EAAD,IAEA,qBAAKa,GAAG,uBAAR,SACE,cAAC,EAAD,MAGF,qBAAKT,UAAU,4EAAf,SACE,cAACoP,EAAD,CAASC,YAAY,S,gBCbhBoB,EAAa,SAACxH,EAAeyH,GACxC,OAAQA,EAAO1O,MACb,KAAKmF,EAAQ0H,sBACX,IAAM8B,EAA0B1H,EAAMiG,cAAcpI,KAAI,SAACsJ,GAAD,OAAOA,EAAE3K,aAC3D0K,EAAgBlH,EAAMkH,cAAcE,QAAO,SAACD,GAAD,OAAQO,EAAwB7P,SAASsP,EAAE3K,cAC5F,OAAO,2BAAKwD,GAAZ,IAAmBkH,kBAGrB,KAAKhJ,EAAQmJ,sBACX,OAAO,2BAAKrH,GAAZ,IAAmBiG,cAAgBwB,EAAOzG,QAA8CiF,gBAG1F,KAAK/H,EAAQ6C,aACX,OAAO,2BAAKf,GAAZ,IAAmBc,MAAQ2G,EAAOzG,QAA+BF,QAGnE,QACE,OAAOd,ICRE,SAAS2H,IAAoB,IAAD,QACfC,qBAAWJ,EAAY,CAC/CN,cAAa,UAAE7K,KAAK2B,MAAM7B,aAAa8B,QAAQ,wBAAlC,QAAgE,GAC7EgI,cAAa,UAAE5J,KAAK2B,MAAM7B,aAAa8B,QAAQ,gCAAlC,QAAwE,GACrF6C,MAAK,UAAEzE,KAAK2B,MAAM7B,aAAa8B,QAAQ,iBAAlC,QAAyD,KAJvB,mBAClC+B,EADkC,KAC3BC,EAD2B,KAOzC,OACE,cAAC,IAAD,CAAQ4H,SAAU,aAAlB,SACE,eAAC7I,EAAW8I,SAAZ,CAAqBjI,MAAO,CAAEG,QAAOC,YAArC,UACE,cAAC,IAAD,CAAO8H,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,IAAD,CAAUtP,GAAG,cAEf,cAAC,IAAD,CAAOsP,KAAK,UAAUC,UAAW9J,IACjC,cAAC,IAAD,CAAO6J,KAAK,QAAQC,UAAWV,IAC/B,cAAC,IAAD,CAAOS,KAAK,cAAcC,UAAWpB,SCvB7CqB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1I,SAAS2I,eAAe,W","file":"static/js/main.13e78049.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\n\r\nimport \"./Navbar.css\";\r\n\r\nexport default function NavbarUI(): JSX.Element {\r\n  return (\r\n    <Navbar bg=\"none\" expand=\"lg\" className=\"mb-3\">\r\n      <Navbar.Brand href=\"https://github.com/lbragile/LibraCoin\">\r\n        <img src=\"./assets/libracoin-logo-256.png\" alt=\"LibraCoin Logo\" width=\"64\" />\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n          <Nav.Link href=\"/LibraCoin/wallet\" active={location.href.includes(\"/wallet\")}>\r\n            Wallet\r\n          </Nav.Link>\r\n          <Nav.Link href=\"/LibraCoin/mine\" active={location.href.includes(\"/mine\")}>\r\n            Mine\r\n          </Nav.Link>\r\n          <Nav.Link href=\"/LibraCoin/blockchain\" active={location.href.includes(\"/blockchain\")}>\r\n            Blockchain\r\n          </Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\n","import { Transaction } from \"../Transaction/transaction_class\";\r\n\r\nexport class Block {\r\n  index: number;\r\n  prevHash: string;\r\n  currHash: string;\r\n  transactions: Transaction[];\r\n  timestamp = Date.now();\r\n\r\n  constructor(index: number, prevHash: string, currHash: string, transactions: Transaction[]) {\r\n    this.index = index;\r\n    this.prevHash = prevHash;\r\n    this.currHash = currHash;\r\n    this.transactions = transactions;\r\n  }\r\n}\r\n","export class Transaction {\r\n  amount: number;\r\n  from: CryptoKey;\r\n  to: CryptoKey;\r\n  message?: string;\r\n\r\n  constructor(amount: number, from: CryptoKey, to: CryptoKey, message?: string) {\r\n    this.amount = amount;\r\n    this.from = from;\r\n    this.to = to;\r\n    this.message = message;\r\n  }\r\n}\r\n","import { Block } from \"../Block/block_class\";\r\nimport { Transaction } from \"../Transaction/transaction_class\";\r\nimport { Wallet } from \"../Wallet/Wallet_class\";\r\n\r\nexport class Chain {\r\n  #chain: Block[];\r\n  #verifiedTransactions: Transaction[];\r\n  #BLOCK_LIMIT = 2;\r\n  #users: Wallet[];\r\n\r\n  static instance = new Chain(JSON.parse(localStorage.getItem(\"chain\") as string));\r\n\r\n  static stringToArrayBuffer(str: string): ArrayBuffer {\r\n    const buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\r\n    const bufView = new Uint16Array(buf);\r\n    for (let i = 0, strLen = str.length; i < strLen; i++) {\r\n      bufView[i] = str.charCodeAt(i);\r\n    }\r\n    return buf;\r\n  }\r\n\r\n  static bufferToHex(hashBuffer: ArrayBuffer): string {\r\n    const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\r\n    const hashHex = hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\"); // convert bytes to hex string\r\n    return hashHex;\r\n  }\r\n\r\n  constructor(chain: Block[] | undefined) {\r\n    const genericCryptoKey = {\r\n      type: \"public\",\r\n      extractable: true,\r\n      algorithm: { name: \"ECDSA\" },\r\n      usages: [\"verify\"],\r\n    } as CryptoKey;\r\n\r\n    const genesisTransaction = [new Transaction(0, genericCryptoKey, genericCryptoKey)];\r\n    const genesisCurrHash = Array(64).fill(\"0\").join(\"\");\r\n    this.#chain = chain ?? [new Block(0, \"\", genesisCurrHash, genesisTransaction)];\r\n    this.#verifiedTransactions = [];\r\n    this.#users = [];\r\n  }\r\n\r\n  get blockChain(): Block[] {\r\n    return this.#chain;\r\n  }\r\n\r\n  get lastBlock(): Block {\r\n    return this.#chain[this.#chain.length - 1];\r\n  }\r\n\r\n  addUser(user: Wallet): void {\r\n    this.#users.push(user);\r\n  }\r\n\r\n  randomHash(len: number): string {\r\n    return Chain.bufferToHex(window.crypto.getRandomValues(new Uint32Array(len)));\r\n  }\r\n\r\n  async digestMessage(message: string): Promise<string> {\r\n    const msgUint8 = new TextEncoder().encode(message); // encode as (utf-8) Uint8Array\r\n    const hashBuffer = await window.crypto.subtle.digest(\"SHA-256\", msgUint8); // hash the message\r\n    return Chain.bufferToHex(hashBuffer);\r\n  }\r\n\r\n  async createTarget(numZeros: number): Promise<string> {\r\n    const targetHash = await Chain.instance.digestMessage(Chain.instance.randomHash(20));\r\n\r\n    // replace leading bits with zeros\r\n    const re = new RegExp(`^.{0,${numZeros}}`, \"g\");\r\n    const zerosStr = Array(numZeros).fill(\"0\").join(\"\");\r\n\r\n    return targetHash.replace(re, zerosStr);\r\n  }\r\n\r\n  async mine(\r\n    nonce: number,\r\n    leadingZeros: number,\r\n    setNonce: (arg: number) => void,\r\n    setSolution: (arg: string) => void\r\n  ): Promise<string> {\r\n    let candidateSolution = \"\";\r\n    while (nonce <= Number.MAX_SAFE_INTEGER) {\r\n      candidateSolution = await this.digestMessage(nonce.toString());\r\n      setSolution(candidateSolution);\r\n\r\n      const leadingBits = candidateSolution.substr(0, leadingZeros).split(\"\");\r\n      if (leadingBits.every((bit) => bit === \"0\")) {\r\n        break;\r\n      }\r\n\r\n      setNonce(nonce++);\r\n    }\r\n\r\n    return candidateSolution;\r\n  }\r\n\r\n  async updateBlocksInChain(blockchain: Block[]): Promise<{ validStates: boolean[]; blockchain: Block[] }> {\r\n    // find index where the chain breaks due to improper prev/curr hash combination\r\n    let failureIndex = 1;\r\n    for (let i = failureIndex; i < blockchain.length; i++) {\r\n      if (blockchain[i - 1].currHash.slice(0, 2) !== \"00\") {\r\n        failureIndex = i - 1;\r\n        break;\r\n      }\r\n    }\r\n\r\n    const validStates = [];\r\n    for (let i = 0; i < blockchain.length; i++) {\r\n      if (i > failureIndex) {\r\n        // update prev hash of next block\r\n        blockchain[i].prevHash = blockchain[i - 1].currHash;\r\n        blockchain[i].currHash = await Chain.instance.digestMessage(blockchain[i].prevHash);\r\n\r\n        // persist new blockchain\r\n        localStorage.setItem(\"chain\", JSON.stringify(blockchain));\r\n      }\r\n\r\n      // block is valid if it is below the failure index\r\n      validStates.push(i < failureIndex);\r\n    }\r\n\r\n    return { validStates, blockchain };\r\n  }\r\n\r\n  async verifyTransaction(transaction: Transaction, signature: ArrayBuffer): Promise<boolean> {\r\n    const data = Chain.stringToArrayBuffer(JSON.stringify(transaction));\r\n    const isValid = await crypto.subtle.verify({ name: \"ECDSA\", hash: \"SHA-256\" }, transaction.from, signature, data);\r\n\r\n    if (isValid) {\r\n      this.#verifiedTransactions.push(transaction);\r\n      console.log(\"✅ Verified Transaction!\");\r\n      console.log(`Transaction Pool Now Has ${this.#verifiedTransactions.length} Verified Transactions`);\r\n    }\r\n\r\n    if (this.#verifiedTransactions.length === this.#BLOCK_LIMIT) {\r\n      this.addBlock(\"\", this.#verifiedTransactions);\r\n      this.#verifiedTransactions = []; // empty the verified transaction pool\r\n    }\r\n\r\n    return isValid;\r\n  }\r\n\r\n  addBlock(newHash: string, transactions: Transaction[]): void {\r\n    const newBlock = new Block(this.lastBlock.index + 1, this.lastBlock.currHash, newHash, transactions);\r\n    this.#chain.push(newBlock);\r\n    localStorage.setItem(\"chain\", JSON.stringify(this.blockChain));\r\n  }\r\n}\r\n","import { Chain } from \"../Chain/chain_class\";\r\nimport { Transaction } from \"../Transaction/transaction_class\";\r\n\r\nexport class Wallet {\r\n  publicKey: CryptoKey;\r\n  privateKey: CryptoKey;\r\n  balance: number;\r\n\r\n  constructor() {\r\n    this.publicKey = { type: \"public\", extractable: true, algorithm: { name: \"ECDSA\" }, usages: [\"verify\"] };\r\n    this.privateKey = { type: \"private\", extractable: true, algorithm: { name: \"ECDSA\" }, usages: [\"sign\"] };\r\n    this.balance = 1000;\r\n  }\r\n\r\n  async initialize(): Promise<void> {\r\n    const keyPair = await window.crypto.subtle.generateKey({ name: \"ECDSA\", namedCurve: \"P-256\" }, true, [\"sign\", \"verify\"]); // prettier-ignore\r\n    this.publicKey = keyPair.publicKey;\r\n    this.privateKey = keyPair.privateKey;\r\n  }\r\n\r\n  static async CryptoKeyToHex(format: string, key: CryptoKey): Promise<string> {\r\n    const buf = (await window.crypto.subtle.exportKey(format, key)) as ArrayBuffer;\r\n    return Chain.bufferToHex(buf);\r\n  }\r\n\r\n  getMessageEncoding(message: string): Uint8Array {\r\n    return new TextEncoder().encode(message);\r\n  }\r\n\r\n  async sendMoney(amount: number, to: CryptoKey, message?: string): Promise<void> {\r\n    if (amount <= this.balance) {\r\n      const transaction = new Transaction(amount, this.publicKey, to, message);\r\n      const data = Chain.stringToArrayBuffer(JSON.stringify(transaction));\r\n      const signature = await window.crypto.subtle.sign({ name: \"ECDSA\", hash: \"SHA-256\" }, this.privateKey, data);\r\n\r\n      const isValid = await Chain.instance.verifyTransaction(transaction, signature);\r\n\r\n      if (isValid) {\r\n        this.balance -= amount;\r\n      } else {\r\n        alert(\"Invalid transaction!\");\r\n      }\r\n    } else {\r\n      alert(\"Your balance is not high enough to cover this transaction.\");\r\n    }\r\n  }\r\n}\r\n","export enum ACTIONS {\r\n  UPDATE_VERIFIED_TRANS = \"UPDATE_VERIFIED_TRANS\",\r\n  UPDATE_SELECTED_TRANS = \"UPDATE_SELECTED_TRANS\",\r\n  UPDATE_USERS = \"UPDATE_USERS\",\r\n}\r\n","import React from \"react\";\r\nimport { IAction, IState } from \"../typings/AppTypes\";\r\n\r\ntype TAppContext = { state: IState; dispatch: React.Dispatch<IAction> } | undefined;\r\n\r\nexport const AppContext = React.createContext<TAppContext>(undefined);\r\n","export function copyKey(\r\n  e: React.FocusEvent<HTMLTextAreaElement | HTMLInputElement>,\r\n  setCopied: (arg: boolean[]) => void,\r\n  type?: \"public\" | \"private\"\r\n): void {\r\n  e.target.select();\r\n  e.target.setSelectionRange(0, 1e6);\r\n  document.execCommand(\"copy\");\r\n\r\n  // wallet page, copying keys\r\n  if (type) {\r\n    const isPublic = type === \"public\";\r\n    setCopied([isPublic, !isPublic && !e.target.value.includes(\"◦\")]);\r\n  } else {\r\n    setCopied([true]);\r\n  }\r\n}\r\n","import React, { useRef, useState, useContext } from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\n\r\nimport { Wallet } from \"../Wallet/Wallet_class\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState } from \"../../typings/AppTypes\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { copyKey } from \"../../utils/copyInput\";\r\n\r\nimport \"./Wallet.css\";\r\n\r\nexport default function KeyGeneration(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const publicKey = useRef<HTMLTextAreaElement>(null);\r\n  const privateKey = useRef<HTMLTextAreaElement>(null);\r\n\r\n  const numRows = useRef(4);\r\n\r\n  const [copied, setCopied] = useState<boolean[]>([false, false]);\r\n\r\n  const addUser = async () => {\r\n    const user = new Wallet();\r\n    await user.initialize();\r\n\r\n    const publicKeyStr = await Wallet.CryptoKeyToHex(\"spki\", user.publicKey);\r\n    const privateKeyStr = await Wallet.CryptoKeyToHex(\"pkcs8\", user.privateKey);\r\n    if (publicKey.current && privateKey.current) {\r\n      publicKey.current.innerText = publicKeyStr;\r\n      privateKey.current.innerText = new Array(privateKeyStr.length).fill(\"◦\").join(\"\");\r\n    }\r\n\r\n    const newUsers = [...state.users, { publicKey: publicKeyStr, balance: user.balance }];\r\n    localStorage.setItem(\"user\", JSON.stringify({ publicKey: publicKeyStr, privateKey: privateKeyStr, balance: user.balance })); // prettier-ignore\r\n    localStorage.setItem(\"users\", JSON.stringify(newUsers));\r\n    dispatch({ type: ACTIONS.UPDATE_USERS, payload: { users: newUsers } });\r\n  };\r\n\r\n  const togglePrivateKey = () => {\r\n    if (privateKey.current) {\r\n      if (privateKey.current.value.includes(\"◦\")) {\r\n        privateKey.current.value = JSON.parse(localStorage.getItem(\"user\") as string).privateKey;\r\n      } else {\r\n        privateKey.current.value = new Array(privateKey.current.value.length).fill(\"◦\").join(\"\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      {!JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey ? (\r\n        <div className=\"col-2\">\r\n          <Button variant=\"primary\" className=\"p-3 font-weight-bold\" onClick={addUser}>\r\n            Create Wallet\r\n          </Button>\r\n        </div>\r\n      ) : (\r\n        <div className=\"col-1\"></div>\r\n      )}\r\n      <div className=\"col-5\">\r\n        <Form.Group className=\"user-key\">\r\n          <Form.Label className=\"mb-3\">\r\n            <h3>Public Key:</h3>\r\n          </Form.Label>\r\n          <Form.Control\r\n            as=\"textarea\"\r\n            rows={numRows.current}\r\n            defaultValue={localStorage.getItem(\"user\") && JSON.parse(localStorage.getItem(\"user\") as string).publicKey}\r\n            isValid={copied[0]}\r\n            onFocus={(e: React.FocusEvent<HTMLTextAreaElement>) => copyKey(e, setCopied, \"public\")}\r\n            ref={publicKey}\r\n          />\r\n          <Form.Control.Feedback type=\"valid\">Copied to clipboard!</Form.Control.Feedback>\r\n        </Form.Group>\r\n      </div>\r\n      <div className=\"col-5\">\r\n        <Form.Group className=\"user-key\">\r\n          <Form.Label className=\"mb-3\">\r\n            <h3>\r\n              Private Key:{\" \"}\r\n              {JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey && (\r\n                <span id=\"private-reveal-eyes\" onClick={togglePrivateKey}>\r\n                  👀\r\n                </span>\r\n              )}\r\n            </h3>\r\n          </Form.Label>\r\n          <Form.Control\r\n            as=\"textarea\"\r\n            rows={numRows.current}\r\n            defaultValue={\r\n              localStorage.getItem(\"user\")\r\n                ? new Array(JSON.parse(localStorage.getItem(\"user\") as string).privateKey.length).fill(\"◦\").join(\"\")\r\n                : \"\"\r\n            }\r\n            onFocus={(e: React.FocusEvent<HTMLTextAreaElement>) => copyKey(e, setCopied, \"private\")}\r\n            isValid={copied[1]}\r\n            ref={privateKey}\r\n          />\r\n          <Form.Control.Feedback type=\"valid\">Copied to clipboard!</Form.Control.Feedback>\r\n        </Form.Group>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Modal, Form, Button, InputGroup } from \"react-bootstrap\";\r\nimport { ITransaction } from \"../../typings/AppTypes\";\r\nimport { ISign } from \"./SignUI\";\r\n\r\ninterface ISend extends ISign {\r\n  details: ITransaction;\r\n  setSigned: (arg: boolean) => void;\r\n  setValidated: (arg: boolean) => void;\r\n}\r\n\r\nexport default function SendUI(props: ISend): JSX.Element {\r\n  return (\r\n    <div>\r\n      <Modal\r\n        show={props.show}\r\n        validated={props.validated.toString()}\r\n        centered\r\n        backdrop=\"static\"\r\n        onHide={() => {\r\n          props.setShow(false);\r\n          props.setSigned(false);\r\n          props.setValidated(false);\r\n        }}\r\n        animation={false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <h4>LibraCoin Transaction (Send)</h4>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form noValidate onSubmit={props.handleSubmit}>\r\n            <Form.Group controlId=\"SendTo\">\r\n              <Form.Label>\r\n                <b>To:</b>\r\n              </Form.Label>\r\n              <Form.Control type=\"text\" defaultValue={props.details.to} disabled={true} />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"SendAmount\">\r\n              <Form.Label>\r\n                <b>Amount:</b>\r\n              </Form.Label>\r\n              <InputGroup className=\"mb-2\">\r\n                <Form.Control type=\"text\" defaultValue={props.details.amount} disabled={true} />\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>LC</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n              </InputGroup>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"TransMessage\">\r\n              <Form.Label>\r\n                <b>Message:</b>\r\n              </Form.Label>\r\n              <Form.Control as=\"textarea\" defaultValue={props.details.message} rows={3} disabled={true} />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"SendSignature\">\r\n              <Form.Label>\r\n                <b>Signature:</b>\r\n              </Form.Label>\r\n              <Form.Control type=\"text\" defaultValue={props.details.signature} disabled={true} />\r\n              <Form.Text className=\"text-muted\">\r\n                Receiver uses this along with your public key to verify transaction.\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Button variant=\"primary\" type=\"submit\" block>\r\n              <b>Send</b>\r\n            </Button>\r\n          </Form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Modal, Form, Button, InputGroup } from \"react-bootstrap\";\r\n\r\nexport interface ISign {\r\n  show: boolean;\r\n  setShow: (arg: boolean) => void;\r\n  validated: boolean;\r\n  handleSubmit: (e: React.FormEvent<HTMLFormElement>) => void;\r\n}\r\n\r\nexport default function SignUI(props: ISign): JSX.Element {\r\n  function checkAmount(e: React.ChangeEvent<HTMLInputElement>): void {\r\n    const userBalance = JSON.parse(localStorage.getItem(\"user\") as string)?.balance || 1000;\r\n    e.target.value = Math.min(Math.max(0.1, +e.target.value), userBalance)\r\n      .toFixed(2)\r\n      .toString();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Modal show={props.show} centered backdrop=\"static\" onHide={() => props.setShow(false)} animation={false}>\r\n        <Modal.Header closeButton>\r\n          <h4>LibraCoin Transaction (Sign)</h4>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form noValidate validated={props.validated} onSubmit={props.handleSubmit}>\r\n            <Form.Group controlId=\"TransFrom\">\r\n              <Form.Label>\r\n                <b>From:</b>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                defaultValue={JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey || \"\"}\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                Your public key → used to verify transaction was signed using your private key\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"TransTo\">\r\n              <Form.Label>\r\n                <b>To:</b>\r\n              </Form.Label>\r\n              <Form.Control type=\"text\" pattern=\"[A-Za-z0-9]{182,182}\" required />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                Must be of the same format as your public key\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"TransAmount\">\r\n              <Form.Label>\r\n                <b>Amount:</b>\r\n              </Form.Label>\r\n              <InputGroup className=\"mb-2\">\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"1.00\"\r\n                  onBlur={(e: React.ChangeEvent<HTMLInputElement>) => checkAmount(e)}\r\n                  required\r\n                />\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>LC</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n              </InputGroup>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"TransMessage\">\r\n              <Form.Label>\r\n                <b>Message:</b>\r\n              </Form.Label>\r\n              <Form.Control as=\"textarea\" placeholder=\"optional message...\" rows={3} />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"TransPrivate\">\r\n              <Form.Label>\r\n                <b>Private Key:</b>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                defaultValue={JSON.parse(localStorage.getItem(\"user\") as string)?.privateKey || \"\"}\r\n                required\r\n              />\r\n              <Form.Text className=\"text-muted\">This is not shared with anyone, keep this secret!</Form.Text>\r\n            </Form.Group>\r\n\r\n            <Button variant=\"primary\" type=\"submit\" block>\r\n              <b>Sign</b>\r\n            </Button>\r\n          </Form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useRef } from \"react\";\r\nimport { ITransaction } from \"../../typings/AppTypes\";\r\nimport { Chain } from \"../Chain/chain_class\";\r\n\r\nimport SendUI from \"./SendUI\";\r\nimport SignUI from \"./SignUI\";\r\n\r\nexport default function TransactionUI(): JSX.Element {\r\n  const [show, setShow] = useState<boolean>(false);\r\n  const [validated, setValidated] = useState<boolean>(false);\r\n  const [signed, setSigned] = useState<boolean>(false);\r\n\r\n  const formDetails = useRef<ITransaction>({\r\n    to: \"\",\r\n    from: JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey ?? \"\",\r\n    amount: 0,\r\n    message: \"\",\r\n    signature: \"\",\r\n  });\r\n\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const form = e.currentTarget;\r\n    setValidated(true);\r\n\r\n    if (form.checkValidity() && !signed) {\r\n      // haven't signed the transaction yet\r\n      const formInputs = { ...form };\r\n      const formValues = Object.values(formInputs)\r\n        .slice(1, 4)\r\n        .map((input) => input.value);\r\n\r\n      formDetails.current.to = formValues[0];\r\n      formDetails.current.amount = +formValues[1];\r\n      formDetails.current.message = formValues[2];\r\n      formDetails.current.signature = await Chain.instance.digestMessage(JSON.stringify(formDetails.current));\r\n\r\n      setSigned(true);\r\n    } else if (form.checkValidity()) {\r\n      // signed the transaction and need to send now\r\n      const prevTrans = JSON.parse(localStorage.getItem(\"transactions\") as string) || [];\r\n      localStorage.setItem(\"transactions\", JSON.stringify([...prevTrans, formDetails.current]));\r\n      setShow(false);\r\n      setSigned(false);\r\n      setValidated(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button className=\"font-weight-bold btn btn-info p-3 my-5\" onClick={() => setShow(true)}>\r\n        Make Transaction\r\n      </button>\r\n      {!signed ? (\r\n        <SignUI show={show} setShow={setShow} validated={validated} handleSubmit={handleSubmit} />\r\n      ) : (\r\n        <SendUI\r\n          show={show}\r\n          setShow={setShow}\r\n          validated={validated}\r\n          setValidated={setValidated}\r\n          setSigned={setSigned}\r\n          handleSubmit={handleSubmit}\r\n          details={formDetails.current}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState, IUser } from \"../../typings/AppTypes\";\r\nimport { copyKey } from \"../../utils/copyInput\";\r\n\r\nimport \"./User.css\";\r\n\r\nexport default function UserItems(): JSX.Element {\r\n  const { state } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n  const [copied, setCopied] = useState<boolean[]>([false]);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h3>\r\n          <b>Users:</b>\r\n        </h3>\r\n        <div id=\"list-background\">\r\n          {state.users?.map((user: IUser) => {\r\n            return (\r\n              <Form className=\"item\" key={Math.random()}>\r\n                <Form.Group>\r\n                  <Form.Label>\r\n                    <h5 className={copied ? \"my-0\" : \"mt-1\"}>Public Key:</h5>\r\n                  </Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    className=\"text-truncate\"\r\n                    onFocus={(e: React.FocusEvent<HTMLInputElement>) => copyKey(e, setCopied)}\r\n                    defaultValue={user.publicKey}\r\n                    isValid={copied[0]}\r\n                  />\r\n                  <Form.Control.Feedback type=\"valid\">Copied to clipboard</Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                  <Form.Label>\r\n                    <h5 className=\"my-0\">Balance:</h5>\r\n                  </Form.Label>\r\n                  <p>{user.balance.toFixed(2)} LC</p>\r\n                </Form.Group>\r\n              </Form>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport NavbarUI from \"../components/Navbar/NavbarUI\";\r\nimport KeyGeneration from \"../components/Wallet/KeyGeneration\";\r\nimport TransactionUI from \"../components/Transaction/TransactionUI\";\r\nimport UserItems from \"../components/User/UserItems\";\r\n\r\nexport default function WalletUI(): JSX.Element {\r\n  return (\r\n    <div className=\"container-fluid my-3\">\r\n      <NavbarUI />\r\n      <KeyGeneration />\r\n      <TransactionUI />\r\n      <UserItems />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useRef, useState, useContext } from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { IAction, IState } from \"../../typings/AppTypes\";\r\nimport { Chain } from \"../Chain/chain_class\";\r\n\r\ninterface IStats {\r\n  setShowBtn: (arg: boolean) => void;\r\n  setIsValid: (arg: boolean) => void;\r\n  setSolution: (arg: string) => void;\r\n  solution: string;\r\n  isValid: boolean;\r\n  chain: boolean;\r\n  index?: number;\r\n}\r\n\r\nexport default function StatisticsUI(props: IStats): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const origNonce = useRef<number>();\r\n  const mineBtn = useRef<HTMLButtonElement>(null);\r\n  const [nonce, setNonce] = useState<number>();\r\n  const [target, setTarget] = useState<string>();\r\n\r\n  async function handleMine() {\r\n    props.setShowBtn(true);\r\n    props.setIsValid(false);\r\n\r\n    let solutionHash = \"\";\r\n\r\n    // make target\r\n    origNonce.current = Math.round(Math.random() * 1e6);\r\n    const numZeros = Math.round(Math.random()) + 2;\r\n    const targetHash = await Chain.instance.createTarget(numZeros);\r\n    setTarget(targetHash);\r\n\r\n    // mine\r\n    if (mineBtn.current) {\r\n      mineBtn.current.disabled = true;\r\n      solutionHash = await Chain.instance.mine(origNonce.current, numZeros, setNonce, props.setSolution);\r\n      mineBtn.current.disabled = false;\r\n    }\r\n\r\n    if (solutionHash <= targetHash) {\r\n      if (props.index) {\r\n        Chain.instance.blockChain[props.index].currHash = solutionHash;\r\n        localStorage.setItem(\"chain\", JSON.stringify(Chain.instance.blockChain));\r\n      }\r\n\r\n      dispatch({ type: ACTIONS.UPDATE_VERIFIED_TRANS });\r\n\r\n      Chain.instance.updateBlocksInChain(Chain.instance.blockChain);\r\n      props.setIsValid(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={props.chain ? \"bordered-background\" : \"col-6 mx-3\"}>\r\n      <Form.Group>\r\n        <Form.Label>\r\n          <h5 className=\"my-0\">Nonce:</h5>\r\n        </Form.Label>\r\n        <Form.Control type=\"number\" defaultValue={origNonce.current} disabled={true} />\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <Form.Label>\r\n          <h5 className=\"my-0\">Block Header (Current):</h5>\r\n        </Form.Label>\r\n        <Form.Control type=\"number\" defaultValue={nonce} disabled={true} />\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <Form.Label>\r\n          <h5 className=\"my-0\">Target:</h5>\r\n        </Form.Label>\r\n        <Form.Control type=\"text\" defaultValue={target} disabled={true} />\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <Form.Label>\r\n          <h5 className=\"my-0\">Solution:</h5>\r\n        </Form.Label>\r\n        <Form.Control\r\n          type=\"text\"\r\n          style={props.isValid ? { color: \"green\" } : { color: \"red\" }}\r\n          defaultValue={props.solution}\r\n          disabled={true}\r\n        />\r\n      </Form.Group>\r\n\r\n      <Button\r\n        variant=\"primary\"\r\n        className=\"btn-block d-block mt-3\"\r\n        disabled={props.isValid || state.selectedTrans.length === 0}\r\n        onClick={() => handleMine()}\r\n        ref={mineBtn}\r\n      >\r\n        <h4 className=\"m-0\">Mine</h4>\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { Button, Form } from \"react-bootstrap\";\r\nimport { Chain } from \"../Chain/chain_class\";\r\nimport StatisticsUI from \"./StatisticsUI\";\r\n\r\nimport \"./Block.css\";\r\nimport { Block } from \"./block_class\";\r\n\r\nexport default function BlockUI({\r\n  details,\r\n  startValid,\r\n  setBlockchain,\r\n}: {\r\n  startValid: boolean;\r\n  details?: Block;\r\n  setBlockchain?: (arg: Block[]) => void;\r\n}): JSX.Element {\r\n  const [solution, setSolution] = useState<string>(\"\");\r\n  const [isValid, setIsValid] = useState<boolean>(startValid);\r\n  const [showBtn, setShowBtn] = useState<boolean>(true);\r\n  const [timestamp, setTimestamp] = useState<number>(details ? details.timestamp : Chain.instance.lastBlock.timestamp);\r\n\r\n  useEffect(() => {\r\n    setTimestamp(Date.now());\r\n  }, [solution]);\r\n\r\n  function handleAddBlock() {\r\n    Chain.instance.addBlock(solution, []);\r\n    setShowBtn(false);\r\n  }\r\n\r\n  async function handleTransactionInfoChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n    if (details) {\r\n      const og_hash = Chain.instance.blockChain[details.index].currHash;\r\n\r\n      const hash = await Chain.instance.digestMessage(\r\n        Chain.instance.blockChain[details.index].prevHash + e.target.value\r\n      );\r\n      Chain.instance.blockChain[details.index].currHash = hash;\r\n\r\n      // !TODO will need to update the transactions field once it is complete (merkle root string)\r\n      // Chain.instance.blockChain[details.index].transactions = [e.target.value];\r\n\r\n      // persist new blockchain\r\n      localStorage.setItem(\"chain\", JSON.stringify(Chain.instance.blockChain));\r\n\r\n      // re-render the new calculated hash\r\n      setSolution(hash);\r\n      setIsValid(hash === og_hash && hash.slice(0, 2) === \"00\");\r\n      setBlockchain && setBlockchain(Chain.instance.blockChain);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!details && (\r\n        <StatisticsUI\r\n          chain={false}\r\n          setShowBtn={setShowBtn}\r\n          solution={solution}\r\n          setSolution={setSolution}\r\n          isValid={isValid}\r\n          setIsValid={setIsValid}\r\n        />\r\n      )}\r\n\r\n      <div className={\"block \" + (details ? \"col-12 \" : \"\") + (isValid ? \"valid-block\" : \"invalid-block\")}>\r\n        <Form.Group>\r\n          <Form.Label>\r\n            <h5>Index:</h5>\r\n          </Form.Label>\r\n          <Form.Control\r\n            type=\"number\"\r\n            defaultValue={!details ? Chain.instance.lastBlock.index + 1 : details.index}\r\n            disabled={true}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>\r\n            <h5>Timestamp:</h5>\r\n          </Form.Label>\r\n          <Form.Control type=\"number\" value={!details || solution ? timestamp : details.timestamp} disabled={true} />\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>\r\n            <h5>Previous Hash:</h5>\r\n          </Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            defaultValue={!details ? Chain.instance.lastBlock.currHash : details.prevHash}\r\n            disabled={true}\r\n          />\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>\r\n            <h5>Current Hash:</h5>\r\n          </Form.Label>\r\n          <Form.Control type=\"text\" value={!details || solution ? solution : details.currHash} disabled={true} />\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>\r\n            <h5>Merkle Root:</h5>\r\n          </Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            value={details?.index === 0 ? \"\" : \"abc\"}\r\n            disabled={details && details.index === 0}\r\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleTransactionInfoChange(e)}\r\n          />\r\n        </Form.Group>\r\n\r\n        {!details && isValid && showBtn && (\r\n          <Button variant=\"success\" block onClick={() => handleAddBlock()}>\r\n            <h3 className=\"my-0 font-weight-bold\">+</h3>\r\n          </Button>\r\n        )}\r\n\r\n        {details && (\r\n          <StatisticsUI\r\n            chain={true}\r\n            index={details.index}\r\n            setShowBtn={setShowBtn}\r\n            solution={solution}\r\n            setSolution={setSolution}\r\n            isValid={isValid}\r\n            setIsValid={setIsValid}\r\n          />\r\n        )}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport BlockUI from \"../Block/BlockUI\";\r\nimport { Block } from \"../Block/block_class\";\r\nimport NavbarUI from \"../Navbar/NavbarUI\";\r\n\r\nimport \"./Chain.css\";\r\nimport { Chain } from \"./chain_class\";\r\n\r\nexport default function ChainUI(): JSX.Element {\r\n  const [blockchain, setBlockchain] = useState<Block[]>(Chain.instance.blockChain);\r\n  const [startStates, setStartStates] = useState<boolean[]>(new Array(blockchain.length).fill(true));\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const result = await Chain.instance.updateBlocksInChain(blockchain);\r\n      setStartStates(result.validStates);\r\n      setBlockchain(result.blockchain);\r\n    })();\r\n  }, [blockchain]);\r\n\r\n  return (\r\n    <div>\r\n      <NavbarUI />\r\n      <div id=\"blockchain\">\r\n        {blockchain.map((block, i) => {\r\n          return (\r\n            <div className=\"block-and-chain\" key={Math.random()}>\r\n              <BlockUI details={block} startValid={startStates[i]} setBlockchain={setBlockchain} />\r\n              <div className=\"chain\">🔗</div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { IAction, IState, ITransaction } from \"../../typings/AppTypes\";\r\nimport { copyKey } from \"../../utils/copyInput\";\r\n\r\nimport \"./Transaction.css\";\r\n\r\nexport default function TransactionLineUI(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n  const [copied, setCopied] = useState<boolean[]>([false]);\r\n\r\n  function selectTransaction(transaction: ITransaction): void {\r\n    let selectedTrans = (JSON.parse(localStorage.getItem(\"selectedTransactions\") as string) as ITransaction[]) || [];\r\n    const signatures = selectedTrans.map((x) => x.signature);\r\n\r\n    // if just selected - push onto stack, else remove it\r\n    // adjust backgrounds according to selection/deselection\r\n    if (!signatures.includes(transaction.signature)) {\r\n      selectedTrans.push(transaction);\r\n    } else {\r\n      selectedTrans = selectedTrans.filter((x) => x.signature !== transaction.signature);\r\n    }\r\n\r\n    dispatch({ type: ACTIONS.UPDATE_SELECTED_TRANS, payload: { selectedTrans } });\r\n    localStorage.setItem(\"selectedTransactions\", JSON.stringify(selectedTrans));\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>\r\n        <b>Verified Transactions:</b>\r\n      </h3>\r\n      <div id=\"list-background\">\r\n        {state.verifiedTrans.map((transaction: ITransaction) => {\r\n          return (\r\n            <div\r\n              className={\r\n                \"trans-item \" +\r\n                (state.selectedTrans.map((x) => x.signature).includes(transaction.signature) ? \"selected\" : \"not-selected\") // prettier-ignore\r\n              }\r\n              onClick={() => selectTransaction(transaction)}\r\n              key={Math.random()}\r\n            >\r\n              <Form.Group className=\"mb-1 text-center\">\r\n                <Form.Control type=\"text\" className=\"text-truncate\" defaultValue={transaction.from} />\r\n                <h3 className=\"my-0\">↓</h3>\r\n                <Form.Control type=\"text\" className=\"text-truncate\" defaultValue={transaction.to} />\r\n              </Form.Group>\r\n\r\n              <Form.Group className=\"mb-1\">\r\n                <Form.Label>\r\n                  <h5 className=\"my-0\">Message:</h5>\r\n                </Form.Label>\r\n                <Form.Control as=\"textarea\" className=\"text-truncate\" defaultValue={transaction.message} />\r\n              </Form.Group>\r\n\r\n              <Form.Group className=\"mb-1\">\r\n                <Form.Label>\r\n                  <h5 className=\"my-0\">Amount:</h5>\r\n                </Form.Label>\r\n                <Form.Control type=\"number\" className=\"text-truncate\" defaultValue={transaction.amount} />\r\n              </Form.Group>\r\n\r\n              <Form.Group className=\"mb-1\">\r\n                <Form.Label>\r\n                  <h5 className=\"my-0\">Signature:</h5>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  className=\"text-truncate\"\r\n                  defaultValue={transaction.signature}\r\n                  onFocus={(e: React.FocusEvent<HTMLInputElement>) => copyKey(e, setCopied)}\r\n                  isValid={copied[0]}\r\n                />\r\n                <Form.Control.Feedback type=\"valid\">Copied to clipboard</Form.Control.Feedback>\r\n              </Form.Group>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport NavbarUI from \"../components/Navbar/NavbarUI\";\r\nimport BlockUI from \"../components/Block/BlockUI\";\r\nimport TransactionItems from \"../components/Transaction/TransactionItems\";\r\n\r\nexport default function Mine(): JSX.Element {\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <NavbarUI />\r\n\r\n      <div id=\"verified-transaction\">\r\n        <TransactionItems />\r\n      </div>\r\n\r\n      <div className=\"row d-flex justify-content-center align-items-center my-2 container-fluid\">\r\n        <BlockUI startValid={false} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { ACTIONS } from \"../enums/AppDispatchActions\";\r\nimport { IAction, IState, IUser, ITransaction } from \"../typings/AppTypes\";\r\n\r\nexport const AppReducer = (state: IState, action: IAction): IState => {\r\n  switch (action.type) {\r\n    case ACTIONS.UPDATE_VERIFIED_TRANS: {\r\n      const selectedTransSignatures = state.selectedTrans.map((x) => x.signature);\r\n      const verifiedTrans = state.verifiedTrans.filter((x) => !selectedTransSignatures.includes(x.signature));\r\n      return { ...state, verifiedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_SELECTED_TRANS: {\r\n      return { ...state, selectedTrans: (action.payload as { selectedTrans: ITransaction[] }).selectedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_USERS: {\r\n      return { ...state, users: (action.payload as { users: IUser[] }).users };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { useReducer } from \"react\";\r\nimport { Route, BrowserRouter as Router, Redirect } from \"react-router-dom\";\r\n\r\nimport Wallet from \"../../pages/Wallet\";\r\nimport ChainUI from \"../Chain/ChainUI\";\r\nimport Mine from \"../../pages/Mine\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport { AppReducer } from \"../../reducers/AppReducer\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\n\r\nexport default function App(): JSX.Element {\r\n  const [state, dispatch] = useReducer(AppReducer, {\r\n    verifiedTrans: JSON.parse(localStorage.getItem(\"transactions\") as string) ?? [],\r\n    selectedTrans: JSON.parse(localStorage.getItem(\"selectedTransactions\") as string) ?? [],\r\n    users: JSON.parse(localStorage.getItem(\"users\") as string) ?? [],\r\n  });\r\n\r\n  return (\r\n    <Router basename={\"/LibraCoin\"}>\r\n      <AppContext.Provider value={{ state, dispatch }}>\r\n        <Route exact path=\"/\">\r\n          <Redirect to=\"/wallet\" />\r\n        </Route>\r\n        <Route path=\"/wallet\" component={Wallet} />\r\n        <Route path=\"/mine\" component={Mine} />\r\n        <Route path=\"/blockchain\" component={ChainUI} />\r\n      </AppContext.Provider>\r\n    </Router>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App/App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}