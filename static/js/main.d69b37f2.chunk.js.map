{"version":3,"sources":["components/NavMenu/NavMenu.tsx","enums/AppDispatchActions.ts","context/AppContext.ts","utils/copyInput.ts","utils/conversion.ts","components/User/KeyGeneration.tsx","components/Transaction/Send.tsx","components/Transaction/Sign.tsx","components/Transaction/Transaction.tsx","components/User/UserItems.tsx","pages/Wallet.tsx","utils/mine.ts","utils/propagate.ts","components/Block/Statistics.tsx","utils/Tree.ts","utils/merkleTree.ts","components/Block/Block.tsx","components/Block/BlockChain.tsx","pages/Chain.tsx","components/Block/PreviewBlock.tsx","components/Transaction/TransactionItems.tsx","pages/Mine.tsx","reducers/AppReducer.ts","components/App/App.tsx","index.tsx"],"names":["NavMenu","Navbar","expand","className","Brand","aria-label","href","src","alt","width","Toggle","aria-controls","Collapse","id","Nav","Link","active","location","includes","ACTIONS","AppContext","React","createContext","undefined","copyKey","e","setCopied","type","target","select","setSelectionRange","document","execCommand","isPublic","value","bufferToHex","hashBuffer","Array","from","Uint8Array","map","b","toString","padStart","join","CryptoKeyToHex","format","key","a","window","crypto","subtle","exportKey","buf","digestMessage","message","msgUint8","TextEncoder","encode","digest","randomHash","len","getRandomValues","Uint32Array","KeyGeneration","useContext","state","dispatch","numRows","useRef","publicKeyRef","privateKeyRef","useState","copied","JSON","parse","localStorage","getItem","publicKey","generateKey","name","namedCurve","privateKey","publicKeyStr","privateKeyStr","current","innerText","length","fill","balance","Number","toFixed","setItem","stringify","newUsers","users","UPDATE_USERS","payload","useEffect","addUser","Form","Group","Label","htmlFor","Control","as","rows","defaultValue","isValid","onFocus","ref","Feedback","onClick","Send","props","noValidate","onSubmit","handleSubmit","details","to","disabled","Text","InputGroup","amount","Prepend","placeholder","signature","Button","variant","signed","block","Sign","validated","pattern","required","step","onBlur","userBalance","Math","min","max","checkAmount","Transaction","setValidated","setSigned","formDetails","preventDefault","form","currentTarget","checkValidity","formInputs","formValues","Object","values","slice","input","ADD_VERIFIED_TRANS","trans","UserItems","user","Append","random","Wallet","createTarget","numZeros","targetHash","re","RegExp","zerosStr","replace","mine","nonce","setHeader","setTarget","setSolution","setIsValid","round","candidateSolution","header","MAX_SAFE_INTEGER","substr","split","every","bit","propagateBlockStatus","prevHash","skipFirstUpdate","newRoot","transactions","timestamp","Date","now","index","i","chain","merkleRoot","currHash","newBlock","valid","showTrans","UPDATE_BLOCK","Statistics","hash","solution","style","color","selectedTrans","handleMine","Node","children","parent","pos","this","x","y","node","position","Tree","canvas","xStart","innerWidth","transaction","getContext","height","isLeft","offset","clearRect","newNode","left","calculatePosition","right","queue","push","shift","rectWidth","beginPath","font","strokeStyle","leafOrBodyColor","fillStyle","fillRect","fillText","forEach","child","moveTo","lineTo","stroke","calculateMerkleTreeFormation","verifiedTrans","setMerkleTree","tree","verifiedSignatures","selectedSignatures","signatures","filter","sig","hashArr","getMerkleRoot","Block","setTimestamp","setMerkleRoot","setShowTrans","setTrans","calculateNewMerkleRoot","newVal","newTrans","root","newHash","Fragment","onChange","parseFloat","BlockChain","Chain","PreviewBlock","treeCanvas","merkleTree","setIndex","setPrevHash","canvasTree","clear","flatTree","concat","reverse","flattenTree","addNode","drawTree","drawTreeDiagramOnCanvas","ADD_BLOCK","UPDATE_VERIFIED_TRANS","UPDATE_SELECTED_TRANS","handleAddBlock","TransactionLineUI","included","alert","selectTransaction","Mine","AppReducer","action","prevTrans","selectedTransSignatures","App","useReducer","useMemo","basename","Provider","exact","path","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d69b37f2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\n\r\nimport \"./NavMenu.css\";\r\n\r\nexport default function NavMenu(): JSX.Element {\r\n  return (\r\n    <Navbar expand=\"lg\" className=\"mb-3\">\r\n      <Navbar.Brand aria-label=\"LibraCoin Logo\" href=\"https://github.com/lbragile/LibraCoin\">\r\n        <img src=\"./assets/libracoin-logo-256.png\" alt=\"LibraCoin Logo\" width=\"64\" />\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"ml-auto\">\r\n          <Nav.Link href=\"/LibraCoin/wallet\" active={location.href.includes(\"/wallet\")}>\r\n            Wallet\r\n          </Nav.Link>\r\n          <Nav.Link href=\"/LibraCoin/mine\" active={location.href.includes(\"/mine\")}>\r\n            Mine\r\n          </Nav.Link>\r\n          <Nav.Link href=\"/LibraCoin/blockchain\" active={location.href.includes(\"/blockchain\")}>\r\n            Blockchain\r\n          </Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\n","export enum ACTIONS {\r\n  ADD_VERIFIED_TRANS,\r\n  UPDATE_VERIFIED_TRANS,\r\n  UPDATE_SELECTED_TRANS,\r\n  UPDATE_USERS,\r\n  ADD_BLOCK,\r\n  UPDATE_BLOCK\r\n}\r\n","import React from \"react\";\r\nimport { IAction, IState } from \"../typings/AppTypes\";\r\n\r\ntype TAppContext = { state: IState; dispatch: React.Dispatch<IAction> } | undefined;\r\n\r\nexport const AppContext = React.createContext<TAppContext>(undefined);\r\n","export function copyKey(\r\n  e: React.FocusEvent<HTMLTextAreaElement | HTMLInputElement>,\r\n  setCopied: (arg: boolean[]) => void,\r\n  type?: \"public\" | \"private\"\r\n): void {\r\n  e.target.select();\r\n  e.target.setSelectionRange(0, 1e6);\r\n  document.execCommand(\"copy\");\r\n\r\n  // wallet page, copying keys\r\n  if (type) {\r\n    const isPublic = type === \"public\";\r\n    setCopied([isPublic, !isPublic && !e.target.value.includes(\"◦\")]);\r\n  } else {\r\n    setCopied([true]);\r\n  }\r\n}\r\n","import { TextEncoder } from \"text-encoding\";\r\n\r\nexport function bufferToHex(hashBuffer: ArrayBuffer): string {\r\n  const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\r\n  const hashHex = hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\"); // convert bytes to hex string\r\n  return hashHex;\r\n}\r\n\r\nexport async function CryptoKeyToHex(format: string, key: CryptoKey): Promise<string> {\r\n  const buf = (await window.crypto.subtle.exportKey(format, key)) as ArrayBuffer;\r\n  return bufferToHex(buf);\r\n}\r\n\r\nexport async function digestMessage(message: string): Promise<string> {\r\n  const msgUint8 = new TextEncoder().encode(message); // encode as (utf-8) Uint8Array\r\n  const hashBuffer = await window.crypto.subtle.digest(\"SHA-256\", msgUint8); // hash the message\r\n  return bufferToHex(hashBuffer);\r\n}\r\n\r\nexport function randomHash(len: number): string {\r\n  return bufferToHex(window.crypto.getRandomValues(new Uint32Array(len)));\r\n}\r\n","import React, { useRef, useState, useContext, useEffect } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\n\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState } from \"../../typings/AppTypes\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { copyKey } from \"../../utils/copyInput\";\r\nimport { CryptoKeyToHex } from \"../../utils/conversion\";\r\n\r\nimport \"./User.css\";\r\n\r\nexport default function KeyGeneration(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const numRows = useRef(3);\r\n  const publicKeyRef = useRef<HTMLTextAreaElement>(null);\r\n  const privateKeyRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n  const [copied, setCopied] = useState<boolean[]>([false, false]);\r\n\r\n  // add a user if it's the first time visiting\r\n  useEffect(() => {\r\n    addUser();\r\n  }, []);\r\n\r\n  async function addUser(): Promise<void> {\r\n    if (!JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey) {\r\n      const { publicKey, privateKey } = await window.crypto.subtle.generateKey(\r\n        { name: \"ECDSA\", namedCurve: \"P-256\" },\r\n        true,\r\n        [\"sign\", \"verify\"]\r\n      );\r\n\r\n      const publicKeyStr = await CryptoKeyToHex(\"spki\", publicKey as CryptoKey);\r\n      const privateKeyStr = await CryptoKeyToHex(\"pkcs8\", privateKey as CryptoKey);\r\n      if (publicKeyRef.current && privateKeyRef.current) {\r\n        publicKeyRef.current.innerText = publicKeyStr;\r\n        privateKeyRef.current.innerText = new Array(privateKeyStr.length).fill(\"◦\").join(\"\");\r\n      }\r\n\r\n      const balance = Number(1000).toFixed(2);\r\n      localStorage.setItem(\"user\", JSON.stringify({ publicKey: publicKeyStr, privateKey: privateKeyStr, balance }));\r\n\r\n      const newUsers = [...state.users, { publicKey: publicKeyStr, balance }];\r\n      dispatch({ type: ACTIONS.UPDATE_USERS, payload: { users: newUsers } });\r\n    }\r\n  }\r\n\r\n  const togglePrivateKey = () => {\r\n    if (privateKeyRef.current) {\r\n      if (privateKeyRef.current.value.includes(\"◦\")) {\r\n        privateKeyRef.current.value = JSON.parse(localStorage.getItem(\"user\") as string).privateKey;\r\n      } else {\r\n        privateKeyRef.current.value = new Array(privateKeyRef.current.value.length).fill(\"◦\").join(\"\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid row d-flex align-items-center justify-content-center mx-auto\">\r\n      <Form.Group className=\"user-key col-5 px-0\">\r\n        <Form.Label className=\"mb-3\" htmlFor=\"publicKey\">\r\n          <h4 className=\"mb-0\">Public:</h4>\r\n        </Form.Label>\r\n        <Form.Control\r\n          aria-label=\"publicKey\"\r\n          as=\"textarea\"\r\n          rows={numRows.current}\r\n          defaultValue={JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey}\r\n          isValid={copied[0]}\r\n          onFocus={(e: React.FocusEvent<HTMLTextAreaElement>) => copyKey(e, setCopied, \"public\")}\r\n          ref={publicKeyRef}\r\n        />\r\n        <Form.Control.Feedback type=\"valid\">Copied to clipboard!</Form.Control.Feedback>\r\n      </Form.Group>\r\n\r\n      <Form.Group className=\"user-key col-5 px-0 ml-4\">\r\n        <Form.Label className=\"mb-3\" htmlFor=\"privateKey\">\r\n          <h4 className=\"mb-0\">\r\n            Private:{\" \"}\r\n            {JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey && (\r\n              <span id=\"private-reveal-eyes\" onClick={togglePrivateKey}>\r\n                👀\r\n              </span>\r\n            )}\r\n          </h4>\r\n        </Form.Label>\r\n        <Form.Control\r\n          aria-label=\"privateKey\"\r\n          as=\"textarea\"\r\n          rows={numRows.current}\r\n          defaultValue={\r\n            localStorage.getItem(\"user\")\r\n              ? new Array(JSON.parse(localStorage.getItem(\"user\") as string).privateKey.length).fill(\"◦\").join(\"\")\r\n              : \"\"\r\n          }\r\n          onFocus={(e: React.FocusEvent<HTMLTextAreaElement>) => copyKey(e, setCopied, \"private\")}\r\n          isValid={copied[1]}\r\n          ref={privateKeyRef}\r\n        />\r\n        <Form.Control.Feedback type=\"valid\">Copied to clipboard!</Form.Control.Feedback>\r\n      </Form.Group>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\r\nimport { ITransaction } from \"../../typings/AppTypes\";\r\nimport { ISign } from \"./Sign\";\r\n\r\ninterface ISend extends ISign {\r\n  details: ITransaction;\r\n  setSigned: (arg: boolean) => void;\r\n  setValidated: (arg: boolean) => void;\r\n}\r\n\r\nexport default function Send(props: ISend): JSX.Element {\r\n  return (\r\n    <Form noValidate className=\"col-12 col-lg-5 my-2 my-lg-0 trans-form\" onSubmit={(e) => props.handleSubmit(e)}>\r\n      <Form.Group>\r\n        <Form.Control type=\"text\" defaultValue={props.details.to} disabled={true} />\r\n        <Form.Text className=\"text-muted\">The receiver&apos;s public key</Form.Text>\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <InputGroup className=\"mb-2\">\r\n          <Form.Control type=\"number\" defaultValue={props.details.amount} disabled={true} />\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>LC</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <Form.Control\r\n          as=\"textarea\"\r\n          defaultValue={props.details.message}\r\n          rows={5}\r\n          placeholder=\"optional message...\"\r\n          disabled={true}\r\n        />\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <Form.Control type=\"text\" defaultValue={props.details.signature} disabled={true} />\r\n        <Form.Text className=\"text-muted\">\r\n          Transaction Signature → receiver uses this along with your public key to verify transaction.\r\n        </Form.Text>\r\n      </Form.Group>\r\n\r\n      <Button variant=\"primary\" type=\"submit\" disabled={!props.signed} block>\r\n        <b>Send</b>\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\r\n\r\nexport interface ISign {\r\n  validated: boolean;\r\n  signed: boolean;\r\n  handleSubmit: (e: React.FormEvent<HTMLFormElement>) => void;\r\n}\r\n\r\nexport default function Sign({ validated, signed, handleSubmit }: ISign): JSX.Element {\r\n  function checkAmount(e: React.FocusEvent<HTMLInputElement>): void {\r\n    const userBalance = JSON.parse(localStorage.getItem(\"user\") as string)?.balance || 1000;\r\n    e.target.value = Math.min(Math.max(0.1, +e.target.value), userBalance).toFixed(2);\r\n  }\r\n\r\n  return (\r\n    <Form noValidate validated={validated} className=\"col-12 col-lg-5 trans-form\" onSubmit={handleSubmit}>\r\n      <Form.Group>\r\n        <Form.Control\r\n          type=\"text\"\r\n          defaultValue={JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey || \"\"}\r\n          disabled={true}\r\n        />\r\n        <Form.Text className=\"text-muted\">\r\n          Your public key → used to verify transaction was signed using your private key\r\n        </Form.Text>\r\n        <h3 className=\"my-0 text-center\">↓</h3>\r\n        <Form.Control type=\"text\" placeholder=\"Receiver's public key\" pattern=\"[A-Za-z0-9]{182,182}\" required />\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <InputGroup className=\"mb-2\">\r\n          <Form.Control\r\n            type=\"number\"\r\n            step=\"any\"\r\n            placeholder={Number(1).toFixed(2)}\r\n            onBlur={(e: React.FocusEvent<HTMLInputElement>) => checkAmount(e)}\r\n            required\r\n          />\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>LC</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <Form.Control as=\"textarea\" rows={2} placeholder=\"optional message...\" />\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <Form.Control\r\n          type=\"text\"\r\n          defaultValue={JSON.parse(localStorage.getItem(\"user\") as string)?.privateKey || \"\"}\r\n          disabled={true}\r\n        />\r\n        <Form.Text className=\"text-muted\">Your private key → not shared with anyone, keep this secret!</Form.Text>\r\n      </Form.Group>\r\n\r\n      <Button variant=\"primary\" type=\"submit\" disabled={signed} block>\r\n        <b>Sign</b>\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n","import React, { useState, useRef, useContext } from \"react\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { IAction, IState, ITransaction } from \"../../typings/AppTypes\";\r\nimport { digestMessage } from \"../../utils/conversion\";\r\n\r\nimport Send from \"./Send\";\r\nimport Sign from \"./Sign\";\r\nimport \"./Transaction.css\";\r\n\r\nexport default function Transaction(): JSX.Element {\r\n  const { dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const [validated, setValidated] = useState<boolean>(false);\r\n  const [signed, setSigned] = useState<boolean>(false);\r\n\r\n  const formDetails = useRef<ITransaction>({\r\n    to: \"\",\r\n    from: JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey ?? \"\",\r\n    amount: undefined,\r\n    message: \"\",\r\n    signature: \"\"\r\n  });\r\n\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const form = e.currentTarget;\r\n    setValidated(true);\r\n\r\n    if (form.checkValidity() && !signed) {\r\n      // haven't signed the transaction yet\r\n      const formInputs = { ...form };\r\n      const formValues = Object.values(formInputs).slice(1, 4).map((input) => input.value); // prettier-ignore\r\n\r\n      formDetails.current.to = formValues[0];\r\n      formDetails.current.amount = formValues[1];\r\n      formDetails.current.message = formValues[2];\r\n      const message = formDetails.current.to + formDetails.current.from + formDetails.current.message + formDetails.current.amount; // prettier-ignore\r\n      formDetails.current.signature = await digestMessage(message);\r\n\r\n      setSigned(true);\r\n    } else if (form.checkValidity()) {\r\n      // signed the transaction and need to send now\r\n      dispatch({ type: ACTIONS.ADD_VERIFIED_TRANS, payload: { trans: formDetails.current } });\r\n      setSigned(false);\r\n      setValidated(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid d-flex justify-content-center mx-auto row my-4\">\r\n      <Sign validated={validated} signed={signed} handleSubmit={handleSubmit} />\r\n      <Send\r\n        validated={validated}\r\n        setValidated={setValidated}\r\n        signed={signed}\r\n        setSigned={setSigned}\r\n        handleSubmit={handleSubmit}\r\n        details={formDetails.current}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState, IUser } from \"../../typings/AppTypes\";\r\nimport { copyKey } from \"../../utils/copyInput\";\r\n\r\nimport \"./User.css\";\r\n\r\nexport default function UserItems(): JSX.Element {\r\n  const { state } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n  const [copied, setCopied] = useState<boolean[]>([false]);\r\n\r\n  return (\r\n    <div className=\"container-fluid mb-2\">\r\n      <h3 className=\"font-weight-bold\">Users</h3>\r\n      <div className=\"row flex-nowrap overflow-auto bg-dark mx-1 px-2 rounded\">\r\n        {state.users?.map((user: IUser) => {\r\n          return (\r\n            <Form className=\"user-item rounded\" key={Math.random()}>\r\n              <Form.Group>\r\n                <Form.Text className=\"font-weight-bold mb-1 my-0\">Public Key</Form.Text>\r\n                <Form.Control\r\n                  aria-label=\"User Public Key\"\r\n                  type=\"text\"\r\n                  className=\"text-truncate\"\r\n                  onFocus={(e: React.FocusEvent<HTMLInputElement>) => copyKey(e, setCopied)}\r\n                  defaultValue={user.publicKey}\r\n                  isValid={copied[0]}\r\n                />\r\n                <Form.Control.Feedback type=\"valid\">Copied to clipboard</Form.Control.Feedback>\r\n              </Form.Group>\r\n\r\n              <InputGroup className=\"mt-2\">\r\n                <Form.Control aria-label=\"balance\" type=\"number\" defaultValue={user.balance} disabled={true} />\r\n                <InputGroup.Append>\r\n                  <InputGroup.Text>LC</InputGroup.Text>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n            </Form>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport NavMenu from \"../components/NavMenu/NavMenu\";\r\nimport KeyGeneration from \"../components/User/KeyGeneration\";\r\nimport Transaction from \"../components/Transaction/Transaction\";\r\nimport UserItems from \"../components/User/UserItems\";\r\n\r\nexport default function Wallet(): JSX.Element {\r\n  return (\r\n    <div>\r\n      <NavMenu />\r\n      <KeyGeneration />\r\n      <Transaction />\r\n      <UserItems />\r\n    </div>\r\n  );\r\n}\r\n","import { digestMessage, randomHash } from \"./conversion\";\r\n\r\nasync function createTarget(numZeros: number): Promise<string> {\r\n  const targetHash = await digestMessage(randomHash(20));\r\n\r\n  // replace leading bits with zeros\r\n  const re = new RegExp(`^.{0,${numZeros}}`, \"g\");\r\n  const zerosStr = Array(numZeros).fill(\"0\").join(\"\");\r\n\r\n  return targetHash.replace(re, zerosStr);\r\n}\r\n\r\nexport async function mine(\r\n  nonce: number,\r\n  setHeader: (arg: number) => void,\r\n  setTarget: (arg: string) => void,\r\n  setSolution: (arg: string) => void,\r\n  setIsValid: (arg: boolean) => void\r\n): Promise<string> {\r\n  // make target\r\n  const numZeros = Math.round(Math.random()) + 2;\r\n  const targetHash = await createTarget(numZeros);\r\n  setTarget(targetHash);\r\n\r\n  // mine\r\n  let candidateSolution = \"\";\r\n  let header = nonce; // re-assigning for clarity\r\n  while (header <= Number.MAX_SAFE_INTEGER) {\r\n    candidateSolution = await digestMessage(header.toString());\r\n    setSolution(candidateSolution);\r\n    setHeader(header++);\r\n\r\n    const leadingBits = candidateSolution.substr(0, numZeros).split(\"\");\r\n    if (leadingBits.every((bit) => bit === \"0\")) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  setIsValid(candidateSolution <= targetHash);\r\n  return candidateSolution;\r\n}\r\n","import { ACTIONS } from \"../enums/AppDispatchActions\";\r\nimport { IAction, IBlock, IState, ITransaction } from \"../typings/AppTypes\";\r\nimport { digestMessage } from \"./conversion\";\r\n\r\nexport async function propagateBlockStatus(\r\n  state: IState,\r\n  dispatch: React.Dispatch<IAction>,\r\n  details: IBlock,\r\n  prevHash: string,\r\n  skipFirstUpdate: boolean,\r\n  newRoot?: string,\r\n  transactions?: ITransaction[],\r\n  timestamp = Date.now()\r\n): Promise<void> {\r\n  const index = details.index;\r\n\r\n  for (let i = index; i < state.chain.length; i++) {\r\n    const merkleRoot = newRoot && i === index ? newRoot : state.chain[i].merkleRoot;\r\n    const currHash = i === index ? prevHash : await digestMessage(i + prevHash + merkleRoot);\r\n\r\n    const newBlock = {\r\n      index: i,\r\n      timestamp,\r\n      prevHash: i === index ? details.prevHash : prevHash,\r\n      currHash,\r\n      transactions: i === index && transactions ? transactions : state.chain[i].transactions,\r\n      merkleRoot,\r\n      valid: skipFirstUpdate ? i === index : false,\r\n      showTrans: state.chain[i].showTrans ?? false\r\n    };\r\n\r\n    prevHash = currHash; // next block's prevHash is this block's currHash\r\n\r\n    dispatch({ type: ACTIONS.UPDATE_BLOCK, payload: { block: newBlock } });\r\n  }\r\n}\r\n","import React, { useState, useRef, useContext } from \"react\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IBlock, IState } from \"../../typings/AppTypes\";\r\nimport { mine } from \"../../utils/mine\";\r\nimport { propagateBlockStatus } from \"../../utils/propagate\";\r\n\r\ninterface IStats {\r\n  chain: boolean;\r\n  isValid: boolean;\r\n  solution: string;\r\n  setIsValid: (arg: boolean) => void;\r\n  setSolution: (arg: string) => void;\r\n  details?: IBlock;\r\n}\r\n\r\nexport default function Statistics(props: IStats): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const nonce = useRef<number>();\r\n  const [header, setHeader] = useState<number>();\r\n  const [target, setTarget] = useState<string>();\r\n\r\n  async function handleMine() {\r\n    nonce.current = Math.round(Math.random() * 1e6);\r\n    const hash = await mine(nonce.current, setHeader, setTarget, props.setSolution, props.setIsValid);\r\n    if (props.chain && props.details) {\r\n      await propagateBlockStatus(state, dispatch, props.details, hash, true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={props.chain ? \"bordered-background\" : \"col-11 col-lg-5 mx-3\"}>\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Nonce</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control type=\"number\" defaultValue={props.solution ? nonce.current : \"\"} disabled={true} />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Header</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control type=\"number\" defaultValue={header} disabled={true} />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text className=\"font-weight-bold\">Target</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control type=\"text\" defaultValue={target} disabled={true} />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Sol&apos;n</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          type=\"text\"\r\n          style={props.isValid ? { color: \"green\" } : { color: \"red\" }}\r\n          defaultValue={props.solution}\r\n          disabled={true}\r\n        />\r\n      </InputGroup>\r\n\r\n      <Button\r\n        variant=\"primary\"\r\n        className=\"btn-block d-block mt-3\"\r\n        disabled={props.isValid || (!props.chain && state.selectedTrans.length === 0)}\r\n        onClick={() => handleMine()}\r\n      >\r\n        <h4 className=\"m-0\">Mine</h4>\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","import { ITransaction } from \"../typings/AppTypes\";\r\n\r\n// modified from https://github.com/foqc/bfs-canvas-tree\r\ninterface ICoordinate {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nclass Node {\r\n  value: string;\r\n  children: Node[];\r\n  parent: Node | null;\r\n  pos: ICoordinate;\r\n\r\n  constructor(value: string) {\r\n    this.value = value;\r\n    this.children = [];\r\n    this.parent = null;\r\n    this.pos = { x: 0, y: 0 };\r\n  }\r\n\r\n  get left(): Node {\r\n    return this.children[0];\r\n  }\r\n\r\n  set left(node: Node) {\r\n    node.parent = this;\r\n    this.children[0] = node;\r\n  }\r\n\r\n  get right(): Node {\r\n    return this.children[1];\r\n  }\r\n\r\n  set right(node: Node) {\r\n    node.parent = this;\r\n    this.children[1] = node;\r\n  }\r\n\r\n  get position(): ICoordinate {\r\n    return this.pos;\r\n  }\r\n\r\n  set position(position: ICoordinate) {\r\n    this.pos = position;\r\n  }\r\n}\r\n\r\nexport class Tree {\r\n  #root: Node | null;\r\n  #transactionSignatures: string[];\r\n  #startPosition: ICoordinate;\r\n  #dim: { width: number; height: number };\r\n  #ctx: CanvasRenderingContext2D | null;\r\n\r\n  constructor(canvas: HTMLCanvasElement, transactions: ITransaction[]) {\r\n    const xStart = window.innerWidth < 1200 ? window.innerWidth * 1.8 : (window.innerWidth / 2) * 0.8;\r\n    this.#root = null;\r\n    this.#transactionSignatures = transactions.map((transaction) => transaction.signature.slice(0, 25) + \"...\");\r\n    this.#startPosition = { x: xStart, y: 5 };\r\n    this.#ctx = canvas.getContext(\"2d\");\r\n    this.#dim = { width: canvas.width, height: canvas.height };\r\n  }\r\n\r\n  calculatePosition({ x, y }: ICoordinate, isLeft = false): ICoordinate {\r\n    const offset = 50;\r\n    return { x: isLeft ? x - offset * 6 : x + offset * 6, y: y + offset };\r\n  }\r\n\r\n  clear(): void {\r\n    if (this.#ctx) {\r\n      this.#ctx.clearRect(0, 0, this.#dim.width, this.#dim.height);\r\n    }\r\n  }\r\n\r\n  addNode(value: string): void {\r\n    const newNode = new Node(value !== \"\" ? value.slice(0, 25) + \"...\" : \"\");\r\n    if (!this.#root) {\r\n      newNode.position = this.#startPosition;\r\n      this.#root = newNode;\r\n    } else {\r\n      // start at root, if no node on left add and break, likewise for right\r\n      // only move in direction that does not have both children\r\n      let node = this.#root;\r\n      while (node) {\r\n        if (!node.left) {\r\n          newNode.position = this.calculatePosition(node.position, true);\r\n          node.left = newNode;\r\n          break;\r\n        }\r\n\r\n        if (!node.right) {\r\n          newNode.position = this.calculatePosition(node.position);\r\n          node.right = newNode;\r\n          break;\r\n        }\r\n\r\n        node = !node.left.left || !node.left.right ? node.left : node.right;\r\n      }\r\n    }\r\n  }\r\n\r\n  drawTree(): void {\r\n    const queue = [] as Node[];\r\n    queue.push(this.#root as Node);\r\n\r\n    // level order traversal\r\n    while (queue.length !== 0) {\r\n      const node = queue.shift();\r\n      const rectWidth = node && node.value.length * 9;\r\n\r\n      if (this.#ctx && rectWidth && node) {\r\n        // draw the root node\r\n        const { x, y } = node.position;\r\n        this.#ctx.beginPath();\r\n\r\n        this.#ctx.font = \"1rem Arial\";\r\n        this.#ctx.strokeStyle = \"#000\";\r\n\r\n        const leafOrBodyColor = this.#transactionSignatures.includes(node.value) ? \"#ddf\" : \"#ff0a\";\r\n        this.#ctx.fillStyle = node.value === this.#root?.value ? \"#dfd\" : leafOrBodyColor;\r\n\r\n        this.#ctx.fillRect(x - rectWidth / 2, y + 5, rectWidth, 30);\r\n        this.#ctx.fillStyle = \"#000\";\r\n        this.#ctx.fillText(node.value, x + 10 - rectWidth / 2, y + 27);\r\n\r\n        // draw it's children\r\n        node.children.forEach((child, i) => {\r\n          child.position.x = i === 1 ? child.position.x - 150 : child.position.x + 150; // avoid overlap\r\n          queue.push(child);\r\n          if (this.#ctx) {\r\n            this.#ctx.beginPath();\r\n            this.#ctx.moveTo(x + 0.5, y + 35);\r\n            this.#ctx.lineTo(child.position.x + 0.5, child.position.y + 5);\r\n            this.#ctx.stroke();\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Tree } from \"./Tree\";\r\nimport { ITransaction } from \"../typings/AppTypes\";\r\nimport { digestMessage } from \"./conversion\";\r\n\r\nexport async function calculateMerkleTreeFormation(\r\n  verifiedTrans: ITransaction[],\r\n  selectedTrans: ITransaction[],\r\n  setMerkleTree?: (arg: string[][]) => void\r\n): Promise<string> {\r\n  let tree = [[\"\"]];\r\n  if (selectedTrans.length > 0) {\r\n    // need to make sure node's in tree appear in same order as in the verified transaction pane, regardless of selection order\r\n    const verifiedSignatures = verifiedTrans.map((trans) => trans.signature);\r\n    const selectedSignatures = selectedTrans.map((trans) => trans.signature);\r\n    let signatures = verifiedSignatures.filter((sig) => selectedSignatures.includes(sig));\r\n    tree = [signatures];\r\n\r\n    while (signatures.length !== 1) {\r\n      const hashArr = [] as string[];\r\n      for (let i = 0; i < signatures.length; i += 2) {\r\n        const hash = signatures[i + 1] ? await digestMessage(signatures[i] + signatures[i + 1]) : signatures[i];\r\n        hashArr.push(hash);\r\n      }\r\n\r\n      signatures = hashArr;\r\n      tree.push(hashArr);\r\n    }\r\n  }\r\n\r\n  if (setMerkleTree) {\r\n    setMerkleTree(tree);\r\n  }\r\n\r\n  return getMerkleRoot(tree);\r\n}\r\n\r\nexport function getMerkleRoot(tree: string[][]): string {\r\n  return tree[tree.length - 1][0];\r\n}\r\n\r\nexport function flattenTree(tree: string[][]): string[] {\r\n  let flatTree = [] as string[];\r\n  // need to reverse each tree row so that printing produces the right order!\r\n  for (let i = 0; i < tree.length; i++) {\r\n    flatTree = flatTree.concat(tree[i].reverse());\r\n  }\r\n\r\n  return flatTree;\r\n}\r\n\r\nexport function drawTreeDiagramOnCanvas(\r\n  merkleTree: string[][],\r\n  canvas: HTMLCanvasElement | null,\r\n  transactions: ITransaction[]\r\n): void {\r\n  if (canvas) {\r\n    const canvasTree = new Tree(canvas, transactions);\r\n    canvasTree.clear();\r\n    const flatTree = flattenTree(merkleTree);\r\n    for (let i = flatTree.length - 1; i >= 0; i--) {\r\n      canvasTree.addNode(flatTree[i]);\r\n    }\r\n    canvasTree.drawTree();\r\n  }\r\n}\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\n\r\nimport Statistics from \"./Statistics\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IBlock, IState, ITransaction } from \"../../typings/AppTypes\";\r\n\r\nimport { digestMessage } from \"../../utils/conversion\";\r\nimport { calculateMerkleTreeFormation } from \"../../utils/merkleTree\";\r\nimport { propagateBlockStatus } from \"../../utils/propagate\";\r\nimport \"./Block.css\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\n\r\ntype TChange = \"from\" | \"to\" | \"message\" | \"amount\";\r\ntype TInputChange<T = HTMLInputElement> = React.ChangeEvent<T>;\r\n\r\nexport default function Block({ details }: { details: IBlock }): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const [solution, setSolution] = useState<string>(\"\");\r\n  const [timestamp, setTimestamp] = useState<number>(Date.now());\r\n  const [merkleRoot, setMerkleRoot] = useState<string>(details.merkleRoot);\r\n  const [isValid, setIsValid] = useState<boolean>(details.valid ?? true);\r\n  const [showTrans, setShowTrans] = useState<boolean>(details.showTrans ?? false);\r\n  const [trans, setTrans] = useState<ITransaction[]>(details.transactions);\r\n\r\n  // update timestamp when solution is mined\r\n  useEffect(() => setTimestamp(Date.now()), [solution]);\r\n\r\n  async function calculateNewMerkleRoot(newVal: number | string, index: number, type: TChange): Promise<void> {\r\n    const newTrans = JSON.parse(JSON.stringify(trans)); // deep copy\r\n\r\n    // update the changed value & signature\r\n    newTrans[index] = { ...newTrans[index], [type]: newVal };\r\n    newTrans[index].signature = await digestMessage(newTrans[index].to + newTrans[index].from + newTrans[index].amount + newTrans[index].message); // prettier-ignore\r\n\r\n    // calculate new merkle root and currHash\r\n    const root = await calculateMerkleTreeFormation(newTrans, newTrans);\r\n    const newHash = await digestMessage(details.index + details.prevHash + root);\r\n\r\n    setTrans(newTrans);\r\n    setMerkleRoot(root);\r\n    setSolution(newHash);\r\n\r\n    await propagateBlockStatus(state, dispatch, details, newHash, false, root, newTrans);\r\n  }\r\n\r\n  function handleViewTransactions(): void {\r\n    setShowTrans(!showTrans);\r\n    dispatch({ type: ACTIONS.UPDATE_BLOCK, payload: { block: { ...details, showTrans: !showTrans } } });\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex-column\">\r\n      <div className={\"block my-3 mx-1 p-2 rounded \" + (isValid ? \"valid-block\" : \"invalid-block\")}>\r\n        <Form>\r\n          <InputGroup className=\"my-2\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Index</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control type=\"number\" defaultValue={details.index} disabled={true} />\r\n          </InputGroup>\r\n\r\n          <InputGroup className=\"my-2\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Timestamp</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control type=\"number\" defaultValue={solution ? timestamp : details.timestamp} disabled={true} />\r\n          </InputGroup>\r\n\r\n          <InputGroup className=\"my-2\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Previous #</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control type=\"text\" defaultValue={details.prevHash} disabled={true} />\r\n          </InputGroup>\r\n\r\n          <InputGroup className=\"my-2\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Current #</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control type=\"text\" defaultValue={solution ? solution : details.currHash} disabled={true} />\r\n          </InputGroup>\r\n\r\n          <InputGroup className=\"my-2\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Merkle #</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            {details.index === 0 ? (\r\n              <Form.Control type=\"text\" defaultValue={\"\"} disabled={true} />\r\n            ) : (\r\n              <React.Fragment>\r\n                <Form.Control type=\"text\" defaultValue={merkleRoot} disabled={true} />\r\n                <InputGroup.Append>\r\n                  <InputGroup.Text className=\"show-trans-eye\" onClick={() => handleViewTransactions()}>\r\n                    {showTrans ? \"🙈\" : \"🙉\"}\r\n                  </InputGroup.Text>\r\n                </InputGroup.Append>\r\n              </React.Fragment>\r\n            )}\r\n          </InputGroup>\r\n        </Form>\r\n\r\n        <Statistics\r\n          chain={true}\r\n          details={details}\r\n          solution={solution}\r\n          setSolution={setSolution}\r\n          isValid={isValid}\r\n          setIsValid={setIsValid}\r\n        />\r\n      </div>\r\n\r\n      {showTrans && (\r\n        <div className=\"row flex-nowrap overflow-auto mx-2\">\r\n          {trans.map((transaction: ITransaction, i: number) => {\r\n            return (\r\n              <div className=\"col-12 mr-2 bg-light border border-dark p-1 rounded\" key={Math.random()}>\r\n                <Form.Group className=\"mb-2 text-center\">\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    value={transaction.from}\r\n                    onChange={(e: TInputChange) => calculateNewMerkleRoot(e.target.value, i, \"from\")}\r\n                  />\r\n                  <h3 className=\"my-0\">↓</h3>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    value={transaction.to}\r\n                    onChange={(e: TInputChange) => calculateNewMerkleRoot(e.target.value, i, \"to\")}\r\n                  />\r\n                </Form.Group>\r\n\r\n                <InputGroup className=\"mb-2\">\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text>Msg</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <Form.Control\r\n                    as=\"textarea\"\r\n                    value={transaction.message}\r\n                    onChange={(e: TInputChange<HTMLTextAreaElement>) =>\r\n                      calculateNewMerkleRoot(e.target.value, i, \"message\")\r\n                    }\r\n                  />\r\n                </InputGroup>\r\n\r\n                <InputGroup className=\"mb-2\">\r\n                  <Form.Control\r\n                    type=\"number\"\r\n                    value={transaction.amount && parseFloat(transaction.amount + \"\").toFixed(2)}\r\n                    onChange={(e: TInputChange) => calculateNewMerkleRoot(e.target.value, i, \"amount\")}\r\n                  />\r\n                  <InputGroup.Append>\r\n                    <InputGroup.Text>LC</InputGroup.Text>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n\r\n                <InputGroup>\r\n                  <InputGroup.Prepend>\r\n                    <InputGroup.Text>Sig</InputGroup.Text>\r\n                  </InputGroup.Prepend>\r\n                  <Form.Control type=\"text\" defaultValue={transaction.signature} disabled={true} />\r\n                </InputGroup>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\n\r\nimport Block from \"./Block\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState } from \"../../typings/AppTypes\";\r\n\r\nimport \"./Block.css\";\r\n\r\nexport default function BlockChain(): JSX.Element {\r\n  const { state } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  return (\r\n    <div className=\"mx-3 row flex-nowrap overflow-auto\">\r\n      {state.chain.map((block) => (\r\n        <Block details={block} key={Math.random()} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport NavMenu from \"../components/NavMenu/NavMenu\";\r\nimport BlockChain from \"../components/Block/BlockChain\";\r\n\r\nexport default function Chain(): JSX.Element {\r\n  return (\r\n    <div>\r\n      <NavMenu />\r\n      <BlockChain />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useRef, useState, useEffect, useContext } from \"react\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\n\r\nimport Statistics from \"./Statistics\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState } from \"../../typings/AppTypes\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { calculateMerkleTreeFormation, drawTreeDiagramOnCanvas, getMerkleRoot } from \"../../utils/merkleTree\";\r\n\r\nimport \"./Block.css\";\r\n\r\nexport default function PreviewBlock(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const treeCanvas = useRef<HTMLCanvasElement | null>(null);\r\n\r\n  const [solution, setSolution] = useState<string>(\"\");\r\n  const [isValid, setIsValid] = useState<boolean>(false);\r\n  const [timestamp, setTimestamp] = useState<number>(Date.now());\r\n  const [merkleTree, setMerkleTree] = useState<string[][]>([[\"\"]]);\r\n  const [index, setIndex] = useState<number>(state.chain[state.chain.length - 1].index + 1);\r\n  const [prevHash, setPrevHash] = useState<string>(state.chain[state.chain.length - 1].currHash);\r\n\r\n  useEffect(() => {\r\n    calculateMerkleTreeFormation(state.verifiedTrans, state.selectedTrans, setMerkleTree);\r\n    setIsValid(false);\r\n  }, [state.selectedTrans]);\r\n\r\n  // draw tree in canvas\r\n  useEffect(() => {\r\n    drawTreeDiagramOnCanvas(merkleTree, treeCanvas.current, state.selectedTrans);\r\n  }, [merkleTree]);\r\n\r\n  // update timestamp & currentHash when solution is mined\r\n  useEffect(() => setTimestamp(Date.now()), [solution]);\r\n\r\n  function handleAddBlock() {\r\n    const block = {\r\n      index,\r\n      prevHash,\r\n      currHash: solution,\r\n      transactions: state.selectedTrans,\r\n      timestamp,\r\n      merkleRoot: getMerkleRoot(merkleTree),\r\n      valid: state.chain[index - 1].valid, // validity depends on previous block\r\n      showTrans: false\r\n    };\r\n\r\n    // add the block, update verified transactions, clear selected transactions\r\n    dispatch({ type: ACTIONS.ADD_BLOCK, payload: { block } });\r\n    dispatch({ type: ACTIONS.UPDATE_VERIFIED_TRANS });\r\n    dispatch({ type: ACTIONS.UPDATE_SELECTED_TRANS, payload: { selectedTrans: [] } });\r\n\r\n    // update preview details\r\n    setIsValid(false);\r\n    setIndex(index + 1);\r\n    setPrevHash(solution);\r\n    setSolution(\"\");\r\n    setTimestamp(Date.now());\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-fluid row d-flex justify-content-center mx-auto my-3\">\r\n      <div className=\"overflow-auto mb-2\">\r\n        <h4 className=\"font-weight-bold text-center\">Merkle Tree Visualization</h4>\r\n        <canvas ref={treeCanvas} className=\"border border-dark rounded\" width={1500} />\r\n      </div>\r\n\r\n      <Statistics\r\n        chain={false}\r\n        solution={solution}\r\n        setSolution={setSolution}\r\n        isValid={isValid}\r\n        setIsValid={setIsValid}\r\n      />\r\n\r\n      <Form className={\"col-10 col-lg-5 my-4 my-lg-0 pb-2 rounded \" + (isValid ? \"valid-block\" : \"invalid-block\")}>\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Index</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control type=\"number\" value={index} disabled />\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Timestamp</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control type=\"number\" value={timestamp} disabled />\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Previous #</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control type=\"text\" value={prevHash} disabled />\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Current #</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control type=\"text\" value={solution} disabled />\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"mt-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Merkle #</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control type=\"text\" value={getMerkleRoot(merkleTree)} disabled />\r\n        </InputGroup>\r\n\r\n        {isValid && (\r\n          <Button className=\"mt-2\" variant=\"success\" block onClick={() => handleAddBlock()}>\r\n            <h3 className=\"my-0 font-weight-bold\">+</h3>\r\n          </Button>\r\n        )}\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { IAction, IState, ITransaction } from \"../../typings/AppTypes\";\r\n\r\nimport \"./Transaction.css\";\r\n\r\nexport default function TransactionLineUI(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  function selectTransaction(transaction: ITransaction): void {\r\n    let selectedTrans = (JSON.parse(localStorage.getItem(\"selTrans\") as string) as ITransaction[]) || [];\r\n    const signatures = selectedTrans.map((x) => x.signature);\r\n    const included = signatures.includes(transaction.signature);\r\n\r\n    if (selectedTrans.length < 4 || included) {\r\n      // if just selected - push onto stack, else remove it\r\n      // adjust backgrounds according to selection/deselection\r\n      if (!included) {\r\n        selectedTrans.push(transaction);\r\n      } else {\r\n        selectedTrans = selectedTrans.filter((x) => x.signature !== transaction.signature);\r\n      }\r\n\r\n      dispatch({ type: ACTIONS.UPDATE_SELECTED_TRANS, payload: { selectedTrans } });\r\n    } else {\r\n      alert(\"You can mine at most 4 transactions at a time!\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <h3 className=\"font-weight-bold\">Verified Transactions</h3>\r\n      <div className=\"trans-list row flex-nowrap overflow-auto bg-dark mx-1 px-2 rounded\">\r\n        {state.verifiedTrans.map((transaction: ITransaction) => {\r\n          return (\r\n            <div\r\n              className={\r\n                \"trans-item \" +\r\n                (state.selectedTrans.map((x) => x.signature).includes(transaction.signature) ? \"selected\" : \"not-selected\") // prettier-ignore\r\n              }\r\n              onClick={() => selectTransaction(transaction)}\r\n              key={Math.random()}\r\n            >\r\n              <Form.Group className=\"mb-2 text-center\">\r\n                <Form.Control type=\"text\" defaultValue={transaction.from} disabled={true} />\r\n                <h3 className=\"my-0\">↓</h3>\r\n                <Form.Control type=\"text\" defaultValue={transaction.to} disabled={true} />\r\n              </Form.Group>\r\n\r\n              <InputGroup className=\"mb-2\">\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>Msg</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <Form.Control as=\"textarea\" defaultValue={transaction.message} disabled={true} />\r\n              </InputGroup>\r\n\r\n              <InputGroup className=\"mb-2\">\r\n                <Form.Control type=\"number\" defaultValue={transaction.amount} disabled={true} />\r\n                <InputGroup.Append>\r\n                  <InputGroup.Text>LC</InputGroup.Text>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n\r\n              <InputGroup>\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>Sig</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <Form.Control type=\"text\" defaultValue={transaction.signature} disabled={true} />\r\n              </InputGroup>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport NavMenu from \"../components/NavMenu/NavMenu\";\r\nimport PreviewBlock from \"../components/Block/PreviewBlock\";\r\nimport TransactionItems from \"../components/Transaction/TransactionItems\";\r\n\r\nexport default function Mine(): JSX.Element {\r\n  return (\r\n    <div>\r\n      <NavMenu />\r\n      <TransactionItems />\r\n      <PreviewBlock />\r\n    </div>\r\n  );\r\n}\r\n","import { ACTIONS } from \"../enums/AppDispatchActions\";\r\nimport { IAction, IState, IUser, ITransaction, IBlock } from \"../typings/AppTypes\";\r\n\r\nexport const AppReducer = (state: IState, action: IAction): IState => {\r\n  switch (action.type) {\r\n    case ACTIONS.ADD_VERIFIED_TRANS: {\r\n      const newTrans = (action.payload as { trans: ITransaction }).trans;\r\n      const prevTrans = JSON.parse(localStorage.getItem(\"verTrans\") as string) ?? [];\r\n      const verifiedTrans = [...prevTrans, newTrans];\r\n      localStorage.setItem(\"verTrans\", JSON.stringify(verifiedTrans));\r\n      return { ...state, verifiedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_VERIFIED_TRANS: {\r\n      const selectedTransSignatures = state.selectedTrans.map((x) => x.signature);\r\n      const verifiedTrans = state.verifiedTrans.filter((x) => !selectedTransSignatures.includes(x.signature));\r\n      localStorage.setItem(\"verTrans\", JSON.stringify(verifiedTrans));\r\n      return { ...state, verifiedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_SELECTED_TRANS: {\r\n      const selectedTrans = (action.payload as { selectedTrans: ITransaction[] }).selectedTrans;\r\n      localStorage.setItem(\"selTrans\", JSON.stringify(selectedTrans));\r\n      return { ...state, selectedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_USERS: {\r\n      const users = (action.payload as { users: IUser[] }).users;\r\n      localStorage.setItem(\"users\", JSON.stringify(users));\r\n      return { ...state, users };\r\n    }\r\n\r\n    case ACTIONS.ADD_BLOCK: {\r\n      const { block } = action.payload as { block: IBlock };\r\n      const chain = [...state.chain, block];\r\n      localStorage.setItem(\"chain\", JSON.stringify(chain));\r\n      return { ...state, chain };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_BLOCK: {\r\n      const { block } = action.payload as { block: IBlock };\r\n      const chain = JSON.parse(localStorage.getItem(\"chain\") as string);\r\n      chain[block.index] = block;\r\n      localStorage.setItem(\"chain\", JSON.stringify(chain));\r\n      return { ...state, chain };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { useMemo, useReducer } from \"react\";\r\nimport { Route, BrowserRouter as Router, Redirect } from \"react-router-dom\";\r\n\r\nimport Wallet from \"../../pages/Wallet\";\r\nimport Chain from \"../../pages/Chain\";\r\nimport Mine from \"../../pages/Mine\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport { AppReducer } from \"../../reducers/AppReducer\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\n\r\nexport default function App(): JSX.Element {\r\n  const [state, dispatch] = useReducer(AppReducer, {\r\n    verifiedTrans: JSON.parse(localStorage.getItem(\"verTrans\") as string) ?? [],\r\n    selectedTrans: JSON.parse(localStorage.getItem(\"selTrans\") as string) ?? [],\r\n    users: JSON.parse(localStorage.getItem(\"users\") as string) ?? [],\r\n    chain: JSON.parse(localStorage.getItem(\"chain\") as string) ?? [\r\n      {\r\n        index: 0,\r\n        prevHash: \"\",\r\n        currHash: new Array(64).fill(\"0\").join(\"\"),\r\n        transactions: [],\r\n        timestamp: Date.parse(\"04/31/2021\"),\r\n        merkleRoot: \"\"\r\n      }\r\n    ]\r\n  });\r\n\r\n  // prevent re-rendering children when App re-renders\r\n  const value = useMemo(() => ({ state, dispatch }), [state, dispatch]);\r\n\r\n  return (\r\n    <Router basename={\"/LibraCoin\"}>\r\n      <AppContext.Provider value={value}>\r\n        <Route exact path=\"/\">\r\n          <Redirect to=\"/wallet\" />\r\n        </Route>\r\n        <Route path=\"/wallet\" component={Wallet} />\r\n        <Route path=\"/mine\" component={Mine} />\r\n        <Route path=\"/blockchain\" component={Chain} />\r\n      </AppContext.Provider>\r\n    </Router>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App/App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}