{"version":3,"sources":["components/Transaction/TransactionItems.tsx","../node_modules/react-bootstrap/esm/Table.js","components/Block/PreviewTree.tsx","hooks/useDrawPreviewTree.ts","pages/Mine.tsx","hooks/useAppContext.tsx","enums/ColorPallet.ts","utils/conversion.ts","styles/BlockStyles.tsx","enums/Breakpoints.ts","styles/TransactionStyles.tsx","utils/merkleTree.ts","components/Block/Statistics.tsx","../node_modules/react-bootstrap/esm/Row.js","components/Block/Block.tsx"],"names":["TransactionItems","useAppContext","state","dispatch","transaction","a","selectedTrans","JSON","parse","stringify","signatures","map","x","signature","included","includes","length","filter","push","calculateMerkleTreeFormation","verifiedTrans","newTree","newPreview","preview","merkleRoot","getMerkleRoot","valid","type","ACTIONS","UPDATE_SELECTED_TRANS","payload","UPDATE_PREVIEW","alert","className","isSelected","theme","selected","onClick","selectTransaction","Form","Group","Control","name","defaultValue","from","readOnly","to","InputGroup","Prepend","as","msg","amount","disabled","Append","_excluded","Table","React","forwardRef","_ref","ref","bsPrefix","striped","bordered","borderless","hover","size","variant","responsive","props","_objectWithoutPropertiesLoose","decoratedBsPrefix","useBootstrapPrefix","classes","classNames","table","createElement","_extends","responsiveClass","PreviewTree","numCells","useRef","strLen","tree","verified","useState","setTree","useEffect","drawTree","useDrawPreviewTree","truncate","str","n","current","substr","getText","rowNum","index","isTitle","text","Math","floor","getClassName","rootCell","middleCells","dataCells","diagRightLine","diagLeftLine","normalLine","isCorrectColumn","role","Array","_","i","title","Mine","Fragment","Statistics","chain","Block","useContext","AppContext","COLORS","bufferToHex","hashBuffer","Uint8Array","b","toString","padStart","join","CryptoKeyToHex","format","key","window","crypto","subtle","exportKey","buf","digestMessage","message","msgUint8","TextEncoder","encode","digest","randomHash","len","getRandomValues","Uint32Array","GradientLine","dir","PREVIEW_LINES","StyledTableData","styled","td","DEFAULT_BACKGROUND","ROOT_CELL","MIDDLE_CELLS","DATA_CELLS","StyledInput","VALID_SOLUTION","INVALID_SOLUTION","StyledBlockForm","VALID_BACKGROUND","INVALID_BACKGROUND","RevealBlockTransText","Text","BlockContainer","div","DARK_BACKGROUND","StyledButton","Button","DEVICES","xs","SIZES","sm","md","lg","xl","Transaction","margin","padding","borderRadius","border","css","TransList","TransItem","SELECTED_TRANS_BACKGROUND","SELECTED_TRANS_BORDER","TransForm","verifiedSignatures","trans","selectedSignatures","sig","hashArr","hash","nonce","header","setHeader","target","setTarget","solution","setSolution","disableMineBtn","setDisableMineBtn","round","random","numZeros","re","RegExp","zerosStr","fill","targetHash","replace","candidateSolution","Number","MAX_SAFE_INTEGER","match","timestamp","Date","now","prevHash","currHash","UPDATE_BLOCK","newBlocks","block","isValidSolution","value","handleMine","animation","DEVICE_SIZES","Row","noGutters","_ref$as","Component","sizePrefix","forEach","brkPoint","cols","propValue","infix","apply","concat","displayName","defaultProps","isValid","Col","showTrans","handleViewTransactions","transactions","ADD_BLOCK","UPDATE_VERIFIED_TRANS","handleAddBlock"],"mappings":"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","file":"static/js/6.d29a0042.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { useAppContext } from \"../../hooks/useAppContext\";\r\nimport { ITransaction } from \"../../typings/AppTypes\";\r\nimport { calculateMerkleTreeFormation, getMerkleRoot } from \"../../utils/merkleTree\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { TransItem, TransList } from \"../../styles/TransactionStyles\";\r\nimport { StyledInputGroupText } from \"../../styles/GlobalStyles\";\r\n\r\nexport default function TransactionItems(): JSX.Element {\r\n  const { state, dispatch } = useAppContext();\r\n\r\n  async function selectTransaction(transaction: ITransaction): Promise<void> {\r\n    let selectedTrans: ITransaction[] = JSON.parse(JSON.stringify(state.selectedTrans));\r\n    const signatures = selectedTrans.map((x) => x.signature);\r\n    const included = signatures.includes(transaction.signature);\r\n\r\n    if (selectedTrans.length < 4 || included) {\r\n      // if just selected - push onto stack, else remove it\r\n      // adjust backgrounds according to selection/deselection\r\n      if (!included) {\r\n        selectedTrans.push(transaction);\r\n      } else {\r\n        selectedTrans = selectedTrans.filter((x) => x.signature !== transaction.signature);\r\n      }\r\n\r\n      const newTree = await calculateMerkleTreeFormation(state.verifiedTrans, selectedTrans);\r\n      const newPreview = {\r\n        ...state.preview,\r\n        merkleRoot: getMerkleRoot(newTree),\r\n        valid: false\r\n      };\r\n\r\n      dispatch({ type: ACTIONS.UPDATE_SELECTED_TRANS, payload: { selectedTrans } });\r\n      dispatch({ type: ACTIONS.UPDATE_PREVIEW, payload: { preview: newPreview } });\r\n    } else {\r\n      alert(\"You can mine at most 4 transactions at a time!\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <h3 aria-label=\"Title\" className=\"font-weight-bold\">\r\n        Verified Transactions\r\n      </h3>\r\n      <TransList className=\"row flex-nowrap overflow-auto bg-dark mx-1 px-2 rounded\">\r\n        {state.verifiedTrans.map((transaction) => {\r\n          const isSelected = state.selectedTrans.map((x) => x.signature).includes(transaction.signature);\r\n          return (\r\n            <ThemeProvider theme={{ selected: isSelected }} key={`sig:${transaction.signature}`}>\r\n              <TransItem\r\n                aria-label={\"Transaction Information\" + (isSelected ? \" Selected\" : \"\")}\r\n                onClick={() => selectTransaction(transaction)}\r\n              >\r\n                <Form.Group className=\"mb-2 text-center\">\r\n                  <Form.Control\r\n                    aria-label=\"Transaction From\"\r\n                    name=\"from\"\r\n                    className=\"text-truncate\"\r\n                    type=\"text\"\r\n                    defaultValue={transaction.from}\r\n                    readOnly\r\n                  />\r\n                  <h3 className=\"my-0\">↓</h3>\r\n                  <Form.Control\r\n                    aria-label=\"Transaction To\"\r\n                    name=\"to\"\r\n                    className=\"text-truncate\"\r\n                    type=\"text\"\r\n                    defaultValue={transaction.to}\r\n                    readOnly\r\n                  />\r\n                </Form.Group>\r\n\r\n                <InputGroup className=\"mb-2\">\r\n                  <InputGroup.Prepend>\r\n                    <StyledInputGroupText>Msg</StyledInputGroupText>\r\n                  </InputGroup.Prepend>\r\n                  <Form.Control\r\n                    aria-label=\"Transaction Message\"\r\n                    name=\"msg\"\r\n                    as=\"textarea\"\r\n                    defaultValue={transaction.msg}\r\n                    readOnly\r\n                  />\r\n                </InputGroup>\r\n\r\n                <InputGroup className=\"mb-2\">\r\n                  <Form.Control\r\n                    aria-label=\"Transaction Amount\"\r\n                    name=\"amount\"\r\n                    type=\"number\"\r\n                    defaultValue={transaction.amount}\r\n                    disabled\r\n                  />\r\n                  <InputGroup.Append>\r\n                    <StyledInputGroupText>LC</StyledInputGroupText>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n\r\n                <InputGroup>\r\n                  <InputGroup.Prepend>\r\n                    <StyledInputGroupText>Sig</StyledInputGroupText>\r\n                  </InputGroup.Prepend>\r\n                  <Form.Control\r\n                    aria-label=\"Transaction Signature\"\r\n                    name=\"signature\"\r\n                    className=\"text-truncate\"\r\n                    type=\"text\"\r\n                    defaultValue={transaction.signature}\r\n                    readOnly\r\n                  />\r\n                </InputGroup>\r\n              </TransItem>\r\n            </ThemeProvider>\r\n          );\r\n        })}\r\n      </TransList>\r\n    </div>\r\n  );\r\n}\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"bsPrefix\", \"className\", \"striped\", \"bordered\", \"borderless\", \"hover\", \"size\", \"variant\", \"responsive\"];\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar Table = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      striped = _ref.striped,\n      bordered = _ref.bordered,\n      borderless = _ref.borderless,\n      hover = _ref.hover,\n      size = _ref.size,\n      variant = _ref.variant,\n      responsive = _ref.responsive,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  var classes = classNames(className, decoratedBsPrefix, variant && decoratedBsPrefix + \"-\" + variant, size && decoratedBsPrefix + \"-\" + size, striped && decoratedBsPrefix + \"-striped\", bordered && decoratedBsPrefix + \"-bordered\", borderless && decoratedBsPrefix + \"-borderless\", hover && decoratedBsPrefix + \"-hover\");\n  var table = /*#__PURE__*/React.createElement(\"table\", _extends({}, props, {\n    className: classes,\n    ref: ref\n  }));\n\n  if (responsive) {\n    var responsiveClass = decoratedBsPrefix + \"-responsive\";\n\n    if (typeof responsive === 'string') {\n      responsiveClass = responsiveClass + \"-\" + responsive;\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: responsiveClass\n    }, table);\n  }\n\n  return table;\n});\nexport default Table;","import React, { useRef } from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport { useAppContext } from \"../../hooks/useAppContext\";\r\nimport { useDrawPreviewTree } from \"../../hooks/useDrawPreviewTree\";\r\nimport { IStyledTableDataProps, StyledTableData } from \"../../styles/BlockStyles\";\r\n\r\nexport default function PreviewTree(): JSX.Element {\r\n  const { state } = useAppContext();\r\n\r\n  const numCells = useRef<number>(9);\r\n  const strLen = useRef<number>(20);\r\n  const tree = useDrawPreviewTree(state.verifiedTrans, state.selectedTrans);\r\n\r\n  // https://stackoverflow.com/a/1199420/4298115\r\n  function truncate(str: string, n = strLen.current): string {\r\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n  }\r\n\r\n  function getText(rowNum: number, index: number, isTitle: boolean): string {\r\n    let text = \"\";\r\n\r\n    switch (rowNum) {\r\n      case 0: {\r\n        if (index === Math.floor(numCells.current / 2)) {\r\n          text = isTitle ? tree[tree.length - 1][0] : truncate(tree[tree.length - 1][0]);\r\n        }\r\n        break;\r\n      }\r\n\r\n      case 1: {\r\n        if (index === numCells.current / 3 - 1) {\r\n          text = isTitle ? tree[tree.length - 2][0] : truncate(tree[tree.length - 2][0]);\r\n        } else if (index === (numCells.current / 3) * 2) {\r\n          text = isTitle ? tree[tree.length - 2][1] : truncate(tree[tree.length - 2][1]);\r\n        }\r\n        break;\r\n      }\r\n\r\n      case 2: {\r\n        if (index === 0) {\r\n          text = isTitle ? tree[0][0] : truncate(tree[0][0]);\r\n        } else if (index === numCells.current / 3 - 1) {\r\n          text = isTitle ? tree[0][1] : truncate(tree[0][1]);\r\n        } else if (index === (numCells.current / 3) * 2) {\r\n          text = isTitle ? tree[0][2] : truncate(tree[0][2]);\r\n        } else if (index === numCells.current - 1) {\r\n          text = isTitle ? tree[0][3] : truncate(tree[0][3]);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // no default\r\n    }\r\n\r\n    return text;\r\n  }\r\n\r\n  function getClassName(rowNum: number, index: number): IStyledTableDataProps {\r\n    let type = {\r\n      rootCell: false,\r\n      middleCells: false,\r\n      dataCells: false,\r\n      diagRightLine: false,\r\n      diagLeftLine: false,\r\n      normalLine: false\r\n    };\r\n\r\n    switch (rowNum) {\r\n      case 0:\r\n        type = { ...type, rootCell: index === Math.floor(numCells.current / 2) };\r\n        break;\r\n\r\n      case 1: {\r\n        type = { ...type, diagLeftLine: index === numCells.current / 3 };\r\n        type = { ...type, diagRightLine: index === (2 * numCells.current) / 3 - 1 };\r\n        break;\r\n      }\r\n\r\n      case 2: {\r\n        const isCorrectColumn = [numCells.current / 3 - 1, (2 * numCells.current) / 3].includes(index);\r\n        type = { ...type, dataCells: isCorrectColumn && tree.length <= 2 };\r\n        type = { ...type, middleCells: isCorrectColumn && tree.length > 2 };\r\n        break;\r\n      }\r\n\r\n      case 3: {\r\n        type = { ...type, diagLeftLine: index === 1 };\r\n        type = { ...type, diagRightLine: index === numCells.current - 2 && tree[0].length === 4 };\r\n        type = { ...type, normalLine: [numCells.current / 3 - 1, (numCells.current / 3) * 2].includes(index) };\r\n        break;\r\n      }\r\n\r\n      case 4: {\r\n        const isCorrectColumn = [0, numCells.current / 3 - 1, (numCells.current / 3) * 2].includes(index);\r\n        type = { ...type, dataCells: isCorrectColumn || (numCells.current - 1 === index && tree[0].length === 4) };\r\n        break;\r\n      }\r\n\r\n      // no default\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-100 my-3 text-center\">\r\n      <h3 className=\"font-weight-bold\">Merkle Tree Visualization</h3>\r\n      {tree[tree.length - 1][0] !== \"\" ? (\r\n        <Table\r\n          role=\"grid\"\r\n          aria-label=\"Preview Table\"\r\n          className=\"w-75 mx-auto my-1 text-center border\"\r\n          responsive\r\n          size=\"sm\"\r\n        >\r\n          <tbody role=\"presentation\">\r\n            <tr>\r\n              {Array.from({ length: numCells.current }).map((_, i) => (\r\n                <StyledTableData key={\"first-data-row-\" + i} type={getClassName(0, i)} title={getText(0, i, true)}>\r\n                  {getText(0, i, false)}\r\n                </StyledTableData>\r\n              ))}\r\n            </tr>\r\n            {tree.length >= 2 && (\r\n              <>\r\n                <tr>\r\n                  {Array.from({ length: numCells.current }).map((_, i) => (\r\n                    <StyledTableData key={\"first-break-row-\" + i} type={getClassName(1, i)} />\r\n                  ))}\r\n                </tr>\r\n                <tr>\r\n                  {Array.from({ length: numCells.current }).map((_, i) => (\r\n                    <StyledTableData key={\"second-data-row-\" + i} type={getClassName(2, i)} title={getText(1, i, true)}>\r\n                      {getText(1, i, false)}\r\n                    </StyledTableData>\r\n                  ))}\r\n                </tr>\r\n              </>\r\n            )}\r\n            {tree.length === 3 && (\r\n              <>\r\n                <tr>\r\n                  {Array.from({ length: numCells.current }).map((_, i) => (\r\n                    <StyledTableData key={\"second-break-row-\" + i} type={getClassName(3, i)} />\r\n                  ))}\r\n                </tr>\r\n                <tr>\r\n                  {Array.from({ length: numCells.current }).map((_, i) => (\r\n                    <StyledTableData key={\"third-data-row-\" + i} type={getClassName(4, i)} title={getText(2, i, true)}>\r\n                      {getText(2, i, false)}\r\n                    </StyledTableData>\r\n                  ))}\r\n                </tr>\r\n              </>\r\n            )}\r\n          </tbody>\r\n        </Table>\r\n      ) : (\r\n        <p className=\"my-3 border w-75 mx-auto\">Please select a verified transaction from above...</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { ITransaction } from \"../typings/AppTypes\";\r\nimport { calculateMerkleTreeFormation } from \"../utils/merkleTree\";\r\n\r\nexport function useDrawPreviewTree(verified: ITransaction[], selected: ITransaction[]): string[][] {\r\n  const [tree, setTree] = useState<string[][]>([[\"\"]]);\r\n\r\n  useEffect(() => {\r\n    async function drawTree() {\r\n      const newTree = await calculateMerkleTreeFormation(verified, selected);\r\n      setTree(newTree);\r\n    }\r\n\r\n    drawTree();\r\n  }, [verified, selected]);\r\n\r\n  return tree;\r\n}\r\n","import React from \"react\";\r\n\r\nimport TransactionItems from \"../components/Transaction/TransactionItems\";\r\nimport PreviewTree from \"../components/Block/PreviewTree\";\r\nimport Statistics from \"../components/Block/Statistics\";\r\nimport Block from \"../components/Block/Block\";\r\n\r\nexport default function Mine(): JSX.Element {\r\n  return (\r\n    <React.Fragment>\r\n      <TransactionItems />\r\n\r\n      <div className=\"container-fluid row d-flex justify-content-center mx-auto my-3\">\r\n        <PreviewTree />\r\n        <Statistics chain={false} index={0} />\r\n        <Block chain={false} index={0} />\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { AppContext } from \"../context/AppContext\";\r\nimport { IAction, IState } from \"../typings/AppTypes\";\r\n\r\ninterface IAppContext {\r\n  state: IState;\r\n  dispatch: React.Dispatch<IAction>;\r\n}\r\n\r\nexport function useAppContext(): IAppContext {\r\n  const { state, dispatch } = useContext(AppContext) as IAppContext;\r\n  return { state, dispatch };\r\n}\r\n","export enum COLORS {\r\n  DEFAULT_BACKGROUND = \"#fff\",\r\n\r\n  DARK_BACKGROUND = \"#1f1f1f\",\r\n\r\n  VALID_BACKGROUND = \"#b4ff9a\",\r\n  INVALID_BACKGROUND = \"#ff9a9a\",\r\n  VALID_SOLUTION = \"#008000\",\r\n  INVALID_SOLUTION = \"#f00\",\r\n\r\n  NAVBAR_BACKGROUND = \"#eee\",\r\n  NAV_LINK_UNDERSCORE = \"#8ac0ff\",\r\n  NAV_TEXT = \"#000\",\r\n\r\n  SELECTED_TRANS_BACKGROUND = \"#dfd\",\r\n  SELECTED_TRANS_BORDER = \"#090\",\r\n\r\n  ROOT_CELL = \"#4f9249\",\r\n  MIDDLE_CELLS = \"#cf8b31\",\r\n  DATA_CELLS = \"#7d95ff\",\r\n  PREVIEW_LINES = \"#777\"\r\n}\r\n","import { TextEncoder } from \"text-encoding\";\r\n\r\nexport function bufferToHex(hashBuffer: ArrayBuffer): string {\r\n  const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\r\n  const hashHex = hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\"); // convert bytes to hex string\r\n  return hashHex;\r\n}\r\n\r\nexport async function CryptoKeyToHex(format: string, key: CryptoKey): Promise<string> {\r\n  const buf = (await window.crypto.subtle.exportKey(format, key)) as ArrayBuffer;\r\n  return bufferToHex(buf);\r\n}\r\n\r\nexport async function digestMessage(message: string): Promise<string> {\r\n  const msgUint8 = new TextEncoder().encode(message); // encode as (utf-8) Uint8Array\r\n  const hashBuffer = await window.crypto.subtle.digest(\"SHA-256\", msgUint8); // hash the message\r\n  return bufferToHex(hashBuffer);\r\n}\r\n\r\nexport function randomHash(len: number): string {\r\n  return bufferToHex(window.crypto.getRandomValues(new Uint32Array(len)));\r\n}\r\n","import { Button, Form, InputGroup } from \"react-bootstrap\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { COLORS } from \"../enums/ColorPallet\";\r\nimport { DEVICES } from \"../enums/Breakpoints\";\r\n\r\nexport interface IStyledTableDataProps {\r\n  rootCell: boolean;\r\n  middleCells: boolean;\r\n  dataCells: boolean;\r\n  diagRightLine: boolean;\r\n  diagLeftLine: boolean;\r\n  normalLine: boolean;\r\n}\r\n\r\nconst GradientLine = (dir: string) => {\r\n  return `linear-gradient(${dir}, transparent calc(50% - 1px), ${COLORS.PREVIEW_LINES}, transparent calc(50% + 1px));`;\r\n};\r\n\r\nexport const StyledTableData = styled.td`\r\n  width: 11%;\r\n  height: 35px;\r\n  color: ${COLORS.DEFAULT_BACKGROUND};\r\n\r\n  /* increase the specificity to avoid using !important */\r\n  &&& {\r\n    border-top: none;\r\n  }\r\n\r\n  /* stylelint-disable */\r\n  background: ${({ type }: { type: IStyledTableDataProps }) =>\r\n    type.rootCell\r\n      ? COLORS.ROOT_CELL\r\n      : type.middleCells\r\n      ? COLORS.MIDDLE_CELLS\r\n      : type.dataCells\r\n      ? COLORS.DATA_CELLS\r\n      : type.diagRightLine\r\n      ? GradientLine(\"to top right\")\r\n      : type.diagLeftLine\r\n      ? GradientLine(\"to top left\")\r\n      : type.normalLine\r\n      ? GradientLine(\"to left\")\r\n      : COLORS.DEFAULT_BACKGROUND};\r\n  /* stylelint-enable */\r\n`;\r\n\r\nexport const StyledInput = styled(Form.Control)`\r\n  color: ${(props) => (props.theme.valid ? COLORS.VALID_SOLUTION : COLORS.INVALID_SOLUTION)};\r\n`;\r\n\r\nexport const StyledBlockForm = styled(Form)`\r\n  background-color: ${(props) => (props.theme.valid ? COLORS.VALID_BACKGROUND : COLORS.INVALID_BACKGROUND)};\r\n`;\r\n\r\nexport const RevealBlockTransText = styled(InputGroup.Text)`\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport const BlockContainer = styled.div`\r\n  width: 20rem;\r\n  height: fit-content;\r\n  padding: 8px;\r\n  border-radius: 4px;\r\n  background: ${COLORS.DARK_BACKGROUND};\r\n`;\r\n\r\nexport const StyledButton = styled(Button)`\r\n  height: 100%;\r\n\r\n  @media only screen and (${DEVICES.xs}) {\r\n    height: 85%;\r\n  }\r\n`;\r\n","// https://www.w3schools.com/css/css_rwd_mediaqueries.asp\r\n\r\nexport enum SIZES {\r\n  xs = \"600px\",\r\n  sm = \"600px\",\r\n  md = \"768px\",\r\n  lg = \"992px\",\r\n  xl = \"1200px\"\r\n}\r\n\r\nexport enum DEVICES {\r\n  xs = \"max-width: \" + SIZES.xs,\r\n  sm = \"min-width: \" + SIZES.sm,\r\n  md = \"min-width: \" + SIZES.md,\r\n  lg = \"min-width: \" + SIZES.lg,\r\n  xl = \"min-width: \" + SIZES.xl\r\n}\r\n","import { Form } from \"react-bootstrap\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nimport { COLORS } from \"../enums/ColorPallet\";\r\n\r\n// create a \"mixin\"\r\nconst Transaction = (margin: string, padding: string, borderRadius: string, border: string) => css`\r\n  margin: ${margin};\r\n  padding: ${padding};\r\n  border-radius: ${borderRadius};\r\n  border: ${border};\r\n`;\r\n\r\nexport const TransList = styled.div`\r\n  min-height: 18rem;\r\n`;\r\n\r\nexport const TransItem = styled(Form)`\r\n  ${Transaction(\"0.5rem\", \"0.5em\", \"5px\", \"2px solid transparent\")}; /* stylelint-disable-line */\r\n  min-width: 14rem;\r\n  background-color: ${(props) => (props.theme.selected ? COLORS.SELECTED_TRANS_BACKGROUND : COLORS.DEFAULT_BACKGROUND)};\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    border: 2px solid ${COLORS.SELECTED_TRANS_BORDER};\r\n  }\r\n`;\r\n\r\nexport const TransForm = styled(Form)`\r\n  ${Transaction(\"0 1rem\", \"1em\", \"6px\", \"1px solid black\")}; /* stylelint-disable-line */\r\n  background-color: ${COLORS.DARK_BACKGROUND};\r\n`;\r\n","import { ITransaction } from \"../typings/AppTypes\";\r\nimport { digestMessage } from \"./conversion\";\r\n\r\nexport async function calculateMerkleTreeFormation(\r\n  verifiedTrans: ITransaction[],\r\n  selectedTrans: ITransaction[]\r\n): Promise<string[][]> {\r\n  let tree = [[\"\"]];\r\n  if (selectedTrans.length > 0) {\r\n    // need to make sure node's in tree appear in same order as in the verified transaction pane, regardless of selection order\r\n    const verifiedSignatures = verifiedTrans.map((trans) => trans.signature);\r\n    const selectedSignatures = selectedTrans.map((trans) => trans.signature);\r\n    let signatures = verifiedSignatures.filter((sig) => selectedSignatures.includes(sig));\r\n    tree = [signatures];\r\n\r\n    while (signatures.length !== 1) {\r\n      const hashArr = [] as string[];\r\n      for (let i = 0; i < signatures.length; i += 2) {\r\n        const hash = signatures[i + 1] ? await digestMessage(signatures[i] + signatures[i + 1]) : signatures[i];\r\n        hashArr.push(hash);\r\n      }\r\n\r\n      signatures = hashArr;\r\n      tree.push(hashArr);\r\n    }\r\n  }\r\n\r\n  return tree;\r\n}\r\n\r\nexport function getMerkleRoot(tree: string[][]): string {\r\n  return tree[tree.length - 1][0];\r\n}\r\n\r\nexport function flattenTree(tree: string[][]): string[] {\r\n  let flatTree = [] as string[];\r\n  // need to reverse each tree row so that printing produces the right order!\r\n  for (let i = 0; i < tree.length; i++) {\r\n    flatTree = flatTree.concat(tree[i].reverse());\r\n  }\r\n\r\n  return flatTree;\r\n}\r\n","import React, { useState, useRef } from \"react\";\r\nimport { Button, Form, InputGroup, Spinner } from \"react-bootstrap\";\r\n\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { useAppContext } from \"../../hooks/useAppContext\";\r\nimport { IBlock } from \"../../typings/AppTypes\";\r\nimport { digestMessage, randomHash } from \"../../utils/conversion\";\r\n\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { StyledInput } from \"../../styles/BlockStyles\";\r\nimport { StyledInputGroupText } from \"../../styles/GlobalStyles\";\r\ninterface IStatisticsProps {\r\n  chain: boolean;\r\n  index: number;\r\n}\r\n\r\nexport default function Statistics(props: IStatisticsProps): JSX.Element {\r\n  const { state, dispatch } = useAppContext();\r\n\r\n  const nonce = useRef<number>(0);\r\n  const [header, setHeader] = useState<number>(0);\r\n  const [target, setTarget] = useState<string>(\"\");\r\n  const [solution, setSolution] = useState<string>(\"\");\r\n  const [disableMineBtn, setDisableMineBtn] = useState<boolean>(false);\r\n\r\n  async function handleMine() {\r\n    const { chain, index } = props;\r\n\r\n    setDisableMineBtn(true);\r\n    nonce.current = Math.round(Math.random() * 1e6);\r\n\r\n    // make target with 2 or 3 leading zeros\r\n    const numZeros = Math.round(Math.random()) + 2;\r\n    const re = new RegExp(`^.{0,${numZeros}}`, \"g\");\r\n    const zerosStr = new Array(numZeros).fill(\"0\").join(\"\");\r\n    let targetHash = await digestMessage(randomHash(20));\r\n    targetHash = targetHash.replace(re, zerosStr);\r\n    setTarget(targetHash);\r\n\r\n    // mine block for a new current hash (solution)\r\n    let candidateSolution = \"\";\r\n    let header = nonce.current;\r\n    while (header <= Number.MAX_SAFE_INTEGER) {\r\n      candidateSolution = await digestMessage(header.toString());\r\n      setSolution(candidateSolution);\r\n      setHeader(header++);\r\n\r\n      const re = new RegExp(`^0{${numZeros}}`); // exactly numZeros 0 characters at start of string\r\n      if (candidateSolution.match(re)) break;\r\n    }\r\n    setDisableMineBtn(false);\r\n\r\n    const timestamp = Date.now();\r\n    const payload = {\r\n      [!chain ? \"preview\" : \"block\"]: {\r\n        ...(!chain ? state.preview : state.chain[index]),\r\n        timestamp,\r\n        prevHash: state.chain[(!chain ? state.preview.index : index) - 1].currHash,\r\n        currHash: candidateSolution,\r\n        valid: candidateSolution <= targetHash\r\n      }\r\n    };\r\n\r\n    const type = !chain ? ACTIONS.UPDATE_PREVIEW : ACTIONS.UPDATE_BLOCK;\r\n    dispatch({ type, payload });\r\n\r\n    // propagate changes to next blocks if in blockchain mode and mined block is not last\r\n    if (chain) {\r\n      const newBlocks: IBlock[] = [];\r\n      let prevHash = candidateSolution;\r\n      let currHash = \"\";\r\n      for (let i = index + 1; i < state.chain.length; i++) {\r\n        currHash = await digestMessage(i + prevHash + state.chain[i].merkleRoot);\r\n        newBlocks.push({ ...state.chain[i], timestamp, prevHash, currHash, valid: false });\r\n        prevHash = currHash; // next block's prevHash is this block's currHash\r\n      }\r\n\r\n      if (newBlocks.length) {\r\n        dispatch({ type: ACTIONS.UPDATE_BLOCK, payload: { block: newBlocks } });\r\n      }\r\n    }\r\n  }\r\n\r\n  const isValidSolution = (props.chain && state.chain[props.index].valid) || (!props.chain && state.preview.valid);\r\n\r\n  return (\r\n    <Form\r\n      aria-label=\"Block Statistics\"\r\n      className={props.chain ? \"mt-3\" : \"col-11 col-lg-5 mx-3 mb-2 mb-lg-0 bg-dark px-2 pb-2 rounded\"}\r\n    >\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <StyledInputGroupText>Nonce</StyledInputGroupText>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Block Nonce\"\r\n          name=\"nonce\"\r\n          type=\"number\"\r\n          key={nonce.current}\r\n          defaultValue={nonce.current}\r\n          disabled\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <StyledInputGroupText>Header</StyledInputGroupText>\r\n        </InputGroup.Prepend>\r\n        <Form.Control aria-label=\"Block Header\" name=\"header\" type=\"number\" value={header} disabled />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <StyledInputGroupText>Target</StyledInputGroupText>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Block Target\"\r\n          name=\"target\"\r\n          className=\"text-truncate\"\r\n          type=\"text\"\r\n          value={target}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <StyledInputGroupText>Sol&apos;n</StyledInputGroupText>\r\n        </InputGroup.Prepend>\r\n        <ThemeProvider theme={{ valid: isValidSolution }}>\r\n          <StyledInput\r\n            aria-label={\"Block Solution\" + (isValidSolution ? \"\" : \" Invalid\")}\r\n            name=\"solution\"\r\n            className=\"text-truncate\"\r\n            type=\"text\"\r\n            value={solution}\r\n            readOnly\r\n          />\r\n        </ThemeProvider>\r\n      </InputGroup>\r\n\r\n      <Button\r\n        aria-label=\"Block Mine\"\r\n        variant=\"primary\"\r\n        className=\"btn-block p-1\"\r\n        disabled={\r\n          (props.chain && state.chain[props.index].valid) ||\r\n          (!props.chain && (state.preview.valid || state.selectedTrans.length === 0)) ||\r\n          disableMineBtn\r\n        }\r\n        onClick={() => handleMine()}\r\n      >\r\n        <h4 className=\"my-0 row justify-content-end align-items-center flex-nowrap\">\r\n          <span className=\"col-10 pl-5\">Mine</span>\r\n          <Spinner className={\"mr-3 \" + (disableMineBtn ? \"visible\" : \"invisible\")} animation=\"border\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n          </Spinner>\r\n        </h4>\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"bsPrefix\", \"className\", \"noGutters\", \"as\"];\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar DEVICE_SIZES = ['xl', 'lg', 'md', 'sm', 'xs'];\nvar defaultProps = {\n  noGutters: false\n};\nvar Row = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      noGutters = _ref.noGutters,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  var sizePrefix = decoratedBsPrefix + \"-cols\";\n  var classes = [];\n  DEVICE_SIZES.forEach(function (brkPoint) {\n    var propValue = props[brkPoint];\n    delete props[brkPoint];\n    var cols;\n\n    if (propValue != null && typeof propValue === 'object') {\n      cols = propValue.cols;\n    } else {\n      cols = propValue;\n    }\n\n    var infix = brkPoint !== 'xs' ? \"-\" + brkPoint : '';\n    if (cols != null) classes.push(\"\" + sizePrefix + infix + \"-\" + cols);\n  });\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames.apply(void 0, [className, decoratedBsPrefix, noGutters && 'no-gutters'].concat(classes))\n  }));\n});\nRow.displayName = 'Row';\nRow.defaultProps = defaultProps;\nexport default Row;","import React from \"react\";\r\nimport { Col, Form, InputGroup, Row } from \"react-bootstrap\";\r\n\r\nimport { useAppContext } from \"../../hooks/useAppContext\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\n\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { RevealBlockTransText, StyledBlockForm, StyledButton } from \"../../styles/BlockStyles\";\r\nimport { StyledInputGroupText } from \"../../styles/GlobalStyles\";\r\n\r\nexport interface IBlockProps {\r\n  chain: boolean;\r\n  index: number;\r\n}\r\n\r\nexport default function Block({ chain, index }: IBlockProps): JSX.Element {\r\n  const { state, dispatch } = useAppContext();\r\n\r\n  function handleAddBlock() {\r\n    // this only happens on the mining page so can use state.preview.index here\r\n\r\n    const block = {\r\n      ...state.preview,\r\n      transactions: state.selectedTrans,\r\n      valid: state.chain[state.preview.index - 1].valid, // validity depends on previous block\r\n      showTrans: false\r\n    };\r\n\r\n    const preview = {\r\n      timestamp: Date.now(),\r\n      index: state.preview.index + 1,\r\n      prevHash: state.preview.currHash,\r\n      currHash: \"\",\r\n      merkleRoot: \"\",\r\n      valid: false\r\n    };\r\n\r\n    // add the block, update verified transactions, clear selected transactions, update preview\r\n    dispatch({ type: ACTIONS.ADD_BLOCK, payload: { block } });\r\n    dispatch({ type: ACTIONS.UPDATE_VERIFIED_TRANS });\r\n    dispatch({ type: ACTIONS.UPDATE_SELECTED_TRANS, payload: { selectedTrans: [] } });\r\n    dispatch({ type: ACTIONS.UPDATE_PREVIEW, payload: { preview } });\r\n  }\r\n\r\n  function handleViewTransactions(): void {\r\n    const block = state.chain[index];\r\n    dispatch({ type: ACTIONS.UPDATE_BLOCK, payload: { block: { ...block, showTrans: !block.showTrans } } });\r\n  }\r\n\r\n  const isValid = (chain && state.chain[index].valid) || (!chain && state.preview.valid);\r\n  return (\r\n    <ThemeProvider theme={{ valid: isValid }}>\r\n      <StyledBlockForm\r\n        aria-label={\"Block Form\" + (isValid ? \"\" : \" Invalid\")}\r\n        className={(chain ? \"\" : \"col-11 col-lg-5 \") + \"p-2 rounded\"}\r\n      >\r\n        <Row>\r\n          <Col lg={!chain && state.preview.valid ? 9 : 12}>\r\n            <InputGroup className=\"mb-2\">\r\n              <InputGroup.Prepend>\r\n                <StyledInputGroupText>Index</StyledInputGroupText>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                aria-label=\"Block Index\"\r\n                name=\"index\"\r\n                type=\"number\"\r\n                value={chain ? index : state.preview.index}\r\n                disabled\r\n              />\r\n            </InputGroup>\r\n\r\n            <InputGroup className=\"my-2\">\r\n              <InputGroup.Prepend>\r\n                <StyledInputGroupText>Timestamp</StyledInputGroupText>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                aria-label=\"Block Timestamp\"\r\n                name=\"timestamp\"\r\n                type=\"number\"\r\n                value={chain ? state.chain[index].timestamp : state.preview.timestamp}\r\n                disabled\r\n              />\r\n            </InputGroup>\r\n\r\n            <InputGroup className=\"my-2\">\r\n              <InputGroup.Prepend>\r\n                <StyledInputGroupText>Previous #</StyledInputGroupText>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                aria-label=\"Block PrevHash\"\r\n                name=\"prevHash\"\r\n                className=\"text-truncate\"\r\n                type=\"text\"\r\n                value={chain && index > 0 ? state.chain[index - 1].currHash : chain ? \"\" : state.preview.prevHash}\r\n                readOnly\r\n              />\r\n            </InputGroup>\r\n\r\n            <InputGroup className=\"my-2\">\r\n              <InputGroup.Prepend>\r\n                <StyledInputGroupText>Current #</StyledInputGroupText>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                aria-label=\"Block CurrHash\"\r\n                name=\"currHash\"\r\n                className=\"text-truncate\"\r\n                type=\"text\"\r\n                value={chain ? state.chain[index].currHash : state.preview.currHash}\r\n                readOnly\r\n              />\r\n            </InputGroup>\r\n\r\n            <InputGroup className=\"mt-2\">\r\n              <InputGroup.Prepend>\r\n                <StyledInputGroupText>Merkle #</StyledInputGroupText>\r\n              </InputGroup.Prepend>\r\n              {chain && index === 0 ? (\r\n                <Form.Control\r\n                  aria-label=\"Block Merkle Genesis\"\r\n                  name=\"merkleRoot\"\r\n                  type=\"text\"\r\n                  defaultValue=\"\"\r\n                  disabled\r\n                />\r\n              ) : (\r\n                <React.Fragment>\r\n                  <Form.Control\r\n                    aria-label=\"Block Merkle\"\r\n                    name=\"merkleRoot\"\r\n                    className=\"text-truncate\"\r\n                    type=\"text\"\r\n                    value={chain ? state.chain[index].merkleRoot : state.preview.merkleRoot}\r\n                    readOnly\r\n                  />\r\n                  {chain && (\r\n                    <InputGroup.Append>\r\n                      <RevealBlockTransText aria-label=\"Show Trans\" onClick={() => handleViewTransactions()}>\r\n                        {state.chain[index].showTrans ? \"🙈\" : \"🙉\"}\r\n                      </RevealBlockTransText>\r\n                    </InputGroup.Append>\r\n                  )}\r\n                </React.Fragment>\r\n              )}\r\n            </InputGroup>\r\n          </Col>\r\n          <Col lg={!chain && state.preview.valid ? 3 : 0}>\r\n            {!chain && state.preview.valid && (\r\n              <StyledButton\r\n                aria-label=\"Add Block\"\r\n                className=\"mt-2 mt-lg-0\"\r\n                variant=\"success\"\r\n                block\r\n                onClick={() => handleAddBlock()}\r\n              >\r\n                <h4 className=\"my-0\">Add Block</h4>\r\n              </StyledButton>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </StyledBlockForm>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n"],"sourceRoot":""}