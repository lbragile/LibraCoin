{"version":3,"sources":["components/NavMenu/NavMenu.tsx","enums/AppDispatchActions.ts","context/AppContext.ts","utils/copyInput.ts","utils/conversion.ts","components/User/KeyGeneration.tsx","components/User/UserItems.tsx","schema/SignSchema.ts","utils/numberManipulation.ts","components/Transaction/Sign.tsx","components/Transaction/Send.tsx","pages/Wallet.tsx","components/Block/Block.tsx","utils/merkleTree.ts","components/Block/BlockTrans.tsx","components/Block/Statistics.tsx","pages/Chain.tsx","components/Transaction/TransactionItems.tsx","components/Block/PreviewTree.tsx","pages/Mine.tsx","reducers/AppReducer.ts","components/App/App.tsx","index.tsx"],"names":["NavMenu","Navbar","expand","className","Brand","aria-label","href","src","alt","width","Toggle","aria-controls","Collapse","id","Nav","Link","active","location","includes","ACTIONS","AppContext","React","createContext","undefined","copyInput","target","assignName","dispatch","value","blur","select","document","execCommand","type","ASSIGN_COPIED","payload","copied","removeCopied","bufferToHex","hashBuffer","Array","from","Uint8Array","map","b","toString","padStart","join","CryptoKeyToHex","format","key","a","window","crypto","subtle","exportKey","buf","digestMessage","message","msgUint8","TextEncoder","encode","digest","randomHash","len","getRandomValues","Uint32Array","KeyGeneration","useContext","state","numRows","useRef","useState","show","setShow","useEffect","user","privateKey","generateKey","name","namedCurve","publicKey","publicKeyStr","privateKeyStr","balance","Number","toFixed","mainUser","SET_MAIN_USER","newUsers","users","UPDATE_USERS","addUser","InputGroup","Prepend","Text","Form","Control","as","rows","current","isValid","onFocus","e","onBlur","readOnly","Feedback","length","fill","Append","onClick","UserItems","i","defaultValue","disabled","minVal","min","decimalFormat","num","Math","floor","split","SignSchema","lenPK","yup","shape","to","obj","diff","max","matches","RegExp","required","amount","test","x","replace","msg","optional","Sign","SET_VALIDATED","validated","SET_SIGNED","signed","sent","SET_DETAILS","details","signature","TextAreaFormControl","props","validationSchema","onSubmit","data","setSubmitting","Object","values","reduce","total","curr","currentDetails","initialValues","handleSubmit","isSubmitting","touched","errors","noValidate","wallet","isInvalid","render","errorMessage","role","step","placeholder","Button","variant","block","Send","preventDefault","ADD_VERIFIED_TRANS","trans","Wallet","Block","chain","index","valid","preview","timestamp","currHash","prevHash","Fragment","merkleRoot","UPDATE_BLOCK","showTrans","handleViewTransactions","transactions","selectedTrans","Date","now","ADD_BLOCK","UPDATE_VERIFIED_TRANS","UPDATE_SELECTED_TRANS","UPDATE_PREVIEW","handleAddBlock","calculateMerkleTreeFormation","verifiedTrans","tree","verifiedSignatures","selectedSignatures","signatures","filter","sig","hashArr","hash","push","getMerkleRoot","BlockTrans","transDetails","setTransDetails","calculateNewMerkleRoot","newVal","newTrans","JSON","parse","stringify","newTree","newRoot","newBlocks","transaction","Group","onChange","Statistics","nonce","header","setHeader","setTarget","solution","setSolution","disableMineBtn","setDisableMineBtn","round","random","numZeros","re","zerosStr","targetHash","candidateSolution","MAX_SAFE_INTEGER","match","handleMine","Chain","TransactionItems","included","newPreview","alert","selectTransaction","PreviewTree","numCells","strLen","setTree","truncate","str","n","substr","getText","rowNum","isTitle","text","getClassName","isCorrectColumn","drawTree","Table","responsive","size","_","title","Mine","AppReducer","action","localStorage","setItem","selectedTransSignatures","blocks","isArray","forEach","newSent","App","useReducer","getItem","useMemo","basename","Provider","exact","path","component","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.272641a7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\n\r\nimport \"./NavMenu.scss\";\r\n\r\nexport default function NavMenu(): JSX.Element {\r\n  return (\r\n    <Navbar expand=\"lg\" className=\"mb-3\">\r\n      <Navbar.Brand aria-label=\"LibraCoin Logo\" href=\"https://github.com/lbragile/LibraCoin\">\r\n        <img src=\"./assets/libracoin-logo-256.png\" alt=\"LibraCoin Logo\" width=\"64\" />\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"ml-auto\">\r\n          <Nav.Link href=\"/LibraCoin/wallet\" active={location.href.includes(\"/wallet\")}>\r\n            Wallet\r\n          </Nav.Link>\r\n          <Nav.Link href=\"/LibraCoin/mine\" active={location.href.includes(\"/mine\")}>\r\n            Mine\r\n          </Nav.Link>\r\n          <Nav.Link href=\"/LibraCoin/blockchain\" active={location.href.includes(\"/blockchain\")}>\r\n            Blockchain\r\n          </Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\n","export enum ACTIONS {\r\n  ADD_VERIFIED_TRANS = \"ADD_VERIFIED_TRANS\",\r\n  UPDATE_VERIFIED_TRANS = \"UPDATE_VERIFIED_TRANS\",\r\n  UPDATE_SELECTED_TRANS = \"UPDATE_SELECTED_TRANS\",\r\n  UPDATE_USERS = \"UPDATE_USERS\",\r\n  SET_MAIN_USER = \"SET_MAIN_USER\",\r\n  ADD_BLOCK = \"ADD_BLOCK\",\r\n  UPDATE_BLOCK = \"UPDATE_BLOCK\",\r\n  UPDATE_PREVIEW = \"UPDATE_PREVIEW\",\r\n  ASSIGN_COPIED = \"ASSIGN_COPIED\",\r\n  SET_SIGNED = \"SET_SIGNED\",\r\n  SET_VALIDATED = \"SET_VALIDATED\",\r\n  SET_DETAILS = \"SET_DETAILS\"\r\n}\r\n","import React from \"react\";\r\nimport { IAction, IState } from \"../typings/AppTypes\";\r\n\r\ntype TAppContext = { state: IState; dispatch: React.Dispatch<IAction> } | undefined;\r\n\r\nexport const AppContext = React.createContext<TAppContext>(undefined);\r\n","import React from \"react\";\r\nimport { ACTIONS } from \"../enums/AppDispatchActions\";\r\nimport { IAction } from \"../typings/AppTypes\";\r\n\r\nexport function copyInput(\r\n  target: HTMLTextAreaElement | HTMLInputElement,\r\n  assignName: string,\r\n  dispatch: React.Dispatch<IAction>\r\n): void {\r\n  if (!target.value.includes(\"◦\")) {\r\n    target.select();\r\n    document.execCommand(\"copy\");\r\n    dispatch({ type: ACTIONS.ASSIGN_COPIED, payload: { copied: assignName } });\r\n  } else {\r\n    target.blur();\r\n  }\r\n}\r\n\r\nexport function removeCopied(dispatch: React.Dispatch<IAction>): void {\r\n  dispatch({ type: ACTIONS.ASSIGN_COPIED, payload: { copied: \"\" } });\r\n}\r\n","import { TextEncoder } from \"text-encoding\";\r\n\r\nexport function bufferToHex(hashBuffer: ArrayBuffer): string {\r\n  const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\r\n  const hashHex = hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\"); // convert bytes to hex string\r\n  return hashHex;\r\n}\r\n\r\nexport async function CryptoKeyToHex(format: string, key: CryptoKey): Promise<string> {\r\n  const buf = (await window.crypto.subtle.exportKey(format, key)) as ArrayBuffer;\r\n  return bufferToHex(buf);\r\n}\r\n\r\nexport async function digestMessage(message: string): Promise<string> {\r\n  const msgUint8 = new TextEncoder().encode(message); // encode as (utf-8) Uint8Array\r\n  const hashBuffer = await window.crypto.subtle.digest(\"SHA-256\", msgUint8); // hash the message\r\n  return bufferToHex(hashBuffer);\r\n}\r\n\r\nexport function randomHash(len: number): string {\r\n  return bufferToHex(window.crypto.getRandomValues(new Uint32Array(len)));\r\n}\r\n","import React, { useRef, useState, useContext, useEffect } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\n\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState } from \"../../typings/AppTypes\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { copyInput, removeCopied } from \"../../utils/copyInput\";\r\nimport { CryptoKeyToHex } from \"../../utils/conversion\";\r\n\r\nimport \"./User.scss\";\r\n\r\nexport default function KeyGeneration(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const numRows = useRef(4);\r\n  const [show, setShow] = useState<boolean>(false);\r\n\r\n  // add a user if it's the first time visiting\r\n  useEffect(() => {\r\n    async function addUser(): Promise<void> {\r\n      if (state.user.privateKey === \"\") {\r\n        const { publicKey, privateKey } = await window.crypto.subtle.generateKey(\r\n          { name: \"ECDSA\", namedCurve: \"P-256\" },\r\n          true,\r\n          [\"sign\", \"verify\"]\r\n        );\r\n\r\n        const publicKeyStr = await CryptoKeyToHex(\"spki\", publicKey as CryptoKey);\r\n        const privateKeyStr = await CryptoKeyToHex(\"pkcs8\", privateKey as CryptoKey);\r\n\r\n        const balance = Number(1000).toFixed(2);\r\n        const mainUser = { publicKey: publicKeyStr, privateKey: privateKeyStr, balance };\r\n        dispatch({ type: ACTIONS.SET_MAIN_USER, payload: { user: mainUser } });\r\n\r\n        const newUsers = [...state.users, { publicKey: publicKeyStr, balance }];\r\n        dispatch({ type: ACTIONS.UPDATE_USERS, payload: { users: newUsers } });\r\n      }\r\n    }\r\n\r\n    addUser();\r\n  }, [dispatch, state.user.privateKey, state.users]);\r\n\r\n  return (\r\n    <div className=\"container-fluid d-flex justify-content-center mx-auto row my-5\">\r\n      <InputGroup className=\"user-key col-12 col-lg-5 pl-3 pl-lg-0\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Public</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n\r\n        <Form.Control\r\n          aria-label=\"publicKey\"\r\n          as=\"textarea\"\r\n          rows={numRows.current}\r\n          className=\"rounded-right\"\r\n          value={state.user.publicKey}\r\n          isValid={state.copied === \"walletPK\"}\r\n          onFocus={(e: React.FocusEvent<HTMLTextAreaElement>) => copyInput(e.target, \"walletPK\", dispatch)}\r\n          onBlur={() => removeCopied(dispatch)}\r\n          readOnly\r\n        />\r\n\r\n        <Form.Control.Feedback type=\"valid\">Copied to clipboard!</Form.Control.Feedback>\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"user-key col-12 col-lg-5 pl-3\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Private</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n\r\n        <Form.Control\r\n          aria-label=\"privateKey\"\r\n          as=\"textarea\"\r\n          rows={numRows.current}\r\n          value={show ? state.user.privateKey : new Array(state.user.privateKey.length).fill(\"◦\").join(\"\")}\r\n          onFocus={(e: React.FocusEvent<HTMLTextAreaElement>) => copyInput(e.target, \"walletSK\", dispatch)}\r\n          onBlur={() => removeCopied(dispatch)}\r\n          isValid={state.copied === \"walletSK\"}\r\n          readOnly\r\n        />\r\n\r\n        <InputGroup.Append>\r\n          <InputGroup.Text className=\"rounded-right\">\r\n            <span id=\"private-reveal-eyes\" onClick={() => setShow(!show)}>\r\n              👀\r\n            </span>\r\n          </InputGroup.Text>\r\n        </InputGroup.Append>\r\n\r\n        <Form.Control.Feedback type=\"valid\">Copied to clipboard!</Form.Control.Feedback>\r\n      </InputGroup>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState, IUser } from \"../../typings/AppTypes\";\r\nimport { copyInput, removeCopied } from \"../../utils/copyInput\";\r\n\r\nimport \"./User.scss\";\r\n\r\nexport default function UserItems(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  return (\r\n    <div className=\"container-fluid mb-2\">\r\n      <h3 className=\"font-weight-bold\">Users</h3>\r\n      <div className=\"row flex-nowrap overflow-auto bg-dark mx-1 px-2 rounded\">\r\n        {state.users.map((user: IUser, i: number) => {\r\n          return (\r\n            <Form className=\"user-item rounded flex-shrink-0\" key={`user-${user.publicKey}`}>\r\n              <InputGroup>\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>🔑</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <Form.Control\r\n                  aria-label=\"User Public Key\"\r\n                  type=\"text\"\r\n                  className=\"text-truncate rounded-right\"\r\n                  onFocus={(e: React.FocusEvent<HTMLInputElement>) => copyInput(e.target, \"userItem-\" + i, dispatch)}\r\n                  onBlur={() => removeCopied(dispatch)}\r\n                  defaultValue={user.publicKey}\r\n                  isValid={state.copied === \"userItem-\" + i}\r\n                  readOnly\r\n                />\r\n                <Form.Control.Feedback type=\"valid\">Copied to clipboard</Form.Control.Feedback>\r\n              </InputGroup>\r\n\r\n              <InputGroup className=\"mt-2\">\r\n                <Form.Control aria-label=\"balance\" type=\"number\" defaultValue={user.balance} disabled />\r\n                <InputGroup.Append>\r\n                  <InputGroup.Text>LC</InputGroup.Text>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n            </Form>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import * as yup from \"yup\";\r\nimport { StringSchema } from \"yup\";\r\nimport { RequiredNumberSchema } from \"yup/lib/number\";\r\nimport { RequiredStringSchema } from \"yup/lib/string\";\r\nimport { numberWithCommas } from \"../utils/numberManipulation\";\r\n\r\ntype reqStrSchema = RequiredStringSchema<string | undefined, Record<string, unknown>>;\r\ntype optStrSchema = StringSchema<string | undefined, Record<string, unknown>>;\r\ntype reqNumSchema = RequiredNumberSchema<number | undefined, Record<string, unknown>>;\r\n\r\ntype TSignSchema = {\r\n  to: reqStrSchema;\r\n  amount: reqNumSchema;\r\n  msg: optStrSchema;\r\n};\r\n\r\nconst minVal = (min: number, value?: number): boolean => (value === undefined ? true : value >= min);\r\nconst decimalFormat = (value?: number): boolean => {\r\n  const num = Number(value);\r\n  return Math.floor(num) === num || !value ? true : value.toString().split(\".\")[1].length <= 2;\r\n};\r\n\r\nexport const SignSchema = (lenPK: number, balance: number): yup.ObjectSchema<TSignSchema> => {\r\n  return yup.object().shape({\r\n    to: yup\r\n      .string()\r\n      .min(lenPK, (obj) => {\r\n        const diff = obj.min - obj.value.length;\r\n        return `Length is too short. Add ${diff} alphanumeric character${diff === 1 ? \"\" : \"s\"}`;\r\n      })\r\n      .max(lenPK, (obj) => {\r\n        const diff = obj.value.length - obj.max;\r\n        return `Length is too long. Remove ${diff} alphanumeric character${diff === 1 ? \"\" : \"s\"}`;\r\n      })\r\n      .matches(new RegExp(`[A-Za-z0-9]{${lenPK}}`), \"Format is invalid, characters must be alphanumeric\")\r\n      .required(\"Receiver Public Key is required!\"),\r\n    amount: yup\r\n      .number()\r\n      .test(\"negative\", \"Cannot be a negative value\", (value) => minVal(0, value))\r\n      .test(\"min\", \"Must be at least $0.10 LC\", (value) => minVal(0.1, value))\r\n      .test(\"format\", \"Allowed at most 2 decimal places\", decimalFormat)\r\n      .max(balance, `Must be at most $${numberWithCommas(balance)} LC`)\r\n      .required(\"Amount is required!\"),\r\n    msg: yup.string().optional()\r\n  });\r\n};\r\n","// https://stackoverflow.com/a/2901298/4298115\r\nexport function numberWithCommas(x: number): string {\r\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n","import React, { useContext, useEffect } from \"react\";\r\n\r\nimport { Formik, ErrorMessage, Field } from \"formik\";\r\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\r\n\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { IAction, IState } from \"../../typings/AppTypes\";\r\nimport { digestMessage } from \"../../utils/conversion\";\r\nimport { SignSchema } from \"../../schema/SignSchema\";\r\n\r\nexport default function Sign(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: ACTIONS.SET_VALIDATED, payload: { validated: false } });\r\n    dispatch({ type: ACTIONS.SET_SIGNED, payload: { signed: false, sent: false } });\r\n    dispatch({\r\n      type: ACTIONS.SET_DETAILS,\r\n      payload: {\r\n        details: { from: state.user.publicKey, to: \"\", amount: Number(0).toFixed(2), msg: \"\", signature: \"\" }\r\n      }\r\n    });\r\n  }, [dispatch, state.user.publicKey]);\r\n\r\n  const TextAreaFormControl = (props: unknown): JSX.Element => {\r\n    return <Form.Control as=\"textarea\" {...props} />;\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      validationSchema={SignSchema(state.user.publicKey.length, state.user.balance)}\r\n      onSubmit={async (data, { setSubmitting }) => {\r\n        setSubmitting(true);\r\n        const message = Object.values(data).reduce((total, curr) => total + curr, \"\");\r\n        const currentDetails = { ...data, from: state.user.publicKey, signature: await digestMessage(message) };\r\n\r\n        dispatch({ type: ACTIONS.SET_SIGNED, payload: { signed: true } });\r\n        dispatch({ type: ACTIONS.SET_DETAILS, payload: { details: currentDetails } });\r\n        setSubmitting(false);\r\n      }}\r\n      initialValues={{ to: \"\", amount: \"\", msg: \"\" }}\r\n    >\r\n      {({ handleSubmit, isSubmitting, touched, errors }) => (\r\n        <Form aria-label=\"Sign Form\" noValidate className=\"col-12 col-lg-5 trans-form\" onSubmit={handleSubmit}>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Sender Public Key</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              aria-label=\"Sender Public Key\"\r\n              name=\"from\"\r\n              className=\"text-truncate rounded-right\"\r\n              type=\"text\"\r\n              value={state.user.publicKey}\r\n              readOnly\r\n            />\r\n          </InputGroup>\r\n\r\n          <Form.Text className=\"text-muted\">Used to verify transaction was signed using your private key</Form.Text>\r\n\r\n          <InputGroup className=\"my-2\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Receiver Public Key</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Field\r\n              as={Form.Control}\r\n              aria-label=\"Receiver PK\"\r\n              name=\"to\"\r\n              className=\"text-truncate rounded-right\"\r\n              type=\"text\"\r\n              required\r\n              readOnly={state.wallet.signed}\r\n              isInvalid={!!touched.to && !!errors.to}\r\n              isValid={!!touched.to && !errors.to}\r\n            />\r\n\r\n            <ErrorMessage\r\n              name=\"to\"\r\n              render={(errorMessage) => (\r\n                <Form.Control.Feedback\r\n                  className=\"font-weight-bold\"\r\n                  type=\"invalid\"\r\n                  role=\"alert\"\r\n                  aria-label=\"Receiver PK Feedback\"\r\n                >\r\n                  {errorMessage}\r\n                </Form.Control.Feedback>\r\n              )}\r\n            />\r\n          </InputGroup>\r\n\r\n          <InputGroup className=\"mb-2\">\r\n            <Field\r\n              as={Form.Control}\r\n              aria-label=\"Sign Amount\"\r\n              name=\"amount\"\r\n              type=\"number\"\r\n              step=\"any\"\r\n              placeholder={(1).toFixed(2)}\r\n              required\r\n              readOnly={state.wallet.signed}\r\n              isInvalid={!!touched.amount && !!errors.amount}\r\n              isValid={!!touched.amount && !errors.amount}\r\n            />\r\n\r\n            <InputGroup.Append>\r\n              <InputGroup.Text className=\"rounded-right border-left-0\">LC</InputGroup.Text>\r\n            </InputGroup.Append>\r\n\r\n            <ErrorMessage\r\n              name=\"amount\"\r\n              render={(errorMessage) => (\r\n                <Form.Control.Feedback\r\n                  className=\"font-weight-bold\"\r\n                  type=\"invalid\"\r\n                  role=\"alert\"\r\n                  aria-label=\"Amount Feedback\"\r\n                >\r\n                  {errorMessage}\r\n                </Form.Control.Feedback>\r\n              )}\r\n            />\r\n          </InputGroup>\r\n\r\n          <InputGroup className=\"mb-2\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Message</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Field\r\n              as={TextAreaFormControl}\r\n              aria-label=\"Sign Message\"\r\n              name=\"msg\"\r\n              rows={2}\r\n              placeholder=\"optional message...\"\r\n              readOnly={state.wallet.signed}\r\n              isValid={!!touched.msg && !errors.msg}\r\n            />\r\n          </InputGroup>\r\n\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Sender Private Key</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              aria-label=\"Sender Private Key\"\r\n              name=\"fromSK\"\r\n              className=\"text-truncate\"\r\n              type=\"text\"\r\n              value={state.user.privateKey}\r\n              readOnly\r\n            />\r\n          </InputGroup>\r\n\r\n          <Form.Text className=\"text-muted\">Not shared with anyone, keep this secret!</Form.Text>\r\n\r\n          <Button\r\n            aria-label=\"Sign Button\"\r\n            className=\"mt-2\"\r\n            variant={state.wallet.signed ? \"success\" : \"primary\"}\r\n            type=\"submit\"\r\n            disabled={state.wallet.signed || isSubmitting}\r\n            block\r\n          >\r\n            <b>{state.wallet.signed ? \"Signed\" : \"Sign\"}</b>\r\n          </Button>\r\n        </Form>\r\n      )}\r\n    </Formik>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\n\r\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { IAction, IState } from \"../../typings/AppTypes\";\r\n\r\nexport default function Send(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n\r\n    dispatch({ type: ACTIONS.SET_SIGNED, payload: { signed: false } });\r\n    dispatch({ type: ACTIONS.SET_VALIDATED, payload: { validated: false } });\r\n    dispatch({ type: ACTIONS.ADD_VERIFIED_TRANS, payload: { trans: state.wallet.details } });\r\n    dispatch({\r\n      type: ACTIONS.SET_DETAILS,\r\n      payload: { details: { from: \"\", to: \"\", amount: (0).toFixed(2), msg: \"\", signature: \"\" } }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Form aria-label=\"Send Form\" noValidate className=\"col-12 col-lg-5 my-2 my-lg-0 trans-form\" onSubmit={handleSubmit}>\r\n      <InputGroup>\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Receiver Public Key</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Receiver PK\"\r\n          name=\"receiver-pk\"\r\n          className=\"text-truncate\"\r\n          type=\"text\"\r\n          value={state.wallet.details.to}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <Form.Text className=\"text-muted\">Make sure this matches the value used when signing</Form.Text>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <Form.Control\r\n          aria-label=\"Send Amount\"\r\n          name=\"amount\"\r\n          type=\"number\"\r\n          value={state.wallet.details.amount}\r\n          readOnly\r\n        />\r\n        <InputGroup.Append>\r\n          <InputGroup.Text className=\"rounded-right border-left-0\">LC</InputGroup.Text>\r\n        </InputGroup.Append>\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"mb-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Message</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Send Message\"\r\n          name=\"msg\"\r\n          as=\"textarea\"\r\n          value={state.wallet.details.msg}\r\n          rows={4}\r\n          placeholder=\"optional message...\"\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup>\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Transaction Signature</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Transaction Signature\"\r\n          name=\"sig\"\r\n          type=\"text\"\r\n          className=\"text-truncate\"\r\n          value={state.wallet.details.signature}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <Form.Text className=\"text-muted\">Receiver uses this along with your public key to verify transaction</Form.Text>\r\n\r\n      <Button\r\n        aria-label=\"Send Button\"\r\n        className=\"mt-2\"\r\n        variant={state.wallet.sent ? \"success\" : \"primary\"}\r\n        type=\"submit\"\r\n        disabled={!state.wallet.signed}\r\n        block\r\n      >\r\n        <b>{state.wallet.sent ? \"Sent\" : \"Send\"}</b>\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport NavMenu from \"../components/NavMenu/NavMenu\";\r\nimport KeyGeneration from \"../components/User/KeyGeneration\";\r\nimport UserItems from \"../components/User/UserItems\";\r\nimport Sign from \"../components/Transaction/Sign\";\r\nimport Send from \"../components/Transaction/Send\";\r\n\r\nexport default function Wallet(): JSX.Element {\r\n  return (\r\n    <div>\r\n      <NavMenu />\r\n\r\n      <KeyGeneration />\r\n\r\n      <div className=\"container-fluid d-flex justify-content-center mx-auto row my-4\">\r\n        <Sign />\r\n        <Send />\r\n      </div>\r\n\r\n      <UserItems />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\n\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState } from \"../../typings/AppTypes\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\n\r\nimport \"./Block.scss\";\r\n\r\nexport interface IBlockProps {\r\n  chain: boolean;\r\n  index: number;\r\n}\r\n\r\nexport default function Block({ chain, index }: IBlockProps): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  function handleAddBlock() {\r\n    // this only happens on the mining page so can use state.preview.index here\r\n\r\n    const block = {\r\n      ...state.preview,\r\n      transactions: state.selectedTrans,\r\n      valid: state.chain[state.preview.index - 1].valid, // validity depends on previous block\r\n      showTrans: false\r\n    };\r\n\r\n    const preview = {\r\n      timestamp: Date.now(),\r\n      index: state.preview.index + 1,\r\n      prevHash: state.preview.currHash,\r\n      currHash: \"\",\r\n      merkleRoot: \"\",\r\n      valid: false\r\n    };\r\n\r\n    // add the block, update verified transactions, clear selected transactions, update preview\r\n    dispatch({ type: ACTIONS.ADD_BLOCK, payload: { block } });\r\n    dispatch({ type: ACTIONS.UPDATE_VERIFIED_TRANS });\r\n    dispatch({ type: ACTIONS.UPDATE_SELECTED_TRANS, payload: { selectedTrans: [] } });\r\n    dispatch({ type: ACTIONS.UPDATE_PREVIEW, payload: { preview } });\r\n  }\r\n\r\n  function handleViewTransactions(): void {\r\n    const block = state.chain[index];\r\n    dispatch({ type: ACTIONS.UPDATE_BLOCK, payload: { block: { ...block, showTrans: !block.showTrans } } });\r\n  }\r\n\r\n  return (\r\n    <Form\r\n      aria-label=\"Block Form\"\r\n      className={\r\n        (chain ? \"\" : \"col-10 col-lg-5 \") +\r\n        \"my-4 my-lg-0 p-2 rounded \" +\r\n        ((chain && state.chain[index].valid) || (!chain && state.preview.valid) ? \"valid-block\" : \"invalid-block\")\r\n      }\r\n    >\r\n      <InputGroup className=\"mb-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Index</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Block Index\"\r\n          name=\"index\"\r\n          type=\"number\"\r\n          value={chain ? index : state.preview.index}\r\n          disabled\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Timestamp</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Block Timestamp\"\r\n          name=\"timestamp\"\r\n          type=\"number\"\r\n          value={chain ? state.chain[index].timestamp : state.preview.timestamp}\r\n          disabled\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Previous #</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Block PrevHash\"\r\n          name=\"prevHash\"\r\n          className=\"text-truncate\"\r\n          type=\"text\"\r\n          value={chain && index > 0 ? state.chain[index - 1].currHash : chain ? \"\" : state.preview.prevHash}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Current #</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Block CurrHash\"\r\n          name=\"currHash\"\r\n          className=\"text-truncate\"\r\n          type=\"text\"\r\n          value={chain ? state.chain[index].currHash : state.preview.currHash}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"mt-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Merkle #</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        {chain && index === 0 ? (\r\n          <Form.Control aria-label=\"Block Merkle Genesis\" name=\"merkleRoot\" type=\"text\" defaultValue={\"\"} disabled />\r\n        ) : (\r\n          <React.Fragment>\r\n            <Form.Control\r\n              aria-label=\"Block Merkle\"\r\n              name=\"merkleRoot\"\r\n              className=\"text-truncate\"\r\n              type=\"text\"\r\n              value={chain ? state.chain[index].merkleRoot : state.preview.merkleRoot}\r\n              readOnly\r\n            />\r\n            {chain && (\r\n              <InputGroup.Append>\r\n                <InputGroup.Text\r\n                  aria-label=\"Show Trans\"\r\n                  className=\"show-trans-eye\"\r\n                  onClick={() => handleViewTransactions()}\r\n                >\r\n                  {state.chain[index].showTrans ? \"🙈\" : \"🙉\"}\r\n                </InputGroup.Text>\r\n              </InputGroup.Append>\r\n            )}\r\n          </React.Fragment>\r\n        )}\r\n      </InputGroup>\r\n\r\n      {!chain && state.preview.valid && (\r\n        <Button aria-label=\"Add Block\" className=\"mt-2\" variant=\"success\" block onClick={() => handleAddBlock()}>\r\n          <h4 className=\"my-0\">Add Block</h4>\r\n        </Button>\r\n      )}\r\n    </Form>\r\n  );\r\n}\r\n","import { ITransaction } from \"../typings/AppTypes\";\r\nimport { digestMessage } from \"./conversion\";\r\n\r\nexport async function calculateMerkleTreeFormation(\r\n  verifiedTrans: ITransaction[],\r\n  selectedTrans: ITransaction[]\r\n): Promise<string[][]> {\r\n  let tree = [[\"\"]];\r\n  if (selectedTrans.length > 0) {\r\n    // need to make sure node's in tree appear in same order as in the verified transaction pane, regardless of selection order\r\n    const verifiedSignatures = verifiedTrans.map((trans) => trans.signature);\r\n    const selectedSignatures = selectedTrans.map((trans) => trans.signature);\r\n    let signatures = verifiedSignatures.filter((sig) => selectedSignatures.includes(sig));\r\n    tree = [signatures];\r\n\r\n    while (signatures.length !== 1) {\r\n      const hashArr = [] as string[];\r\n      for (let i = 0; i < signatures.length; i += 2) {\r\n        const hash = signatures[i + 1] ? await digestMessage(signatures[i] + signatures[i + 1]) : signatures[i];\r\n        hashArr.push(hash);\r\n      }\r\n\r\n      signatures = hashArr;\r\n      tree.push(hashArr);\r\n    }\r\n  }\r\n\r\n  return tree;\r\n}\r\n\r\nexport function getMerkleRoot(tree: string[][]): string {\r\n  return tree[tree.length - 1][0];\r\n}\r\n\r\nexport function flattenTree(tree: string[][]): string[] {\r\n  let flatTree = [] as string[];\r\n  // need to reverse each tree row so that printing produces the right order!\r\n  for (let i = 0; i < tree.length; i++) {\r\n    flatTree = flatTree.concat(tree[i].reverse());\r\n  }\r\n\r\n  return flatTree;\r\n}\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\n\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { IAction, IBlock, IState, ITransaction } from \"../../typings/AppTypes\";\r\n\r\nimport { digestMessage } from \"../../utils/conversion\";\r\nimport { calculateMerkleTreeFormation, getMerkleRoot } from \"../../utils/merkleTree\";\r\n\r\ntype TChangeType = \"from\" | \"to\" | \"msg\" | \"amount\";\r\ntype TInputChange<T = HTMLInputElement> = React.ChangeEvent<T>;\r\n\r\nexport default function BlockTrans({ index }: { index: number }): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const [transDetails, setTransDetails] = useState<ITransaction[]>(state.chain[index].transactions);\r\n\r\n  async function calculateNewMerkleRoot(newVal: number | string, i: number, type: TChangeType): Promise<void> {\r\n    const newTrans: ITransaction[] = JSON.parse(JSON.stringify(transDetails)); // deep copy\r\n\r\n    // update the changed value & signature\r\n    newTrans[i] = { ...newTrans[i], [type]: newVal };\r\n    const message = newTrans[i].to + newTrans[i].from + newTrans[i].amount + newTrans[i].msg;\r\n    newTrans[i].signature = await digestMessage(message);\r\n    setTransDetails(newTrans);\r\n\r\n    // calculate new merkle root\r\n    const newTree = await calculateMerkleTreeFormation(newTrans, newTrans);\r\n    const newRoot = getMerkleRoot(newTree);\r\n\r\n    // propagate changes to next blocks\r\n    const newBlocks: IBlock[] = [];\r\n    const timestamp = Date.now();\r\n    let prevHash = state.chain[index].prevHash;\r\n    let currHash = \"\";\r\n    for (let i = index; i < state.chain.length; i++) {\r\n      const transactions = i === index ? newTrans : state.chain[i].transactions;\r\n      const merkleRoot = i === index ? newRoot : state.chain[i].merkleRoot;\r\n      currHash = await digestMessage(i + prevHash + merkleRoot);\r\n      newBlocks.push({ ...state.chain[i], timestamp, prevHash, currHash, transactions, merkleRoot, valid: false });\r\n      prevHash = currHash; // next block's prevHash is this block's currHash\r\n    }\r\n\r\n    dispatch({ type: ACTIONS.UPDATE_BLOCK, payload: { block: newBlocks } });\r\n  }\r\n\r\n  return (\r\n    <div className=\"row flex-nowrap overflow-auto mx-1 p-2 rounded bg-dark\">\r\n      {transDetails.map((transaction, i) => {\r\n        return (\r\n          <div\r\n            className={\r\n              (transDetails.length > 1 && i !== transDetails.length - 1 ? \"mr-2 \" : \"\") +\r\n              \"col-12 bg-light border border-dark p-1 rounded\"\r\n            }\r\n            key={`sig:${i}`}\r\n          >\r\n            <Form.Group className=\"mb-2 text-center\">\r\n              <Form.Control\r\n                className=\"text-truncate\"\r\n                type=\"text\"\r\n                value={transaction.from}\r\n                onChange={(e: TInputChange) => calculateNewMerkleRoot(e.target.value, i, \"from\")}\r\n              />\r\n              <h3 className=\"my-0\">↓</h3>\r\n              <Form.Control\r\n                className=\"text-truncate\"\r\n                type=\"text\"\r\n                value={transaction.to}\r\n                onChange={(e: TInputChange) => calculateNewMerkleRoot(e.target.value, i, \"to\")}\r\n              />\r\n            </Form.Group>\r\n\r\n            <InputGroup className=\"mb-2\">\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>Msg</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                rows={3}\r\n                value={transaction.msg}\r\n                onChange={(e: TInputChange<HTMLTextAreaElement>) => calculateNewMerkleRoot(e.target.value, i, \"msg\")}\r\n              />\r\n            </InputGroup>\r\n\r\n            <InputGroup className=\"mb-2\">\r\n              <Form.Control\r\n                type=\"number\"\r\n                value={transaction.amount ?? 0}\r\n                onChange={(e: TInputChange) => calculateNewMerkleRoot(e.target.value, i, \"amount\")}\r\n              />\r\n              <InputGroup.Append>\r\n                <InputGroup.Text>LC</InputGroup.Text>\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n\r\n            <InputGroup>\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>Sig</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                key={transaction.signature}\r\n                className=\"text-truncate\"\r\n                type=\"text\"\r\n                value={transaction.msg}\r\n                readOnly\r\n              />\r\n            </InputGroup>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useRef, useContext } from \"react\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { IAction, IBlock, IState } from \"../../typings/AppTypes\";\r\nimport { digestMessage, randomHash } from \"../../utils/conversion\";\r\n\r\nimport \"./Block.scss\";\r\ninterface IStatisticsProps {\r\n  chain: boolean;\r\n  index: number;\r\n}\r\n\r\nexport default function Statistics(props: IStatisticsProps): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const nonce = useRef<number>(0);\r\n  const [header, setHeader] = useState<number>(0);\r\n  const [target, setTarget] = useState<string>(\"\");\r\n  const [solution, setSolution] = useState<string>(\"\");\r\n  const [disableMineBtn, setDisableMineBtn] = useState<boolean>(false);\r\n\r\n  async function handleMine() {\r\n    const { chain, index } = props;\r\n\r\n    setDisableMineBtn(true);\r\n    nonce.current = Math.round(Math.random() * 1e6);\r\n\r\n    // make target with 2 or 3 leading zeros\r\n    const numZeros = Math.round(Math.random()) + 2;\r\n    const re = new RegExp(`^.{0,${numZeros}}`, \"g\");\r\n    const zerosStr = new Array(numZeros).fill(\"0\").join(\"\");\r\n    let targetHash = await digestMessage(randomHash(20));\r\n    targetHash = targetHash.replace(re, zerosStr);\r\n    setTarget(targetHash);\r\n\r\n    // mine block for a new current hash (solution)\r\n    let candidateSolution = \"\";\r\n    let header = nonce.current;\r\n    while (header <= Number.MAX_SAFE_INTEGER) {\r\n      candidateSolution = await digestMessage(header.toString());\r\n      setSolution(candidateSolution);\r\n      setHeader(header++);\r\n\r\n      const re = new RegExp(`^0{${numZeros}}`); // exactly numZeros 0 characters at start of string\r\n      if (candidateSolution.match(re)) break;\r\n    }\r\n    setDisableMineBtn(false);\r\n\r\n    const timestamp = Date.now();\r\n    const payload = {\r\n      [!chain ? \"preview\" : \"block\"]: {\r\n        ...(!chain ? state.preview : state.chain[index]),\r\n        timestamp,\r\n        prevHash: state.chain[(!chain ? state.preview.index : index) - 1].currHash,\r\n        currHash: candidateSolution,\r\n        valid: candidateSolution <= targetHash\r\n      }\r\n    };\r\n\r\n    const type = !chain ? ACTIONS.UPDATE_PREVIEW : ACTIONS.UPDATE_BLOCK;\r\n    dispatch({ type, payload });\r\n\r\n    // propagate changes to next blocks if in blockchain mode and mined block is not last\r\n    if (chain) {\r\n      const newBlocks: IBlock[] = [];\r\n      let prevHash = candidateSolution;\r\n      let currHash = \"\";\r\n      for (let i = index + 1; i < state.chain.length; i++) {\r\n        currHash = await digestMessage(i + prevHash + state.chain[i].merkleRoot);\r\n        newBlocks.push({ ...state.chain[i], timestamp, prevHash, currHash, valid: false });\r\n        prevHash = currHash; // next block's prevHash is this block's currHash\r\n      }\r\n\r\n      if (newBlocks.length) {\r\n        dispatch({ type: ACTIONS.UPDATE_BLOCK, payload: { block: newBlocks } });\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Form aria-label=\"Block Statistics\" className={props.chain ? \"my-3\" : \"col-11 col-lg-5 mx-3\"}>\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Nonce</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Block Nonce\"\r\n          name=\"nonce\"\r\n          type=\"number\"\r\n          key={nonce.current}\r\n          defaultValue={nonce.current}\r\n          disabled\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Header</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control aria-label=\"Block Header\" name=\"header\" type=\"number\" value={header} disabled />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Target</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Block Target\"\r\n          name=\"target\"\r\n          className=\"text-truncate\"\r\n          type=\"text\"\r\n          value={target}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Sol&apos;n</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Block Solution\"\r\n          name=\"solution\"\r\n          className={\r\n            \"text-truncate \" +\r\n            ((props.chain && state.chain[props.index].valid) || (!props.chain && state.preview.valid)\r\n              ? \"valid-solution\"\r\n              : \"invalid-solution\")\r\n          }\r\n          type=\"text\"\r\n          value={solution}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <Button\r\n        aria-label=\"Block Mine\"\r\n        variant=\"primary\"\r\n        className=\"btn-block mt-2 py-2\"\r\n        disabled={\r\n          (props.chain && state.chain[props.index].valid) ||\r\n          (!props.chain && (state.preview.valid || state.selectedTrans.length === 0)) ||\r\n          disableMineBtn\r\n        }\r\n        onClick={() => handleMine()}\r\n      >\r\n        <h4 className=\"my-0 row justify-content-end align-items-center flex-nowrap\">\r\n          <span className=\"col-10 pl-5\">Mine</span>\r\n          <span\r\n            className={\"spinner-border spinner-border-md mr-3 \" + (disableMineBtn ? \"visible\" : \"invisible\")}\r\n            role=\"status\"\r\n          />\r\n        </h4>\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport Block from \"../components/Block/Block\";\r\nimport BlockTrans from \"../components/Block/BlockTrans\";\r\nimport Statistics from \"../components/Block/Statistics\";\r\nimport NavMenu from \"../components/NavMenu/NavMenu\";\r\nimport { AppContext } from \"../context/AppContext\";\r\nimport { IState } from \"../typings/AppTypes\";\r\n\r\nexport default function Chain(): JSX.Element {\r\n  const { state } = useContext(AppContext) as { state: IState };\r\n\r\n  return (\r\n    <div>\r\n      <NavMenu />\r\n\r\n      <div className=\"mx-3 row flex-nowrap overflow-auto\">\r\n        {state.chain.map((block) => (\r\n          <div className=\"block mx-2 flex-column flex-shrink-0\" key={block.prevHash}>\r\n            <Block chain={true} index={block.index} />\r\n            <Statistics chain={true} index={block.index} />\r\n            {block.showTrans && <BlockTrans index={block.index} />}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { IAction, IState, ITransaction } from \"../../typings/AppTypes\";\r\nimport { calculateMerkleTreeFormation, getMerkleRoot } from \"../../utils/merkleTree\";\r\n\r\nimport \"./Transaction.scss\";\r\n\r\nexport default function TransactionItems(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  async function selectTransaction(transaction: ITransaction): Promise<void> {\r\n    let selectedTrans: ITransaction[] = JSON.parse(JSON.stringify(state.selectedTrans));\r\n    const signatures = selectedTrans.map((x) => x.signature);\r\n    const included = signatures.includes(transaction.signature);\r\n\r\n    if (selectedTrans.length < 4 || included) {\r\n      // if just selected - push onto stack, else remove it\r\n      // adjust backgrounds according to selection/deselection\r\n      if (!included) {\r\n        selectedTrans.push(transaction);\r\n      } else {\r\n        selectedTrans = selectedTrans.filter((x) => x.signature !== transaction.signature);\r\n      }\r\n\r\n      const newTree = await calculateMerkleTreeFormation(state.verifiedTrans, selectedTrans);\r\n      const newPreview = {\r\n        ...state.preview,\r\n        merkleRoot: getMerkleRoot(newTree),\r\n        valid: false\r\n      };\r\n\r\n      dispatch({ type: ACTIONS.UPDATE_SELECTED_TRANS, payload: { selectedTrans } });\r\n      dispatch({ type: ACTIONS.UPDATE_PREVIEW, payload: { preview: newPreview } });\r\n    } else {\r\n      alert(\"You can mine at most 4 transactions at a time!\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <h3 aria-label=\"Title\" className=\"font-weight-bold\">\r\n        Verified Transactions\r\n      </h3>\r\n      <div className=\"trans-list row flex-nowrap overflow-auto bg-dark mx-1 px-2 rounded\">\r\n        {state.verifiedTrans.map((transaction) => {\r\n          return (\r\n            <Form\r\n              aria-label=\"Transaction Information\"\r\n              className={\r\n                \"trans-item \" +\r\n                (state.selectedTrans.map((x) => x.signature).includes(transaction.signature) ? \"selected\" : \"not-selected\") // prettier-ignore\r\n              }\r\n              onClick={() => selectTransaction(transaction)}\r\n              key={`sig:${transaction.signature}`}\r\n            >\r\n              <Form.Group className=\"mb-2 text-center\">\r\n                <Form.Control\r\n                  aria-label=\"Transaction From\"\r\n                  name=\"from\"\r\n                  className=\"text-truncate\"\r\n                  type=\"text\"\r\n                  defaultValue={transaction.from}\r\n                  readOnly\r\n                />\r\n                <h3 className=\"my-0\">↓</h3>\r\n                <Form.Control\r\n                  aria-label=\"Transaction To\"\r\n                  name=\"to\"\r\n                  className=\"text-truncate\"\r\n                  type=\"text\"\r\n                  defaultValue={transaction.to}\r\n                  readOnly\r\n                />\r\n              </Form.Group>\r\n\r\n              <InputGroup className=\"mb-2\">\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>Msg</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <Form.Control\r\n                  aria-label=\"Transaction Message\"\r\n                  name=\"msg\"\r\n                  as=\"textarea\"\r\n                  defaultValue={transaction.msg}\r\n                  readOnly\r\n                />\r\n              </InputGroup>\r\n\r\n              <InputGroup className=\"mb-2\">\r\n                <Form.Control\r\n                  aria-label=\"Transaction Amount\"\r\n                  name=\"amount\"\r\n                  type=\"number\"\r\n                  defaultValue={transaction.amount}\r\n                  disabled\r\n                />\r\n                <InputGroup.Append>\r\n                  <InputGroup.Text>LC</InputGroup.Text>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n\r\n              <InputGroup>\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>Sig</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <Form.Control\r\n                  aria-label=\"Transaction Signature\"\r\n                  name=\"signature\"\r\n                  className=\"text-truncate\"\r\n                  type=\"text\"\r\n                  defaultValue={transaction.signature}\r\n                  readOnly\r\n                />\r\n              </InputGroup>\r\n            </Form>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IState } from \"../../typings/AppTypes\";\r\nimport { calculateMerkleTreeFormation } from \"../../utils/merkleTree\";\r\n\r\nimport \"./Block.scss\";\r\n\r\nexport default function PreviewTree(): JSX.Element {\r\n  const { state } = useContext(AppContext) as { state: IState };\r\n\r\n  const numCells = useRef<number>(9);\r\n  const strLen = useRef<number>(20);\r\n  const [tree, setTree] = useState<string[][]>([[\"\"]]);\r\n\r\n  useEffect(() => {\r\n    async function drawTree() {\r\n      const newTree = await calculateMerkleTreeFormation(state.verifiedTrans, state.selectedTrans);\r\n      setTree(newTree);\r\n    }\r\n\r\n    drawTree();\r\n  }, [state.selectedTrans, state.verifiedTrans]);\r\n\r\n  // https://stackoverflow.com/a/1199420/4298115\r\n  function truncate(str: string, n = strLen.current): string {\r\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n  }\r\n\r\n  function getText(rowNum: number, index: number, isTitle: boolean): string {\r\n    let text = \"\";\r\n\r\n    switch (rowNum) {\r\n      case 0: {\r\n        if (index === Math.floor(numCells.current / 2)) {\r\n          text = isTitle ? tree[tree.length - 1][0] : truncate(tree[tree.length - 1][0]);\r\n        }\r\n        break;\r\n      }\r\n\r\n      case 1: {\r\n        if (index === numCells.current / 3 - 1) {\r\n          text = isTitle ? tree[tree.length - 2][0] : truncate(tree[tree.length - 2][0]);\r\n        } else if (index === (numCells.current / 3) * 2) {\r\n          text = isTitle ? tree[tree.length - 2][1] : truncate(tree[tree.length - 2][1]);\r\n        }\r\n        break;\r\n      }\r\n\r\n      case 2: {\r\n        if (index === 0) {\r\n          text = isTitle ? tree[0][0] : truncate(tree[0][0]);\r\n        } else if (index === numCells.current / 3 - 1) {\r\n          text = isTitle ? tree[0][1] : truncate(tree[0][1]);\r\n        } else if (index === (numCells.current / 3) * 2) {\r\n          text = isTitle ? tree[0][2] : truncate(tree[0][2]);\r\n        } else if (index === numCells.current - 1) {\r\n          text = isTitle ? tree[0][3] : truncate(tree[0][3]);\r\n        }\r\n        break;\r\n      }\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return text;\r\n  }\r\n\r\n  function getClassName(rowNum: number, index: number): string {\r\n    let className = \"\";\r\n\r\n    switch (rowNum) {\r\n      case 0:\r\n        className = index === Math.floor(numCells.current / 2) ? \"root-cell\" : \"\";\r\n        break;\r\n\r\n      case 1: {\r\n        if (index === numCells.current / 3) {\r\n          className = \"diag-line-left\";\r\n        } else if (index === (2 * numCells.current) / 3 - 1) {\r\n          className = \"diag-line-right\";\r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n      case 2: {\r\n        const isCorrectColumn = [numCells.current / 3 - 1, (2 * numCells.current) / 3].includes(index);\r\n        if (isCorrectColumn && tree.length <= 2) {\r\n          className = \"data-cells\";\r\n        } else if (isCorrectColumn) {\r\n          className = \"middle-cells\";\r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n      case 3: {\r\n        if (index === 1) {\r\n          className = \"diag-line-left\";\r\n        } else if (index === numCells.current - 2 && tree[0].length === 4) {\r\n          className = \"diag-line-right\";\r\n        } else if ([numCells.current / 3 - 1, (numCells.current / 3) * 2].includes(index)) {\r\n          className = \"normal-line\";\r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n      case 4: {\r\n        const isCorrectColumn = [0, numCells.current / 3 - 1, (numCells.current / 3) * 2].includes(index);\r\n        if (isCorrectColumn || (numCells.current - 1 === index && tree[0].length === 4)) {\r\n          className = \"data-cells\";\r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return className;\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-100 my-3 text-center\">\r\n      <h3 className=\"font-weight-bold\">Merkle Tree Visualization</h3>\r\n      {tree[tree.length - 1][0] !== \"\" ? (\r\n        <Table className=\"w-75 mx-auto my-1 text-center border\" responsive size=\"sm\">\r\n          <tbody>\r\n            <tr>\r\n              {Array.from({ length: numCells.current }).map((_, i) => (\r\n                <td key={\"first-data-row-\" + i} className={getClassName(0, i)} title={getText(0, i, true)}>\r\n                  {getText(0, i, false)}\r\n                </td>\r\n              ))}\r\n            </tr>\r\n            {tree.length >= 2 && (\r\n              <>\r\n                <tr>\r\n                  {Array.from({ length: numCells.current }).map((_, i) => (\r\n                    <td key={\"first-break-row-\" + i} className={getClassName(1, i)} />\r\n                  ))}\r\n                </tr>\r\n                <tr>\r\n                  {Array.from({ length: numCells.current }).map((_, i) => (\r\n                    <td key={\"second-data-row-\" + i} className={getClassName(2, i)} title={getText(1, i, true)}>\r\n                      {getText(1, i, false)}\r\n                    </td>\r\n                  ))}\r\n                </tr>\r\n              </>\r\n            )}\r\n            {tree.length === 3 && (\r\n              <>\r\n                <tr>\r\n                  {Array.from({ length: numCells.current }).map((_, i) => (\r\n                    <td key={\"second-break-row-\" + i} className={getClassName(3, i)} />\r\n                  ))}\r\n                </tr>\r\n                <tr>\r\n                  {Array.from({ length: numCells.current }).map((_, i) => (\r\n                    <td key={\"third-data-row-\" + i} className={getClassName(4, i)} title={getText(2, i, true)}>\r\n                      {getText(2, i, false)}\r\n                    </td>\r\n                  ))}\r\n                </tr>\r\n              </>\r\n            )}\r\n          </tbody>\r\n        </Table>\r\n      ) : (\r\n        <p className=\"my-3 border w-75 mx-auto\">Please select a verified transaction from above...</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport NavMenu from \"../components/NavMenu/NavMenu\";\r\nimport Block from \"../components/Block/Block\";\r\nimport TransactionItems from \"../components/Transaction/TransactionItems\";\r\nimport PreviewTree from \"../components/Block/PreviewTree\";\r\nimport Statistics from \"../components/Block/Statistics\";\r\n\r\nexport default function Mine(): JSX.Element {\r\n  return (\r\n    <div>\r\n      <NavMenu />\r\n      <TransactionItems />\r\n      <div className=\"container-fluid row d-flex justify-content-center mx-auto my-3\">\r\n        <PreviewTree />\r\n        <Statistics chain={false} index={0} />\r\n        <Block chain={false} index={0} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { ACTIONS } from \"../enums/AppDispatchActions\";\r\nimport { IAction, IState, IUser, ITransaction, IBlock, IMainUser } from \"../typings/AppTypes\";\r\n\r\nexport const AppReducer = (state: IState, action: IAction): IState => {\r\n  switch (action.type) {\r\n    case ACTIONS.ADD_VERIFIED_TRANS: {\r\n      const { trans } = action.payload as { trans: ITransaction };\r\n      const verifiedTrans = [...state.verifiedTrans, { ...trans }];\r\n      localStorage.setItem(\"verTrans\", JSON.stringify(verifiedTrans, null, 2));\r\n      return { ...state, verifiedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_VERIFIED_TRANS: {\r\n      const selectedTransSignatures = state.selectedTrans.map((x) => x.signature);\r\n      const verifiedTrans = state.verifiedTrans.filter((x) => !selectedTransSignatures.includes(x.signature));\r\n      localStorage.setItem(\"verTrans\", JSON.stringify(verifiedTrans, null, 2));\r\n      return { ...state, verifiedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_SELECTED_TRANS: {\r\n      const { selectedTrans } = action.payload as { selectedTrans: ITransaction[] };\r\n      localStorage.setItem(\"selTrans\", JSON.stringify(selectedTrans, null, 2));\r\n      return { ...state, selectedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_USERS: {\r\n      const { users } = action.payload as { users: IUser[] };\r\n      localStorage.setItem(\"users\", JSON.stringify(users, null, 2));\r\n      return { ...state, users };\r\n    }\r\n\r\n    case ACTIONS.SET_MAIN_USER: {\r\n      const { user } = action.payload as { user: IMainUser };\r\n      localStorage.setItem(\"user\", JSON.stringify(user, null, 2));\r\n      return { ...state, user };\r\n    }\r\n\r\n    case ACTIONS.ADD_BLOCK: {\r\n      const { block } = action.payload as { block: IBlock };\r\n      const chain = [...state.chain, { ...block }];\r\n      localStorage.setItem(\"chain\", JSON.stringify(chain, null, 2));\r\n      return { ...state, chain };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_BLOCK: {\r\n      const { block } = action.payload as { block: IBlock | IBlock[] };\r\n      const blocks = Array.isArray(block) ? [...block] : [block];\r\n      const chain = [...state.chain];\r\n\r\n      blocks.forEach((b) => (chain[b.index] = { ...b }));\r\n\r\n      localStorage.setItem(\"chain\", JSON.stringify(chain, null, 2));\r\n      return { ...state, chain };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_PREVIEW: {\r\n      const { preview } = action.payload as { preview: IBlock };\r\n      localStorage.setItem(\"preview\", JSON.stringify(preview, null, 2));\r\n      return { ...state, preview: { ...preview } };\r\n    }\r\n\r\n    case ACTIONS.ASSIGN_COPIED: {\r\n      const { copied } = action.payload as { copied: string };\r\n      localStorage.setItem(\"copied\", copied);\r\n      return { ...state, copied };\r\n    }\r\n\r\n    case ACTIONS.SET_SIGNED: {\r\n      const { signed, sent } = action.payload as { signed: boolean; sent?: boolean };\r\n      const newSent = sent !== undefined ? sent : !signed;\r\n      const wallet = { ...state.wallet, signed, sent: newSent };\r\n      localStorage.setItem(\"wallet\", JSON.stringify(wallet, null, 2));\r\n      return { ...state, wallet };\r\n    }\r\n\r\n    case ACTIONS.SET_VALIDATED: {\r\n      const { validated } = action.payload as { validated: boolean };\r\n      localStorage.setItem(\"wallet\", JSON.stringify({ ...state.wallet, validated }, null, 2));\r\n      return { ...state, wallet: { ...state.wallet, validated } };\r\n    }\r\n\r\n    case ACTIONS.SET_DETAILS: {\r\n      const { details } = action.payload as { details: ITransaction };\r\n      localStorage.setItem(\"wallet\", JSON.stringify({ ...state.wallet, details }, null, 2));\r\n      return { ...state, wallet: { ...state.wallet, details } };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { useMemo, useReducer } from \"react\";\r\nimport { Route, BrowserRouter as Router, Redirect } from \"react-router-dom\";\r\nimport logger from \"use-reducer-logger\";\r\n\r\nimport Wallet from \"../../pages/Wallet\";\r\nimport Chain from \"../../pages/Chain\";\r\nimport Mine from \"../../pages/Mine\";\r\n\r\nimport { AppReducer } from \"../../reducers/AppReducer\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\n\r\nimport \"./App.scss\";\r\n\r\nexport default function App(): JSX.Element {\r\n  const [state, dispatch] = useReducer(process.env.NODE_ENV === \"development\" ? logger(AppReducer) : AppReducer, {\r\n    verifiedTrans: JSON.parse(localStorage.getItem(\"verTrans\") as string) ?? [],\r\n    selectedTrans: JSON.parse(localStorage.getItem(\"selTrans\") as string) ?? [],\r\n    users: JSON.parse(localStorage.getItem(\"users\") as string) ?? [],\r\n    user: JSON.parse(localStorage.getItem(\"user\") as string) ?? { publicKey: \"\", privateKey: \"\", balance: 1000.0 },\r\n    chain: JSON.parse(localStorage.getItem(\"chain\") as string) ?? [\r\n      {\r\n        index: 0,\r\n        prevHash: \"\",\r\n        currHash: new Array(64).fill(\"0\").join(\"\"),\r\n        transactions: [],\r\n        timestamp: Date.parse(\"31 Apr 2021 00:00:00 UTC\"),\r\n        merkleRoot: \"\",\r\n        valid: true\r\n      }\r\n    ],\r\n    copied: \"\",\r\n    preview: JSON.parse(localStorage.getItem(\"preview\") as string) ?? {\r\n      index: 1,\r\n      prevHash: new Array(64).fill(\"0\").join(\"\"),\r\n      currHash: \"\",\r\n      transactions: [],\r\n      timestamp: Date.parse(\"31 Apr 2021 00:00:00 UTC\"),\r\n      merkleRoot: \"\",\r\n      valid: false\r\n    },\r\n    wallet: JSON.parse(localStorage.getItem(\"wallet\") as string) ?? {\r\n      sent: false,\r\n      signed: false,\r\n      validated: false,\r\n      details: { from: \"\", to: \"\", amount: (0).toFixed(2), msg: \"\", signature: \"\" }\r\n    }\r\n  });\r\n\r\n  // prevent re-rendering children when App re-renders\r\n  const value = useMemo(() => ({ state, dispatch }), [state, dispatch]);\r\n\r\n  return (\r\n    <Router basename={\"/LibraCoin\"}>\r\n      <AppContext.Provider value={value}>\r\n        <Route exact path=\"/\">\r\n          <Redirect to=\"/wallet\" />\r\n        </Route>\r\n        <Route path=\"/wallet\" component={Wallet} />\r\n        <Route path=\"/mine\" component={Mine} />\r\n        <Route path=\"/blockchain\" component={Chain} />\r\n      </AppContext.Provider>\r\n    </Router>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./components/App/App\";\r\nimport \"bootstrap/scss/bootstrap.scss\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}