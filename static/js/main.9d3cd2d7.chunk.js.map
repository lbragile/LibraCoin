{"version":3,"sources":["components/NavMenu/NavMenu.tsx","enums/AppDispatchActions.ts","context/AppContext.ts","utils/copyInput.ts","utils/conversion.ts","components/User/KeyGeneration.tsx","components/User/UserItems.tsx","components/Transaction/Sign.tsx","components/Transaction/Send.tsx","pages/Wallet.tsx","components/Block/Block.tsx","utils/merkleTree.ts","utils/propagate.ts","components/Block/BlockTrans.tsx","components/Block/Statistics.tsx","pages/Chain.tsx","components/Transaction/TransactionItems.tsx","utils/Tree.ts","components/Transaction/PreviewTree.tsx","pages/Mine.tsx","reducers/AppReducer.ts","components/App/App.tsx","index.tsx"],"names":["NavMenu","Navbar","expand","className","Brand","aria-label","href","src","alt","width","Toggle","aria-controls","Collapse","id","Nav","Link","active","location","includes","ACTIONS","AppContext","React","createContext","undefined","copyKey","e","setCopied","type","index","totalUsers","visible","target","value","select","document","execCommand","blur","isPublic","newCopied","Array","fill","bufferToHex","hashBuffer","from","Uint8Array","map","b","toString","padStart","join","CryptoKeyToHex","format","key","a","window","crypto","subtle","exportKey","buf","digestMessage","message","msgUint8","TextEncoder","encode","digest","randomHash","len","getRandomValues","Uint32Array","KeyGeneration","useContext","state","dispatch","numRows","useRef","publicKeyRef","privateKeyRef","useState","copied","useEffect","user","publicKey","generateKey","name","namedCurve","privateKey","publicKeyStr","privateKeyStr","current","innerText","length","balance","Number","toFixed","mainUser","SET_MAIN_USER","payload","newUsers","users","UPDATE_USERS","addUser","InputGroup","Prepend","Text","Form","Control","as","rows","isValid","onFocus","onBlur","readOnly","ref","Feedback","Append","onClick","show","hiddenVal","UserItems","i","JSON","parse","stringify","resetCopy","defaultValue","disabled","Sign","validated","signed","handleSubmit","noValidate","onSubmit","pattern","required","step","placeholder","userBalance","Math","min","max","checkAmount","Button","variant","block","Send","props","details","to","amount","signature","Wallet","setValidated","setSigned","formDetails","preventDefault","form","currentTarget","checkValidity","formValues","Object","values","slice","input","ADD_VERIFIED_TRANS","trans","Block","chain","valid","preview","timestamp","currHash","prevHash","Fragment","merkleRoot","UPDATE_BLOCK","showTrans","handleViewTransactions","transactions","selectedTrans","Date","now","ADD_BLOCK","UPDATE_VERIFIED_TRANS","UPDATE_SELECTED_TRANS","UPDATE_PREVIEW","handleAddBlock","calculateMerkleTreeFormation","verifiedTrans","tree","verifiedSignatures","selectedSignatures","signatures","filter","sig","hashArr","hash","push","getMerkleRoot","drawTreeDiagramOnCanvas","merkleTree","canvasTree","clear","flatTree","concat","reverse","flattenTree","addNode","drawTree","propagateBlockStatus","skipFirstUpdate","newRoot","newBlocks","BlockTrans","transDetails","setTransDetails","calculateNewMerkleRoot","newVal","newTrans","newTree","newHash","transaction","Group","onChange","Statistics","nonce","header","setHeader","setTarget","solution","setSolution","disableMineBtn","setDisableMineBtn","round","random","numZeros","re","RegExp","zerosStr","targetHash","replace","candidateSolution","MAX_SAFE_INTEGER","substr","match","handleMine","role","Chain","TransactionItems","x","included","newPreview","alert","selectTransaction","Node","children","parent","pos","this","y","node","position","Tree","canvas","xStart","innerWidth","getContext","height","isLeft","offset","clearRect","newNode","left","calculatePosition","right","queue","shift","rectWidth","beginPath","font","strokeStyle","leafOrBodyColor","fillStyle","fillRect","fillText","forEach","child","moveTo","lineTo","stroke","PreviewTree","treeCanvas","outerWidth","Mine","deepCopy","obj","AppReducer","action","localStorage","setItem","selectedTransSignatures","blocks","isArray","App","useReducer","getItem","useMemo","basename","Provider","exact","path","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9d3cd2d7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\n\r\nimport \"./NavMenu.scss\";\r\n\r\nexport default function NavMenu(): JSX.Element {\r\n  return (\r\n    <Navbar expand=\"lg\" className=\"mb-3\">\r\n      <Navbar.Brand aria-label=\"LibraCoin Logo\" href=\"https://github.com/lbragile/LibraCoin\">\r\n        <img src=\"./assets/libracoin-logo-256.png\" alt=\"LibraCoin Logo\" width=\"64\" />\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"ml-auto\">\r\n          <Nav.Link href=\"/LibraCoin/wallet\" active={location.href.includes(\"/wallet\")}>\r\n            Wallet\r\n          </Nav.Link>\r\n          <Nav.Link href=\"/LibraCoin/mine\" active={location.href.includes(\"/mine\")}>\r\n            Mine\r\n          </Nav.Link>\r\n          <Nav.Link href=\"/LibraCoin/blockchain\" active={location.href.includes(\"/blockchain\")}>\r\n            Blockchain\r\n          </Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\n","export enum ACTIONS {\r\n  ADD_VERIFIED_TRANS,\r\n  UPDATE_VERIFIED_TRANS,\r\n  UPDATE_SELECTED_TRANS,\r\n  UPDATE_USERS,\r\n  SET_MAIN_USER,\r\n  ADD_BLOCK,\r\n  UPDATE_BLOCK,\r\n  UPDATE_PREVIEW\r\n}\r\n","import React from \"react\";\r\nimport { IAction, IState } from \"../typings/AppTypes\";\r\n\r\ntype TAppContext = { state: IState; dispatch: React.Dispatch<IAction> } | undefined;\r\n\r\nexport const AppContext = React.createContext<TAppContext>(undefined);\r\n","export function copyKey(\r\n  e: React.FocusEvent<HTMLTextAreaElement | HTMLInputElement>,\r\n  setCopied: (arg: boolean[]) => void,\r\n  type?: \"public\" | \"private\",\r\n  index?: number,\r\n  totalUsers?: number\r\n): void {\r\n  const visible = !e.target.value.includes(\"◦\");\r\n  if (visible) {\r\n    e.target.select();\r\n    document.execCommand(\"copy\");\r\n  } else {\r\n    e.target.blur();\r\n  }\r\n\r\n  if (type) {\r\n    // wallet page, copying keys (public / private)\r\n    const isPublic = type === \"public\";\r\n    setCopied([isPublic, !isPublic && visible]);\r\n  } else {\r\n    // user items, copying public key\r\n    const newCopied = new Array(totalUsers).fill(false);\r\n    newCopied[index as number] = true;\r\n    setCopied(newCopied);\r\n  }\r\n}\r\n","import { TextEncoder } from \"text-encoding\";\r\n\r\nexport function bufferToHex(hashBuffer: ArrayBuffer): string {\r\n  const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\r\n  const hashHex = hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\"); // convert bytes to hex string\r\n  return hashHex;\r\n}\r\n\r\nexport async function CryptoKeyToHex(format: string, key: CryptoKey): Promise<string> {\r\n  const buf = (await window.crypto.subtle.exportKey(format, key)) as ArrayBuffer;\r\n  return bufferToHex(buf);\r\n}\r\n\r\nexport async function digestMessage(message: string): Promise<string> {\r\n  const msgUint8 = new TextEncoder().encode(message); // encode as (utf-8) Uint8Array\r\n  const hashBuffer = await window.crypto.subtle.digest(\"SHA-256\", msgUint8); // hash the message\r\n  return bufferToHex(hashBuffer);\r\n}\r\n\r\nexport function randomHash(len: number): string {\r\n  return bufferToHex(window.crypto.getRandomValues(new Uint32Array(len)));\r\n}\r\n","import React, { useRef, useState, useContext, useEffect } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\n\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState } from \"../../typings/AppTypes\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { copyKey } from \"../../utils/copyInput\";\r\nimport { CryptoKeyToHex } from \"../../utils/conversion\";\r\n\r\nimport \"./User.scss\";\r\n\r\nexport default function KeyGeneration(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const numRows = useRef(4);\r\n  const publicKeyRef = useRef<HTMLTextAreaElement>(null);\r\n  const privateKeyRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n  const [copied, setCopied] = useState<boolean[]>([false, false]);\r\n\r\n  // add a user if it's the first time visiting\r\n  useEffect(() => {\r\n    async function addUser(): Promise<void> {\r\n      if (!state.user.publicKey) {\r\n        const { publicKey, privateKey } = await window.crypto.subtle.generateKey(\r\n          { name: \"ECDSA\", namedCurve: \"P-256\" },\r\n          true,\r\n          [\"sign\", \"verify\"]\r\n        );\r\n\r\n        const publicKeyStr = await CryptoKeyToHex(\"spki\", publicKey as CryptoKey);\r\n        const privateKeyStr = await CryptoKeyToHex(\"pkcs8\", privateKey as CryptoKey);\r\n        if (publicKeyRef.current && privateKeyRef.current) {\r\n          publicKeyRef.current.innerText = publicKeyStr;\r\n          privateKeyRef.current.innerText = new Array(privateKeyStr.length).fill(\"◦\").join(\"\");\r\n        }\r\n\r\n        const balance = Number(1000).toFixed(2);\r\n        const mainUser = { publicKey: publicKeyStr, privateKey: privateKeyStr, balance };\r\n        dispatch({ type: ACTIONS.SET_MAIN_USER, payload: { user: mainUser } });\r\n\r\n        const newUsers = [...state.users, { publicKey: publicKeyStr, balance }];\r\n        dispatch({ type: ACTIONS.UPDATE_USERS, payload: { users: newUsers } });\r\n      }\r\n    }\r\n\r\n    addUser();\r\n  }, [dispatch, state.user.publicKey, state.users]);\r\n\r\n  const togglePrivateKey = () => {\r\n    const show = privateKeyRef.current?.value.includes(\"◦\");\r\n    const hiddenVal = new Array(state.user.privateKey?.length ?? 0).fill(\"◦\").join(\"\");\r\n    (privateKeyRef.current as HTMLTextAreaElement).value = show ? state.user.privateKey : hiddenVal;\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid d-flex justify-content-center mx-auto row my-5\">\r\n      <InputGroup className=\"user-key col-12 col-lg-5 pl-3 pl-lg-0\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Public</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n\r\n        <Form.Control\r\n          aria-label=\"publicKey\"\r\n          as=\"textarea\"\r\n          rows={numRows.current}\r\n          className=\"rounded-right\"\r\n          value={state.user?.publicKey}\r\n          isValid={copied[0]}\r\n          onFocus={(e: React.FocusEvent<HTMLTextAreaElement>) => copyKey(e, setCopied, \"public\")}\r\n          onBlur={() => setCopied([false, false])}\r\n          readOnly\r\n          ref={publicKeyRef}\r\n        />\r\n\r\n        <Form.Control.Feedback type=\"valid\">Copied to clipboard!</Form.Control.Feedback>\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"user-key col-12 col-lg-5 pl-3\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Private</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n\r\n        <Form.Control\r\n          aria-label=\"privateKey\"\r\n          as=\"textarea\"\r\n          rows={numRows.current}\r\n          value={new Array(state.user.privateKey?.length ?? 0).fill(\"◦\").join(\"\")}\r\n          onFocus={(e: React.FocusEvent<HTMLTextAreaElement>) => copyKey(e, setCopied, \"private\")}\r\n          onBlur={() => setCopied([false, false])}\r\n          isValid={copied[1]}\r\n          readOnly\r\n          ref={privateKeyRef}\r\n        />\r\n\r\n        <InputGroup.Append>\r\n          <InputGroup.Text className=\"rounded-right\">\r\n            <span id=\"private-reveal-eyes\" onClick={togglePrivateKey}>\r\n              👀\r\n            </span>\r\n          </InputGroup.Text>\r\n        </InputGroup.Append>\r\n\r\n        <Form.Control.Feedback type=\"valid\">Copied to clipboard!</Form.Control.Feedback>\r\n      </InputGroup>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState, IUser } from \"../../typings/AppTypes\";\r\nimport { copyKey } from \"../../utils/copyInput\";\r\n\r\nimport \"./User.scss\";\r\n\r\nexport default function UserItems(): JSX.Element {\r\n  const { state } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n  const [copied, setCopied] = useState<boolean[]>(new Array(state.users.length).fill(false));\r\n\r\n  function resetCopy(index: number): void {\r\n    const newCopied = JSON.parse(JSON.stringify(copied));\r\n    newCopied[index] = false;\r\n    setCopied(newCopied);\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-fluid mb-2\">\r\n      <h3 className=\"font-weight-bold\">Users</h3>\r\n      <div className=\"row flex-nowrap overflow-auto bg-dark mx-1 px-2 rounded\">\r\n        {state.users?.map((user: IUser, i: number) => {\r\n          return (\r\n            <Form className=\"user-item rounded flex-shrink-0\" key={`user-${user.publicKey}`}>\r\n              <InputGroup>\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>🔑</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <Form.Control\r\n                  aria-label=\"User Public Key\"\r\n                  type=\"text\"\r\n                  className=\"text-truncate rounded-right\"\r\n                  onFocus={(e: React.FocusEvent<HTMLInputElement>) =>\r\n                    copyKey(e, setCopied, undefined, i, state.users.length)\r\n                  }\r\n                  onBlur={() => resetCopy(i)}\r\n                  defaultValue={user.publicKey}\r\n                  isValid={copied[i]}\r\n                  readOnly\r\n                />\r\n                <Form.Control.Feedback type=\"valid\">Copied to clipboard</Form.Control.Feedback>\r\n              </InputGroup>\r\n\r\n              <InputGroup className=\"mt-2\">\r\n                <Form.Control aria-label=\"balance\" type=\"number\" defaultValue={user.balance} disabled />\r\n                <InputGroup.Append>\r\n                  <InputGroup.Text>LC</InputGroup.Text>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n            </Form>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\n\r\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IState } from \"../../typings/AppTypes\";\r\n\r\nexport interface ISign {\r\n  validated: boolean;\r\n  signed: boolean;\r\n  handleSubmit: (e: React.FormEvent<HTMLFormElement>) => void;\r\n}\r\n\r\nexport default function Sign({ validated, signed, handleSubmit }: ISign): JSX.Element {\r\n  const { state } = useContext(AppContext) as { state: IState };\r\n\r\n  function checkAmount(e: React.FocusEvent<HTMLInputElement>): void {\r\n    const userBalance = state.user.balance ?? 1000;\r\n    e.target.value = Math.min(Math.max(0.1, +e.target.value), userBalance).toFixed(2);\r\n  }\r\n\r\n  return (\r\n    <Form\r\n      aria-label=\"Sign Form\"\r\n      noValidate\r\n      validated={validated}\r\n      className=\"col-12 col-lg-5 trans-form\"\r\n      onSubmit={handleSubmit}\r\n    >\r\n      <InputGroup>\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Sender Public Key</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Sender Public Key\"\r\n          name=\"sender-pk\"\r\n          className=\"text-truncate rounded-right\"\r\n          type=\"text\"\r\n          defaultValue={state.user.publicKey ?? \"\"}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <Form.Text className=\"text-muted\">Used to verify transaction was signed using your private key</Form.Text>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Receiver Public Key</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Receiver Public Key\"\r\n          name=\"receiver-pk\"\r\n          className=\"text-truncate rounded-right\"\r\n          type=\"text\"\r\n          pattern=\"[A-Za-z0-9]{182,182}\"\r\n          required\r\n        />\r\n        <Form.Control.Feedback type=\"invalid\">\r\n          <b>Length or format are incorrect!</b>\r\n        </Form.Control.Feedback>\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"mb-2\">\r\n        <Form.Control\r\n          aria-label=\"Sign Amount\"\r\n          name=\"amount\"\r\n          type=\"number\"\r\n          step=\"any\"\r\n          placeholder={Number(1).toFixed(2)}\r\n          onBlur={(e: React.FocusEvent<HTMLInputElement>) => checkAmount(e)}\r\n          required\r\n        />\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text className=\"rounded-right border-left-0\">LC</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"mb-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Message</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control aria-label=\"Sign Message\" name=\"msg\" as=\"textarea\" rows={2} placeholder=\"optional message...\" />\r\n      </InputGroup>\r\n\r\n      <InputGroup>\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Sender Private Key</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Sender Private Key\"\r\n          name=\"sender-sk\"\r\n          className=\"text-truncate\"\r\n          type=\"text\"\r\n          defaultValue={state.user.privateKey ?? \"\"}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <Form.Text className=\"text-muted\">Not shared with anyone, keep this secret!</Form.Text>\r\n\r\n      <Button aria-label=\"Sign Button\" className=\"mt-2\" variant=\"primary\" type=\"submit\" disabled={signed} block>\r\n        <b>Sign</b>\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\r\nimport { ITransaction } from \"../../typings/AppTypes\";\r\nimport { ISign } from \"./Sign\";\r\n\r\ninterface ISend extends ISign {\r\n  details: ITransaction;\r\n  setSigned: (arg: boolean) => void;\r\n  setValidated: (arg: boolean) => void;\r\n}\r\n\r\nexport default function Send(props: ISend): JSX.Element {\r\n  return (\r\n    <Form\r\n      aria-label=\"Send Form\"\r\n      noValidate\r\n      className=\"col-12 col-lg-5 my-2 my-lg-0 trans-form\"\r\n      onSubmit={(e) => props.handleSubmit(e)}\r\n    >\r\n      <InputGroup>\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Receiver Public Key</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Receiver Public Key\"\r\n          name=\"receiver-pk\"\r\n          className=\"text-truncate\"\r\n          type=\"text\"\r\n          defaultValue={props.details.to}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <Form.Text className=\"text-muted\">Make sure this matches the value used when signing</Form.Text>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <Form.Control\r\n          aria-label=\"Send Amount\"\r\n          name=\"amount\"\r\n          type=\"number\"\r\n          defaultValue={props.details.amount}\r\n          disabled\r\n        />\r\n        <InputGroup.Append>\r\n          <InputGroup.Text className=\"rounded-right border-left-0\">LC</InputGroup.Text>\r\n        </InputGroup.Append>\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"mb-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Message</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Send Message\"\r\n          name=\"msg\"\r\n          as=\"textarea\"\r\n          defaultValue={props.details.message}\r\n          rows={4}\r\n          placeholder=\"optional message...\"\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup>\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Transaction Signature</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Transaction Signature\"\r\n          name=\"sig\"\r\n          type=\"text\"\r\n          className=\"text-truncate\"\r\n          defaultValue={props.details.signature}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <Form.Text className=\"text-muted\">Receiver uses this along with your public key to verify transaction</Form.Text>\r\n\r\n      <Button aria-label=\"Send Button\" className=\"mt-2\" variant=\"primary\" type=\"submit\" disabled={!props.signed} block>\r\n        <b>Send</b>\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n","import React, { useContext, useRef, useState } from \"react\";\r\n\r\nimport NavMenu from \"../components/NavMenu/NavMenu\";\r\nimport KeyGeneration from \"../components/User/KeyGeneration\";\r\nimport UserItems from \"../components/User/UserItems\";\r\nimport Sign from \"../components/Transaction/Sign\";\r\nimport Send from \"../components/Transaction/Send\";\r\nimport { ACTIONS } from \"../enums/AppDispatchActions\";\r\nimport { digestMessage } from \"../utils/conversion\";\r\nimport { IAction, IState, ITransaction } from \"../typings/AppTypes\";\r\nimport { AppContext } from \"../context/AppContext\";\r\n\r\nexport default function Wallet(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const [validated, setValidated] = useState<boolean>(false);\r\n  const [signed, setSigned] = useState<boolean>(false);\r\n\r\n  const formDetails = useRef<ITransaction>({\r\n    to: \"\",\r\n    from: state.user.publicKey ?? \"\",\r\n    amount: undefined,\r\n    message: \"\",\r\n    signature: \"\"\r\n  });\r\n\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    setValidated(true);\r\n\r\n    const form = e.currentTarget;\r\n    if (form.checkValidity()) {\r\n      if (!signed) {\r\n        // haven't signed the transaction yet\r\n        const formValues = Object.values({ ...form }).slice(1, 4).map((input) => input.value); // prettier-ignore\r\n        [formDetails.current.to, formDetails.current.amount, formDetails.current.message] = formValues;\r\n\r\n        const message = formDetails.current.to + formDetails.current.from + formDetails.current.message + formDetails.current.amount; // prettier-ignore\r\n        formDetails.current.signature = await digestMessage(message);\r\n      } else {\r\n        // signed the transaction and need to send now\r\n        dispatch({ type: ACTIONS.ADD_VERIFIED_TRANS, payload: { trans: formDetails.current } });\r\n        setValidated(false);\r\n      }\r\n\r\n      setSigned(!signed);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <NavMenu />\r\n\r\n      <KeyGeneration />\r\n\r\n      <div className=\"container-fluid d-flex justify-content-center mx-auto row my-4\">\r\n        <Sign validated={validated} signed={signed} handleSubmit={handleSubmit} />\r\n        <Send\r\n          validated={validated}\r\n          signed={signed}\r\n          handleSubmit={handleSubmit}\r\n          details={formDetails.current}\r\n          setSigned={setSigned}\r\n          setValidated={setValidated}\r\n        />\r\n      </div>\r\n\r\n      <UserItems />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\n\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState } from \"../../typings/AppTypes\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\n\r\nimport \"./Block.scss\";\r\n\r\nexport interface IBlockProps {\r\n  chain: boolean;\r\n  index: number;\r\n}\r\n\r\nexport default function Block(props: IBlockProps): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  function handleAddBlock() {\r\n    // this only happens on the mining page so can use state.preview.index here\r\n\r\n    const block = {\r\n      ...state.preview,\r\n      transactions: state.selectedTrans,\r\n      valid: state.chain[state.preview.index - 1].valid, // validity depends on previous block\r\n      showTrans: false\r\n    };\r\n\r\n    const preview = {\r\n      timestamp: Date.now(),\r\n      index: state.preview.index + 1,\r\n      prevHash: state.preview.currHash,\r\n      currHash: \"\",\r\n      merkleRoot: \"\",\r\n      valid: false\r\n    };\r\n\r\n    // add the block, update verified transactions, clear selected transactions, update preview\r\n    dispatch({ type: ACTIONS.ADD_BLOCK, payload: { block } });\r\n    dispatch({ type: ACTIONS.UPDATE_VERIFIED_TRANS });\r\n    dispatch({ type: ACTIONS.UPDATE_SELECTED_TRANS, payload: { selectedTrans: [] } });\r\n    dispatch({ type: ACTIONS.UPDATE_PREVIEW, payload: { preview } });\r\n  }\r\n\r\n  function handleViewTransactions(): void {\r\n    const block = state.chain[props.index];\r\n    dispatch({ type: ACTIONS.UPDATE_BLOCK, payload: { block: { ...block, showTrans: !block.showTrans } } });\r\n  }\r\n\r\n  return (\r\n    <Form\r\n      aria-label=\"Block Form\"\r\n      className={\r\n        (props.chain ? \"\" : \"col-10 col-lg-5 \") +\r\n        \"my-4 my-lg-0 p-2 rounded \" +\r\n        ((props.chain && state.chain[props.index].valid) || (!props.chain && state.preview.valid)\r\n          ? \"valid-block\"\r\n          : \"invalid-block\")\r\n      }\r\n    >\r\n      <InputGroup className=\"mb-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Index</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Block Index\"\r\n          name=\"index\"\r\n          type=\"number\"\r\n          value={props.chain ? props.index : state.preview.index}\r\n          disabled\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Timestamp</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Block Timestamp\"\r\n          name=\"timestamp\"\r\n          type=\"number\"\r\n          value={props.chain ? state.chain[props.index].timestamp : state.preview.timestamp}\r\n          disabled\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Previous #</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Block PrevHash\"\r\n          name=\"prevHash\"\r\n          className=\"text-truncate\"\r\n          type=\"text\"\r\n          value={\r\n            props.chain && props.index > 0\r\n              ? state.chain[props.index - 1].currHash\r\n              : !props.chain\r\n              ? state.preview.prevHash\r\n              : \"\"\r\n          }\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Current #</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Block CurrHash\"\r\n          name=\"currHash\"\r\n          className=\"text-truncate\"\r\n          type=\"text\"\r\n          value={props.chain ? state.chain[props.index].currHash : state.preview.currHash}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"mt-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Merkle #</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        {props.chain && props.index === 0 ? (\r\n          <Form.Control aria-label=\"Block Merkle Genesis\" name=\"merkle\" type=\"text\" defaultValue={\"\"} disabled />\r\n        ) : (\r\n          <React.Fragment>\r\n            <Form.Control\r\n              aria-label=\"Block Merkle\"\r\n              name=\"merkleRoot\"\r\n              className=\"text-truncate\"\r\n              type=\"text\"\r\n              value={\r\n                props.chain && props.index > 0\r\n                  ? state.chain[props.index].merkleRoot\r\n                  : props.chain\r\n                  ? \"\"\r\n                  : state.preview.merkleRoot\r\n              }\r\n              readOnly\r\n            />\r\n            {props.chain && (\r\n              <InputGroup.Append>\r\n                <InputGroup.Text\r\n                  aria-label=\"Show Trans\"\r\n                  className=\"show-trans-eye\"\r\n                  onClick={() => handleViewTransactions()}\r\n                >\r\n                  {state.chain[props.index].showTrans ? \"🙈\" : \"🙉\"}\r\n                </InputGroup.Text>\r\n              </InputGroup.Append>\r\n            )}\r\n          </React.Fragment>\r\n        )}\r\n      </InputGroup>\r\n\r\n      {!props.chain && state.preview.valid && (\r\n        <Button aria-label=\"Add Block\" className=\"mt-2\" variant=\"success\" block onClick={() => handleAddBlock()}>\r\n          <h4 className=\"my-0\">Add Block</h4>\r\n        </Button>\r\n      )}\r\n    </Form>\r\n  );\r\n}\r\n","import { Tree } from \"./Tree\";\r\nimport { ITransaction } from \"../typings/AppTypes\";\r\nimport { digestMessage } from \"./conversion\";\r\n\r\nexport async function calculateMerkleTreeFormation(\r\n  verifiedTrans: ITransaction[],\r\n  selectedTrans: ITransaction[]\r\n): Promise<string[][]> {\r\n  let tree = [[\"\"]];\r\n  if (selectedTrans.length > 0) {\r\n    // need to make sure node's in tree appear in same order as in the verified transaction pane, regardless of selection order\r\n    const verifiedSignatures = verifiedTrans.map((trans) => trans.signature);\r\n    const selectedSignatures = selectedTrans.map((trans) => trans.signature);\r\n    let signatures = verifiedSignatures.filter((sig) => selectedSignatures.includes(sig));\r\n    tree = [signatures];\r\n\r\n    while (signatures.length !== 1) {\r\n      const hashArr = [] as string[];\r\n      for (let i = 0; i < signatures.length; i += 2) {\r\n        const hash = signatures[i + 1] ? await digestMessage(signatures[i] + signatures[i + 1]) : signatures[i];\r\n        hashArr.push(hash);\r\n      }\r\n\r\n      signatures = hashArr;\r\n      tree.push(hashArr);\r\n    }\r\n  }\r\n\r\n  return tree;\r\n}\r\n\r\nexport function getMerkleRoot(tree: string[][]): string {\r\n  return tree[tree.length - 1][0];\r\n}\r\n\r\nexport function flattenTree(tree: string[][]): string[] {\r\n  let flatTree = [] as string[];\r\n  // need to reverse each tree row so that printing produces the right order!\r\n  for (let i = 0; i < tree.length; i++) {\r\n    flatTree = flatTree.concat(tree[i].reverse());\r\n  }\r\n\r\n  return flatTree;\r\n}\r\n\r\nexport function drawTreeDiagramOnCanvas(merkleTree: string[][], canvasTree: Tree): void {\r\n  canvasTree.clear();\r\n  const flatTree = flattenTree(merkleTree);\r\n  for (let i = flatTree.length - 1; i >= 0; i--) {\r\n    canvasTree.addNode(flatTree[i]);\r\n  }\r\n  canvasTree.drawTree();\r\n}\r\n","import { ACTIONS } from \"../enums/AppDispatchActions\";\r\nimport { IAction, IBlock, IState, ITransaction } from \"../typings/AppTypes\";\r\nimport { digestMessage } from \"./conversion\";\r\n\r\nexport async function propagateBlockStatus(\r\n  state: IState,\r\n  dispatch: React.Dispatch<IAction>,\r\n  index: number,\r\n  prevHash: string,\r\n  currHash: string,\r\n  skipFirstUpdate: boolean,\r\n  newRoot?: string,\r\n  transactions?: ITransaction[],\r\n  timestamp = Date.now()\r\n): Promise<void> {\r\n  const newBlocks: IBlock[] = [];\r\n  for (let i = index; i < state.chain.length; i++) {\r\n    const merkleRoot = newRoot && i === index ? newRoot : state.chain[i].merkleRoot;\r\n    const valid = skipFirstUpdate && i === index ? state.chain[i].valid : false;\r\n    const showTrans = state.chain[i].showTrans ?? false;\r\n    currHash = i === index ? currHash : await digestMessage(i + prevHash + merkleRoot);\r\n    transactions = i === index && transactions ? transactions : state.chain[i].transactions;\r\n\r\n    newBlocks.push({ index: i, timestamp, prevHash, currHash, transactions, merkleRoot, valid, showTrans });\r\n\r\n    prevHash = currHash; // next block's prevHash is this block's currHash\r\n  }\r\n\r\n  dispatch({ type: ACTIONS.UPDATE_BLOCK, payload: { block: newBlocks } });\r\n}\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\n\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState, ITransaction } from \"../../typings/AppTypes\";\r\n\r\nimport { digestMessage } from \"../../utils/conversion\";\r\nimport { calculateMerkleTreeFormation, getMerkleRoot } from \"../../utils/merkleTree\";\r\nimport { propagateBlockStatus } from \"../../utils/propagate\";\r\n\r\ntype TChangeType = \"from\" | \"to\" | \"message\" | \"amount\";\r\ntype TInputChange<T = HTMLInputElement> = React.ChangeEvent<T>;\r\n\r\nexport default function BlockTrans({ index }: { index: number }): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const [transDetails, setTransDetails] = useState<ITransaction[]>(state.chain[index].transactions);\r\n\r\n  async function calculateNewMerkleRoot(newVal: number | string, i: number, type: TChangeType): Promise<void> {\r\n    const newTrans: ITransaction[] = JSON.parse(JSON.stringify(transDetails)); // deep copy\r\n\r\n    // update the changed value & signature\r\n    newTrans[i] = { ...newTrans[i], [type]: newVal };\r\n    const message = newTrans[i].to + newTrans[i].from + newTrans[i].amount + newTrans[i].message;\r\n    newTrans[i].signature = await digestMessage(message);\r\n\r\n    // calculate new merkle root and currHash\r\n    const prevHash = state.chain[index].prevHash;\r\n    const newTree = await calculateMerkleTreeFormation(newTrans, newTrans);\r\n    const newRoot = getMerkleRoot(newTree);\r\n    const newHash = await digestMessage(index + prevHash + newRoot);\r\n\r\n    setTransDetails(newTrans);\r\n    await propagateBlockStatus(state, dispatch, index, prevHash, newHash, false, newRoot, newTrans);\r\n  }\r\n\r\n  return (\r\n    <div className=\"row flex-nowrap overflow-auto mx-1 p-2 rounded bg-dark\">\r\n      {transDetails.map((transaction, i) => {\r\n        return (\r\n          <div\r\n            className={\r\n              (transDetails.length > 1 && i !== transDetails.length - 1 ? \"mr-2 \" : \"\") +\r\n              \"col-12 bg-light border border-dark p-1 rounded\"\r\n            }\r\n            key={`sig:${i}`}\r\n          >\r\n            <Form.Group className=\"mb-2 text-center\">\r\n              <Form.Control\r\n                className=\"text-truncate\"\r\n                type=\"text\"\r\n                value={transaction.from}\r\n                onChange={(e: TInputChange) => calculateNewMerkleRoot(e.target.value, i, \"from\")}\r\n              />\r\n              <h3 className=\"my-0\">↓</h3>\r\n              <Form.Control\r\n                className=\"text-truncate\"\r\n                type=\"text\"\r\n                value={transaction.to}\r\n                onChange={(e: TInputChange) => calculateNewMerkleRoot(e.target.value, i, \"to\")}\r\n              />\r\n            </Form.Group>\r\n\r\n            <InputGroup className=\"mb-2\">\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>Msg</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                rows={3}\r\n                value={transaction.message}\r\n                onChange={(e: TInputChange<HTMLTextAreaElement>) =>\r\n                  calculateNewMerkleRoot(e.target.value, i, \"message\")\r\n                }\r\n              />\r\n            </InputGroup>\r\n\r\n            <InputGroup className=\"mb-2\">\r\n              <Form.Control\r\n                type=\"number\"\r\n                value={transaction.amount ?? 0}\r\n                onChange={(e: TInputChange) => calculateNewMerkleRoot(e.target.value, i, \"amount\")}\r\n              />\r\n              <InputGroup.Append>\r\n                <InputGroup.Text>LC</InputGroup.Text>\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n\r\n            <InputGroup>\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>Sig</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                key={transaction.signature}\r\n                className=\"text-truncate\"\r\n                type=\"text\"\r\n                defaultValue={transaction.signature}\r\n                readOnly\r\n              />\r\n            </InputGroup>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useRef, useContext } from \"react\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { IAction, IState } from \"../../typings/AppTypes\";\r\nimport { digestMessage, randomHash } from \"../../utils/conversion\";\r\n// import { propagateBlockStatus } from \"../../utils/propagate\";\r\n\r\nimport \"./Block.scss\";\r\n\r\ninterface IStatisticsProps {\r\n  chain: boolean;\r\n  index: number;\r\n  prevHash?: string;\r\n}\r\n\r\nexport default function Statistics(props: IStatisticsProps): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const nonce = useRef<number>(0);\r\n  const [header, setHeader] = useState<number>(0);\r\n  const [target, setTarget] = useState<string>(\"\");\r\n  const [solution, setSolution] = useState<string>(\"\");\r\n  const [disableMineBtn, setDisableMineBtn] = useState<boolean>(false);\r\n\r\n  async function handleMine() {\r\n    // const { index, prevHash } = props;\r\n\r\n    nonce.current = Math.round(Math.random() * 1e6);\r\n\r\n    setDisableMineBtn(true);\r\n    // make target with 2 or 3 leading zeros\r\n    const numZeros = Math.round(Math.random()) + 2;\r\n    const re = new RegExp(`^.{0,${numZeros}}`, \"g\");\r\n    const zerosStr = new Array(numZeros).fill(\"0\").join(\"\");\r\n    let targetHash = await digestMessage(randomHash(20));\r\n    targetHash = targetHash.replace(re, zerosStr);\r\n    setTarget(targetHash);\r\n\r\n    // mine block for a new current hash (solution)\r\n    let candidateSolution = \"\";\r\n    let header = nonce.current;\r\n    while (header <= Number.MAX_SAFE_INTEGER) {\r\n      candidateSolution = await digestMessage(header.toString());\r\n      setSolution(candidateSolution);\r\n      setHeader(header++);\r\n\r\n      // stopping condition if first numZero characters are all 0\r\n      if (candidateSolution.substr(0, numZeros).match(/^0+$/)) break;\r\n    }\r\n    setDisableMineBtn(false);\r\n\r\n    const payload = {\r\n      [!props.chain ? \"preview\" : \"block\"]: {\r\n        ...(!props.chain ? state.preview : state.chain[props.index]),\r\n        timestamp: Date.now(),\r\n        prevHash: state.chain[(!props.chain ? state.preview.index : props.index) - 1].currHash,\r\n        currHash: candidateSolution,\r\n        valid: candidateSolution <= targetHash\r\n      }\r\n    };\r\n\r\n    const type = !props.chain ? ACTIONS.UPDATE_PREVIEW : ACTIONS.UPDATE_BLOCK;\r\n    dispatch({ type, payload });\r\n\r\n    // propagate changes if needed\r\n    // if (index && prevHash) await propagateBlockStatus(state, dispatch, index, prevHash, candidateSolution, true);\r\n  }\r\n\r\n  return (\r\n    <Form aria-label=\"Block Statistics\" className={props.chain ? \"my-3\" : \"col-11 col-lg-5 mx-3\"}>\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Nonce</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Block Nonce\"\r\n          name=\"nonce\"\r\n          type=\"number\"\r\n          key={nonce.current}\r\n          defaultValue={nonce.current}\r\n          disabled\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Header</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control aria-label=\"Block Header\" name=\"header\" type=\"number\" value={header} disabled />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Target</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Block Target\"\r\n          name=\"target\"\r\n          className=\"text-truncate\"\r\n          type=\"text\"\r\n          value={target}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Sol&apos;n</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Block Solution\"\r\n          name=\"solution\"\r\n          className={\r\n            \"text-truncate \" +\r\n            ((props.chain && state.chain[props.index].valid) || (!props.chain && state.preview.valid)\r\n              ? \"valid-solution\"\r\n              : \"invalid-solution\")\r\n          }\r\n          type=\"text\"\r\n          value={solution}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <Button\r\n        aria-label=\"Block Mine\"\r\n        variant=\"primary\"\r\n        className=\"btn-block d-block mt-2\"\r\n        disabled={\r\n          (props.chain && state.chain?.[props.index].valid) ||\r\n          (!props.chain && (state.preview.valid || state.selectedTrans.length === 0)) ||\r\n          disableMineBtn\r\n        }\r\n        onClick={() => handleMine()}\r\n      >\r\n        <h4 className=\"my-1\">\r\n          Mine\r\n          {disableMineBtn && <span className=\"position-absolute spinner-border spinner-border-md mx-4\" role=\"status\" />}\r\n        </h4>\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport Block from \"../components/Block/Block\";\r\nimport BlockTrans from \"../components/Block/BlockTrans\";\r\nimport Statistics from \"../components/Block/Statistics\";\r\nimport NavMenu from \"../components/NavMenu/NavMenu\";\r\nimport { AppContext } from \"../context/AppContext\";\r\nimport { IState } from \"../typings/AppTypes\";\r\n\r\nexport default function Chain(): JSX.Element {\r\n  const { state } = useContext(AppContext) as { state: IState };\r\n\r\n  return (\r\n    <div>\r\n      <NavMenu />\r\n\r\n      <div className=\"mx-3 row flex-nowrap overflow-auto\">\r\n        {state.chain.map((block) => (\r\n          <div className=\"block mx-2 flex-column flex-shrink-0\" key={block.prevHash}>\r\n            <Block chain={true} index={block.index} />\r\n            <Statistics chain={true} index={block.index} prevHash={block.prevHash} />\r\n            {block.showTrans && <BlockTrans index={block.index} />}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { IAction, IState, ITransaction } from \"../../typings/AppTypes\";\r\nimport { calculateMerkleTreeFormation, getMerkleRoot } from \"../../utils/merkleTree\";\r\n\r\nimport \"./Transaction.scss\";\r\n\r\nexport default function TransactionItems(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  async function selectTransaction(transaction: ITransaction): Promise<void> {\r\n    let selectedTrans: ITransaction[] = JSON.parse(JSON.stringify(state.selectedTrans));\r\n    const signatures = selectedTrans.map((x) => x.signature);\r\n    const included = signatures.includes(transaction.signature);\r\n\r\n    if (selectedTrans.length < 4 || included) {\r\n      // if just selected - push onto stack, else remove it\r\n      // adjust backgrounds according to selection/deselection\r\n      if (!included) {\r\n        selectedTrans.push(transaction);\r\n      } else {\r\n        selectedTrans = selectedTrans.filter((x) => x.signature !== transaction.signature);\r\n      }\r\n\r\n      const newTree = await calculateMerkleTreeFormation(state.verifiedTrans, selectedTrans);\r\n      const newPreview = {\r\n        ...state.preview,\r\n        merkleRoot: getMerkleRoot(newTree),\r\n        valid: false\r\n      };\r\n\r\n      dispatch({ type: ACTIONS.UPDATE_SELECTED_TRANS, payload: { selectedTrans } });\r\n      dispatch({ type: ACTIONS.UPDATE_PREVIEW, payload: { preview: newPreview } });\r\n    } else {\r\n      alert(\"You can mine at most 4 transactions at a time!\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <h3 aria-label=\"Title\" className=\"font-weight-bold\">\r\n        Verified Transactions\r\n      </h3>\r\n      <div className=\"trans-list row flex-nowrap overflow-auto bg-dark mx-1 px-2 rounded\">\r\n        {state.verifiedTrans.map((transaction) => {\r\n          return (\r\n            <Form\r\n              aria-label=\"Transaction Information\"\r\n              className={\r\n                \"trans-item \" +\r\n                (state.selectedTrans.map((x) => x.signature).includes(transaction.signature) ? \"selected\" : \"not-selected\") // prettier-ignore\r\n              }\r\n              onClick={() => selectTransaction(transaction)}\r\n              key={`sig:${transaction.signature}`}\r\n            >\r\n              <Form.Group className=\"mb-2 text-center\">\r\n                <Form.Control\r\n                  aria-label=\"Transaction From\"\r\n                  name=\"from\"\r\n                  className=\"text-truncate\"\r\n                  type=\"text\"\r\n                  defaultValue={transaction.from}\r\n                  readOnly\r\n                />\r\n                <h3 className=\"my-0\">↓</h3>\r\n                <Form.Control\r\n                  aria-label=\"Transaction To\"\r\n                  name=\"to\"\r\n                  className=\"text-truncate\"\r\n                  type=\"text\"\r\n                  defaultValue={transaction.to}\r\n                  readOnly\r\n                />\r\n              </Form.Group>\r\n\r\n              <InputGroup className=\"mb-2\">\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>Msg</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <Form.Control\r\n                  aria-label=\"Transaction Message\"\r\n                  name=\"message\"\r\n                  as=\"textarea\"\r\n                  defaultValue={transaction.message}\r\n                  readOnly\r\n                />\r\n              </InputGroup>\r\n\r\n              <InputGroup className=\"mb-2\">\r\n                <Form.Control\r\n                  aria-label=\"Transaction Amount\"\r\n                  name=\"amount\"\r\n                  type=\"number\"\r\n                  defaultValue={transaction.amount}\r\n                  disabled\r\n                />\r\n                <InputGroup.Append>\r\n                  <InputGroup.Text>LC</InputGroup.Text>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n\r\n              <InputGroup>\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>Sig</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <Form.Control\r\n                  aria-label=\"Transaction Signature\"\r\n                  name=\"signature\"\r\n                  className=\"text-truncate\"\r\n                  type=\"text\"\r\n                  defaultValue={transaction.signature}\r\n                  readOnly\r\n                />\r\n              </InputGroup>\r\n            </Form>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { ITransaction } from \"../typings/AppTypes\";\r\n\r\n// modified from https://github.com/foqc/bfs-canvas-tree\r\ninterface ICoordinate {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nclass Node {\r\n  value: string;\r\n  children: Node[];\r\n  parent: Node | null;\r\n  pos: ICoordinate;\r\n\r\n  constructor(value: string) {\r\n    this.value = value;\r\n    this.children = [];\r\n    this.parent = null;\r\n    this.pos = { x: 0, y: 0 };\r\n  }\r\n\r\n  get left(): Node {\r\n    return this.children[0];\r\n  }\r\n\r\n  set left(node: Node) {\r\n    node.parent = this;\r\n    this.children[0] = node;\r\n  }\r\n\r\n  get right(): Node {\r\n    return this.children[1];\r\n  }\r\n\r\n  set right(node: Node) {\r\n    node.parent = this;\r\n    this.children[1] = node;\r\n  }\r\n\r\n  get position(): ICoordinate {\r\n    return this.pos;\r\n  }\r\n\r\n  set position(position: ICoordinate) {\r\n    this.pos = position;\r\n  }\r\n}\r\n\r\nexport class Tree {\r\n  #root: Node | null;\r\n  #transactionSignatures: string[];\r\n  #startPosition: ICoordinate;\r\n  #dim: { width: number; height: number };\r\n  #ctx: CanvasRenderingContext2D | null;\r\n\r\n  constructor(canvas: HTMLCanvasElement, transactions: ITransaction[]) {\r\n    const xStart = window.innerWidth < 1200 ? window.innerWidth * 1.8 : (window.innerWidth / 2) * 0.7;\r\n    this.#root = null;\r\n    this.#transactionSignatures = transactions.map((transaction) => transaction.signature.slice(0, 25) + \"...\");\r\n    this.#startPosition = { x: xStart, y: 5 };\r\n    this.#ctx = canvas.getContext(\"2d\");\r\n    this.#dim = { width: canvas.width, height: canvas.height };\r\n  }\r\n\r\n  calculatePosition({ x, y }: ICoordinate, isLeft = false): ICoordinate {\r\n    const offset = 50;\r\n    return { x: isLeft ? x - offset * 6 : x + offset * 6, y: y + offset };\r\n  }\r\n\r\n  clear(): void {\r\n    if (this.#ctx) {\r\n      this.#ctx.clearRect(0, 0, this.#dim.width, this.#dim.height);\r\n    }\r\n  }\r\n\r\n  addNode(value: string): void {\r\n    const newNode = new Node(value !== \"\" ? value.slice(0, 25) + \"...\" : \"\");\r\n    if (!this.#root) {\r\n      newNode.position = this.#startPosition;\r\n      this.#root = newNode;\r\n    } else {\r\n      // start at root, if no node on left add and break, likewise for right\r\n      // only move in direction that does not have both children\r\n      let node = this.#root;\r\n      while (node) {\r\n        if (!node.left) {\r\n          newNode.position = this.calculatePosition(node.position, true);\r\n          node.left = newNode;\r\n          break;\r\n        }\r\n\r\n        if (!node.right) {\r\n          newNode.position = this.calculatePosition(node.position);\r\n          node.right = newNode;\r\n          break;\r\n        }\r\n\r\n        node = !node.left.left || !node.left.right ? node.left : node.right;\r\n      }\r\n    }\r\n  }\r\n\r\n  drawTree(): void {\r\n    const queue = [] as Node[];\r\n    queue.push(this.#root as Node);\r\n\r\n    // level order traversal\r\n    while (queue.length !== 0) {\r\n      const node = queue.shift();\r\n      const rectWidth = node && node.value.length * 9;\r\n\r\n      if (this.#ctx && rectWidth && node) {\r\n        // draw the root node\r\n        const { x, y } = node.position;\r\n        this.#ctx.beginPath();\r\n\r\n        this.#ctx.font = \"1rem Arial\";\r\n        this.#ctx.strokeStyle = \"#000\";\r\n\r\n        const leafOrBodyColor = this.#transactionSignatures.includes(node.value) ? \"#ddf\" : \"#ff0a\";\r\n        this.#ctx.fillStyle = node.value === this.#root?.value ? \"#dfd\" : leafOrBodyColor;\r\n\r\n        this.#ctx.fillRect(x - rectWidth / 2, y + 5, rectWidth, 30);\r\n        this.#ctx.fillStyle = \"#000\";\r\n        this.#ctx.fillText(node.value, x + 10 - rectWidth / 2, y + 27);\r\n\r\n        // draw it's children\r\n        node.children.forEach((child, i) => {\r\n          child.position.x = i === 1 ? child.position.x - 150 : child.position.x + 150; // avoid overlap\r\n          queue.push(child);\r\n          if (this.#ctx) {\r\n            this.#ctx.beginPath();\r\n            this.#ctx.moveTo(x + 0.5, y + 35);\r\n            this.#ctx.lineTo(child.position.x + 0.5, child.position.y + 5);\r\n            this.#ctx.stroke();\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import React, { useContext, useEffect, useRef } from \"react\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IState } from \"../../typings/AppTypes\";\r\nimport { calculateMerkleTreeFormation, drawTreeDiagramOnCanvas } from \"../../utils/merkleTree\";\r\nimport { Tree } from \"../../utils/Tree\";\r\n\r\nexport default function PreviewTree(): JSX.Element {\r\n  const { state } = useContext(AppContext) as { state: IState };\r\n\r\n  const treeCanvas = useRef<HTMLCanvasElement | null>(null);\r\n\r\n  useEffect(() => {\r\n    async function drawTree() {\r\n      if (treeCanvas.current) {\r\n        const tree = await calculateMerkleTreeFormation(state.verifiedTrans, state.selectedTrans);\r\n        const canvasTree = new Tree(treeCanvas.current, state.selectedTrans);\r\n        drawTreeDiagramOnCanvas(tree, canvasTree);\r\n      }\r\n    }\r\n\r\n    drawTree();\r\n  }, [state.selectedTrans, state.verifiedTrans]);\r\n\r\n  return (\r\n    <div className=\"mb-2 d-none d-lg-block\">\r\n      <h4 className=\"font-weight-bold text-center\">Merkle Tree Visualization</h4>\r\n      <canvas ref={treeCanvas} className=\"border border-dark rounded\" width={window.outerWidth * 0.7} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport NavMenu from \"../components/NavMenu/NavMenu\";\r\nimport Block from \"../components/Block/Block\";\r\nimport TransactionItems from \"../components/Transaction/TransactionItems\";\r\nimport PreviewTree from \"../components/Transaction/PreviewTree\";\r\nimport Statistics from \"../components/Block/Statistics\";\r\n\r\nexport default function Mine(): JSX.Element {\r\n  return (\r\n    <div>\r\n      <NavMenu />\r\n      <TransactionItems />\r\n      <div className=\"container-fluid row d-flex justify-content-center mx-auto my-3\">\r\n        <PreviewTree />\r\n        <Statistics chain={false} index={0} />\r\n        <Block chain={false} index={0} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { ACTIONS } from \"../enums/AppDispatchActions\";\r\nimport { IAction, IState, IUser, ITransaction, IBlock, IMainUser } from \"../typings/AppTypes\";\r\n\r\nfunction deepCopy<T>(obj: T): T {\r\n  return JSON.parse(JSON.stringify(obj));\r\n}\r\n\r\nexport const AppReducer = (state: IState, action: IAction): IState => {\r\n  switch (action.type) {\r\n    case ACTIONS.ADD_VERIFIED_TRANS: {\r\n      const { trans } = action.payload as { trans: ITransaction };\r\n      const verifiedTrans = [...state.verifiedTrans, deepCopy(trans)];\r\n      localStorage.setItem(\"verTrans\", JSON.stringify(verifiedTrans, null, 2));\r\n      return { ...state, verifiedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_VERIFIED_TRANS: {\r\n      const selectedTransSignatures = state.selectedTrans.map((x) => x.signature);\r\n      const verifiedTrans = state.verifiedTrans.filter((x) => !selectedTransSignatures.includes(x.signature));\r\n      localStorage.setItem(\"verTrans\", JSON.stringify(verifiedTrans, null, 2));\r\n      return { ...state, verifiedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_SELECTED_TRANS: {\r\n      const { selectedTrans } = action.payload as { selectedTrans: ITransaction[] };\r\n      localStorage.setItem(\"selTrans\", JSON.stringify(selectedTrans, null, 2));\r\n      return { ...state, selectedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_USERS: {\r\n      const { users } = action.payload as { users: IUser[] };\r\n      localStorage.setItem(\"users\", JSON.stringify(users, null, 2));\r\n      return { ...state, users };\r\n    }\r\n\r\n    case ACTIONS.SET_MAIN_USER: {\r\n      const { user } = action.payload as { user: IMainUser };\r\n      localStorage.setItem(\"user\", JSON.stringify(user, null, 2));\r\n      return { ...state, user };\r\n    }\r\n\r\n    case ACTIONS.ADD_BLOCK: {\r\n      const { block } = action.payload as { block: IBlock };\r\n      const chain = [...deepCopy(state.chain), deepCopy(block)];\r\n      localStorage.setItem(\"chain\", JSON.stringify(chain, null, 2));\r\n      return { ...state, chain };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_BLOCK: {\r\n      const { block } = action.payload as { block: IBlock | IBlock[] };\r\n      const blocks = Array.isArray(block) ? deepCopy(block) : [deepCopy(block)];\r\n      const chain = deepCopy(state.chain);\r\n\r\n      blocks.forEach((b) => (chain[b.index] = deepCopy(b)));\r\n\r\n      localStorage.setItem(\"chain\", JSON.stringify(chain, null, 2));\r\n      return { ...state, chain };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_PREVIEW: {\r\n      const { preview } = action.payload as { preview: IBlock };\r\n      localStorage.setItem(\"preview\", JSON.stringify(preview, null, 2));\r\n      return { ...state, preview: deepCopy(preview) };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { useMemo, useReducer } from \"react\";\r\nimport { Route, BrowserRouter as Router, Redirect } from \"react-router-dom\";\r\n\r\nimport Wallet from \"../../pages/Wallet\";\r\nimport Chain from \"../../pages/Chain\";\r\nimport Mine from \"../../pages/Mine\";\r\n\r\nimport { AppReducer } from \"../../reducers/AppReducer\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\n\r\nimport \"./App.scss\";\r\n\r\nexport default function App(): JSX.Element {\r\n  const [state, dispatch] = useReducer(AppReducer, {\r\n    verifiedTrans: JSON.parse(localStorage.getItem(\"verTrans\") as string) ?? [],\r\n    selectedTrans: JSON.parse(localStorage.getItem(\"selTrans\") as string) ?? [],\r\n    users: JSON.parse(localStorage.getItem(\"users\") as string) ?? [],\r\n    user: JSON.parse(localStorage.getItem(\"user\") as string) ?? {},\r\n    chain: JSON.parse(localStorage.getItem(\"chain\") as string) ?? [\r\n      {\r\n        index: 0,\r\n        prevHash: \"\",\r\n        currHash: new Array(64).fill(\"0\").join(\"\"),\r\n        transactions: [],\r\n        timestamp: Date.parse(\"04/31/2021\"),\r\n        merkleRoot: \"\",\r\n        valid: true\r\n      }\r\n    ],\r\n    preview: JSON.parse(localStorage.getItem(\"preview\") as string) ?? {\r\n      index: 1,\r\n      prevHash: new Array(64).fill(\"0\").join(\"\"),\r\n      currHash: \"\",\r\n      transactions: [],\r\n      timestamp: Date.parse(\"04/31/2021\"),\r\n      merkleRoot: \"\",\r\n      valid: false\r\n    }\r\n  });\r\n\r\n  // prevent re-rendering children when App re-renders\r\n  const value = useMemo(() => ({ state, dispatch }), [state, dispatch]);\r\n\r\n  return (\r\n    <Router basename={\"/LibraCoin\"}>\r\n      <AppContext.Provider value={value}>\r\n        <Route exact path=\"/\">\r\n          <Redirect to=\"/wallet\" />\r\n        </Route>\r\n        <Route path=\"/wallet\" component={Wallet} />\r\n        <Route path=\"/mine\" component={Mine} />\r\n        <Route path=\"/blockchain\" component={Chain} />\r\n      </AppContext.Provider>\r\n    </Router>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./components/App/App\";\r\nimport \"bootstrap/scss/bootstrap.scss\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}