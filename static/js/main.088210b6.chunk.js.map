{"version":3,"sources":["styles/GlobalStyles.tsx","context/AppContext.ts","reducers/AppReducer.ts","styles/LoadingStyles.tsx","components/App/Loading.tsx","components/App/App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx","enums/AppDispatchActions.ts"],"names":["GlobalStyle","createGlobalStyle","StyledInputGroupText","styled","InputGroup","Text","AppContext","React","createContext","undefined","AppReducer","state","action","type","ACTIONS","ADD_VERIFIED_TRANS","trans","payload","verifiedTrans","localStorage","setItem","JSON","stringify","UPDATE_VERIFIED_TRANS","selectedTransSignatures","selectedTrans","map","x","signature","filter","includes","UPDATE_SELECTED_TRANS","UPDATE_USERS","users","SET_MAIN_USER","user","ADD_BLOCK","block","chain","UPDATE_BLOCK","blocks","Array","isArray","forEach","b","index","UPDATE_PREVIEW","preview","ASSIGN_COPIED","copied","SET_SIGNED","signed","sent","newSent","wallet","SET_VALIDATED","validated","SET_DETAILS","details","StyledSpinner","Spinner","Loading","animation","variant","role","className","NavMenu","lazy","Wallet","Mine","Chain","App","useReducer","parse","getItem","publicKey","privateKey","balance","prevHash","currHash","fill","join","transactions","timestamp","Date","merkleRoot","valid","from","to","amount","toFixed","msg","dispatch","value","useMemo","Fragment","fallback","Provider","basename","exact","path","component","reportWebVitals","onPerfEntry","process","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.088210b6.chunk.js","sourcesContent":["import { InputGroup } from \"react-bootstrap\";\r\nimport styled, { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n\r\nexport const StyledInputGroupText = styled(InputGroup.Text)`\r\n  &&& {\r\n    font-weight: bold;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { IAction, IState } from \"../typings/AppTypes\";\r\n\r\ntype TAppContext = { state: IState; dispatch: React.Dispatch<IAction> } | undefined;\r\n\r\nexport const AppContext = React.createContext<TAppContext>(undefined);\r\n","import { ACTIONS } from \"../enums/AppDispatchActions\";\r\nimport { IAction, IState, IUser, ITransaction, IBlock, IMainUser } from \"../typings/AppTypes\";\r\n\r\nexport const AppReducer = (state: IState, action: IAction): IState => {\r\n  switch (action.type) {\r\n    case ACTIONS.ADD_VERIFIED_TRANS: {\r\n      const { trans } = action.payload as { trans: ITransaction };\r\n      const verifiedTrans = [...state.verifiedTrans, { ...trans }];\r\n      localStorage.setItem(\"verTrans\", JSON.stringify(verifiedTrans, null, 2));\r\n      return { ...state, verifiedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_VERIFIED_TRANS: {\r\n      const selectedTransSignatures = state.selectedTrans.map((x) => x.signature);\r\n      const verifiedTrans = state.verifiedTrans.filter((x) => !selectedTransSignatures.includes(x.signature));\r\n      localStorage.setItem(\"verTrans\", JSON.stringify(verifiedTrans, null, 2));\r\n      return { ...state, verifiedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_SELECTED_TRANS: {\r\n      const { selectedTrans } = action.payload as { selectedTrans: ITransaction[] };\r\n      localStorage.setItem(\"selTrans\", JSON.stringify(selectedTrans, null, 2));\r\n      return { ...state, selectedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_USERS: {\r\n      const { users } = action.payload as { users: IUser[] };\r\n      localStorage.setItem(\"users\", JSON.stringify(users, null, 2));\r\n      return { ...state, users };\r\n    }\r\n\r\n    case ACTIONS.SET_MAIN_USER: {\r\n      const { user } = action.payload as { user: IMainUser };\r\n      localStorage.setItem(\"user\", JSON.stringify(user, null, 2));\r\n      return { ...state, user };\r\n    }\r\n\r\n    case ACTIONS.ADD_BLOCK: {\r\n      const { block } = action.payload as { block: IBlock };\r\n      const chain = [...state.chain, { ...block }];\r\n      localStorage.setItem(\"chain\", JSON.stringify(chain, null, 2));\r\n      return { ...state, chain };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_BLOCK: {\r\n      const { block } = action.payload as { block: IBlock | IBlock[] };\r\n      const blocks = Array.isArray(block) ? [...block] : [block];\r\n      const chain = [...state.chain];\r\n\r\n      blocks.forEach((b) => (chain[b.index] = { ...b }));\r\n\r\n      localStorage.setItem(\"chain\", JSON.stringify(chain, null, 2));\r\n      return { ...state, chain };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_PREVIEW: {\r\n      const { preview } = action.payload as { preview: IBlock };\r\n      localStorage.setItem(\"preview\", JSON.stringify(preview, null, 2));\r\n      return { ...state, preview: { ...preview } };\r\n    }\r\n\r\n    case ACTIONS.ASSIGN_COPIED: {\r\n      const { copied } = action.payload as { copied: string };\r\n      localStorage.setItem(\"copied\", copied);\r\n      return { ...state, copied };\r\n    }\r\n\r\n    case ACTIONS.SET_SIGNED: {\r\n      const { signed, sent } = action.payload as { signed: boolean; sent?: boolean };\r\n      const newSent = sent !== undefined ? sent : !signed;\r\n      const wallet = { ...state.wallet, signed, sent: newSent };\r\n      localStorage.setItem(\"wallet\", JSON.stringify(wallet, null, 2));\r\n      return { ...state, wallet };\r\n    }\r\n\r\n    case ACTIONS.SET_VALIDATED: {\r\n      const { validated } = action.payload as { validated: boolean };\r\n      localStorage.setItem(\"wallet\", JSON.stringify({ ...state.wallet, validated }, null, 2));\r\n      return { ...state, wallet: { ...state.wallet, validated } };\r\n    }\r\n\r\n    case ACTIONS.SET_DETAILS: {\r\n      const { details } = action.payload as { details: ITransaction };\r\n      localStorage.setItem(\"wallet\", JSON.stringify({ ...state.wallet, details }, null, 2));\r\n      return { ...state, wallet: { ...state.wallet, details } };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { Spinner } from \"react-bootstrap\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const StyledSpinner = styled(Spinner)`\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n`;\r\n","import React from \"react\";\r\nimport { StyledSpinner } from \"../../styles/LoadingStyles\";\r\n\r\nexport default function Loading(): JSX.Element {\r\n  return (\r\n    <StyledSpinner animation=\"border\" variant=\"secondary\" role=\"status\">\r\n      <span className=\"sr-only\">Loading...</span>\r\n    </StyledSpinner>\r\n  );\r\n}\r\n","import React, { useMemo, useReducer, Suspense, lazy } from \"react\";\r\nimport { Route, BrowserRouter as Router, Redirect, Switch } from \"react-router-dom\";\r\nimport logger from \"use-reducer-logger\";\r\n\r\nimport { AppReducer } from \"../../reducers/AppReducer\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\n\r\nimport { GlobalStyle } from \"../../styles/GlobalStyles\";\r\nimport Loading from \"./Loading\";\r\n\r\n// Code Splitting & Lazy Loading\r\nconst NavMenu = lazy(() => import(\"../NavMenu/NavMenu\"));\r\nconst Wallet = lazy(() => import(\"../../pages/Wallet\"));\r\nconst Mine = lazy(() => import(\"../../pages/Mine\"));\r\nconst Chain = lazy(() => import(\"../../pages/Chain\"));\r\n\r\nexport default function App(): JSX.Element {\r\n  const [state, dispatch] = useReducer(process.env.NODE_ENV === \"development\" ? logger(AppReducer) : AppReducer, {\r\n    verifiedTrans: JSON.parse(localStorage.getItem(\"verTrans\") as string) ?? [],\r\n    selectedTrans: JSON.parse(localStorage.getItem(\"selTrans\") as string) ?? [],\r\n    users: JSON.parse(localStorage.getItem(\"users\") as string) ?? [],\r\n    user: JSON.parse(localStorage.getItem(\"user\") as string) ?? { publicKey: \"\", privateKey: \"\", balance: 1000.0 },\r\n    chain: JSON.parse(localStorage.getItem(\"chain\") as string) ?? [\r\n      {\r\n        index: 0,\r\n        prevHash: \"\",\r\n        currHash: new Array(64).fill(\"0\").join(\"\"),\r\n        transactions: [],\r\n        timestamp: Date.parse(\"31 Apr 2021 00:00:00 UTC\"),\r\n        merkleRoot: \"\",\r\n        valid: true\r\n      }\r\n    ],\r\n    copied: \"\",\r\n    preview: JSON.parse(localStorage.getItem(\"preview\") as string) ?? {\r\n      index: 1,\r\n      prevHash: new Array(64).fill(\"0\").join(\"\"),\r\n      currHash: \"\",\r\n      transactions: [],\r\n      timestamp: Date.parse(\"31 Apr 2021 00:00:00 UTC\"),\r\n      merkleRoot: \"\",\r\n      valid: false\r\n    },\r\n    wallet: JSON.parse(localStorage.getItem(\"wallet\") as string) ?? {\r\n      sent: false,\r\n      signed: false,\r\n      validated: false,\r\n      details: { from: \"\", to: \"\", amount: (0).toFixed(2), msg: \"\", signature: \"\" }\r\n    }\r\n  });\r\n\r\n  // prevent re-rendering children when App re-renders\r\n  const value = useMemo(() => ({ state, dispatch }), [state, dispatch]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <GlobalStyle />\r\n\r\n      <Suspense fallback={<Loading />}>\r\n        <NavMenu />\r\n      </Suspense>\r\n\r\n      <AppContext.Provider value={value}>\r\n        <Router basename={\"/LibraCoin\"}>\r\n          <Suspense fallback={<Loading />}>\r\n            <Switch>\r\n              <Route exact path=\"/\">\r\n                <Redirect to=\"/wallet\" />\r\n              </Route>\r\n              <Route path=\"/wallet\" component={Wallet} />\r\n              <Route path=\"/mine\" component={Mine} />\r\n              <Route path=\"/blockchain\" component={Chain} />\r\n            </Switch>\r\n          </Suspense>\r\n        </Router>\r\n      </AppContext.Provider>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import { ReportHandler } from \"web-vitals\";\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\r\n  if (process.env.NODE_ENV !== \"production\" && onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      console.info(\"Reporting important metrics at \" + new Date(Date.now()));\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n// Read more: https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\n// interface IConfig {\r\n//   onUpdate: (arg: ServiceWorkerRegistration) => void;\r\n//   onSuccess: (arg: ServiceWorkerRegistration) => void;\r\n// }\r\n\r\nfunction registerValidSW(swUrl: string): void {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker === null) return;\r\n\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated pre-cached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              //   // Execute callback\r\n              //   if (config && config.onUpdate) {\r\n              //     config.onUpdate(registration);\r\n              //   }\r\n            } else {\r\n              // At this point, everything has been pre-cached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              //   // Execute callback\r\n              //   if (config && config.onSuccess) {\r\n              //     config.onSuccess(registration);\r\n              //   }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string): void {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, { headers: { \"Service-Worker\": \"script\" } })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\"No internet connection found. App is running in offline mode.\");\r\n    });\r\n}\r\n\r\nexport function register(): void {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/sw.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport function unregister(): void {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => registration.unregister())\r\n      .catch((error) => console.error(error.message));\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./components/App/App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/scss/bootstrap.scss\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// so that app works offline and loads faster due to caching\r\nserviceWorker.register();\r\n\r\n// https://bit.ly/CRA-vitals\r\nreportWebVitals(console.log);\r\n","export enum ACTIONS {\r\n  ADD_VERIFIED_TRANS = \"ADD_VERIFIED_TRANS\",\r\n  UPDATE_VERIFIED_TRANS = \"UPDATE_VERIFIED_TRANS\",\r\n  UPDATE_SELECTED_TRANS = \"UPDATE_SELECTED_TRANS\",\r\n  UPDATE_USERS = \"UPDATE_USERS\",\r\n  SET_MAIN_USER = \"SET_MAIN_USER\",\r\n  ADD_BLOCK = \"ADD_BLOCK\",\r\n  UPDATE_BLOCK = \"UPDATE_BLOCK\",\r\n  UPDATE_PREVIEW = \"UPDATE_PREVIEW\",\r\n  ASSIGN_COPIED = \"ASSIGN_COPIED\",\r\n  SET_SIGNED = \"SET_SIGNED\",\r\n  SET_VALIDATED = \"SET_VALIDATED\",\r\n  SET_DETAILS = \"SET_DETAILS\"\r\n}\r\n"],"sourceRoot":""}