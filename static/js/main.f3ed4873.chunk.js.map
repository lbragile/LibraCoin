{"version":3,"sources":["components/NavMenu/NavMenu.tsx","enums/AppDispatchActions.ts","context/AppContext.ts","utils/copyInput.ts","utils/conversion.ts","components/User/KeyGeneration.tsx","components/Transaction/Send.tsx","components/Transaction/Sign.tsx","components/Transaction/Transaction.tsx","components/User/UserItems.tsx","pages/Wallet.tsx","utils/mine.ts","utils/propagate.ts","components/Block/Statistics.tsx","components/Block/Block.tsx","utils/Tree.ts","utils/merkleTree.ts","components/Block/BlockTrans.tsx","components/Block/BlockChain.tsx","pages/Chain.tsx","components/Block/PreviewBlock.tsx","components/Transaction/TransactionItems.tsx","pages/Mine.tsx","reducers/AppReducer.ts","components/App/App.tsx","index.tsx"],"names":["NavMenu","Navbar","expand","className","Brand","aria-label","href","src","alt","width","Toggle","aria-controls","Collapse","id","Nav","Link","active","location","includes","ACTIONS","AppContext","React","createContext","undefined","copyKey","e","setCopied","type","index","totalUsers","visible","target","value","select","document","execCommand","blur","isPublic","newCopied","Array","fill","bufferToHex","hashBuffer","from","Uint8Array","map","b","toString","padStart","join","CryptoKeyToHex","format","key","a","window","crypto","subtle","exportKey","buf","digestMessage","message","msgUint8","TextEncoder","encode","digest","randomHash","len","getRandomValues","Uint32Array","KeyGeneration","useContext","state","dispatch","numRows","useRef","publicKeyRef","privateKeyRef","useState","copied","useEffect","user","publicKey","generateKey","name","namedCurve","privateKey","publicKeyStr","privateKeyStr","current","innerText","length","balance","Number","toFixed","mainUser","SET_MAIN_USER","payload","newUsers","users","UPDATE_USERS","addUser","InputGroup","Prepend","Text","Form","Control","as","rows","defaultValue","isValid","onFocus","onBlur","readOnly","ref","Feedback","Append","onClick","show","hiddenVal","Send","props","noValidate","onSubmit","handleSubmit","details","to","amount","disabled","placeholder","signature","Button","variant","signed","block","Sign","validated","pattern","required","step","userBalance","Math","min","max","checkAmount","Transaction","setValidated","setSigned","formDetails","preventDefault","form","currentTarget","checkValidity","formValues","Object","values","slice","input","ADD_VERIFIED_TRANS","trans","UserItems","i","JSON","parse","stringify","resetCopy","Wallet","createTarget","numZeros","targetHash","re","RegExp","zerosStr","replace","mine","nonce","setHeader","setTarget","setSolution","setIsValid","round","random","candidateSolution","header","MAX_SAFE_INTEGER","substr","split","every","bit","propagateBlockStatus","prevHash","currHash","skipFirstUpdate","newRoot","transactions","timestamp","Date","now","newBlocks","chain","merkleRoot","valid","showTrans","push","UPDATE_BLOCK","Statistics","disableMineBtn","setDisableMineBtn","solution","style","color","selectedTrans","handleMine","role","Block","setTimestamp","Fragment","Node","children","parent","pos","this","x","y","node","position","Tree","canvas","xStart","innerWidth","transaction","getContext","height","isLeft","offset","clearRect","newNode","left","calculatePosition","right","queue","shift","rectWidth","beginPath","font","strokeStyle","leafOrBodyColor","fillStyle","fillRect","fillText","forEach","child","moveTo","lineTo","stroke","calculateMerkleTreeFormation","verifiedTrans","setMerkleTree","tree","verifiedSignatures","selectedSignatures","signatures","filter","sig","hashArr","hash","getMerkleRoot","BlockTrans","transDetails","setTransDetails","calculateNewMerkleRoot","newVal","newTrans","newHash","Group","onChange","BlockChain","Chain","PreviewBlock","treeCanvas","merkleTree","setIndex","setPrevHash","canvasTree","clear","flatTree","concat","reverse","flattenTree","addNode","drawTree","drawTreeDiagramOnCanvas","outerWidth","ADD_BLOCK","UPDATE_VERIFIED_TRANS","UPDATE_SELECTED_TRANS","handleAddBlock","TransactionItems","included","alert","selectTransaction","Mine","deepCopy","obj","AppReducer","action","localStorage","setItem","selectedTransSignatures","blocks","isArray","App","useReducer","getItem","useMemo","basename","Provider","exact","path","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f3ed4873.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\n\r\nimport \"./NavMenu.scss\";\r\n\r\nexport default function NavMenu(): JSX.Element {\r\n  return (\r\n    <Navbar expand=\"lg\" className=\"mb-3\">\r\n      <Navbar.Brand aria-label=\"LibraCoin Logo\" href=\"https://github.com/lbragile/LibraCoin\">\r\n        <img src=\"./assets/libracoin-logo-256.png\" alt=\"LibraCoin Logo\" width=\"64\" />\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"ml-auto\">\r\n          <Nav.Link href=\"/LibraCoin/wallet\" active={location.href.includes(\"/wallet\")}>\r\n            Wallet\r\n          </Nav.Link>\r\n          <Nav.Link href=\"/LibraCoin/mine\" active={location.href.includes(\"/mine\")}>\r\n            Mine\r\n          </Nav.Link>\r\n          <Nav.Link href=\"/LibraCoin/blockchain\" active={location.href.includes(\"/blockchain\")}>\r\n            Blockchain\r\n          </Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\n","export enum ACTIONS {\r\n  ADD_VERIFIED_TRANS,\r\n  UPDATE_VERIFIED_TRANS,\r\n  UPDATE_SELECTED_TRANS,\r\n  UPDATE_USERS,\r\n  SET_MAIN_USER,\r\n  ADD_BLOCK,\r\n  UPDATE_BLOCK\r\n}\r\n","import React from \"react\";\r\nimport { IAction, IState } from \"../typings/AppTypes\";\r\n\r\ntype TAppContext = { state: IState; dispatch: React.Dispatch<IAction> } | undefined;\r\n\r\nexport const AppContext = React.createContext<TAppContext>(undefined);\r\n","export function copyKey(\r\n  e: React.FocusEvent<HTMLTextAreaElement | HTMLInputElement>,\r\n  setCopied: (arg: boolean[]) => void,\r\n  type?: \"public\" | \"private\",\r\n  index?: number,\r\n  totalUsers?: number\r\n): void {\r\n  const visible = !e.target.value.includes(\"◦\");\r\n  if (visible) {\r\n    e.target.select();\r\n    document.execCommand(\"copy\");\r\n  } else {\r\n    e.target.blur();\r\n  }\r\n\r\n  if (type) {\r\n    // wallet page, copying keys (public / private)\r\n    const isPublic = type === \"public\";\r\n    setCopied([isPublic, !isPublic && visible]);\r\n  } else {\r\n    // user items, copying public key\r\n    const newCopied = new Array(totalUsers).fill(false);\r\n    newCopied[index as number] = true;\r\n    setCopied(newCopied);\r\n  }\r\n}\r\n","import { TextEncoder } from \"text-encoding\";\r\n\r\nexport function bufferToHex(hashBuffer: ArrayBuffer): string {\r\n  const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\r\n  const hashHex = hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\"); // convert bytes to hex string\r\n  return hashHex;\r\n}\r\n\r\nexport async function CryptoKeyToHex(format: string, key: CryptoKey): Promise<string> {\r\n  const buf = (await window.crypto.subtle.exportKey(format, key)) as ArrayBuffer;\r\n  return bufferToHex(buf);\r\n}\r\n\r\nexport async function digestMessage(message: string): Promise<string> {\r\n  const msgUint8 = new TextEncoder().encode(message); // encode as (utf-8) Uint8Array\r\n  const hashBuffer = await window.crypto.subtle.digest(\"SHA-256\", msgUint8); // hash the message\r\n  return bufferToHex(hashBuffer);\r\n}\r\n\r\nexport function randomHash(len: number): string {\r\n  return bufferToHex(window.crypto.getRandomValues(new Uint32Array(len)));\r\n}\r\n","import React, { useRef, useState, useContext, useEffect } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\n\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState } from \"../../typings/AppTypes\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { copyKey } from \"../../utils/copyInput\";\r\nimport { CryptoKeyToHex } from \"../../utils/conversion\";\r\n\r\nimport \"./User.scss\";\r\n\r\nexport default function KeyGeneration(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const numRows = useRef(4);\r\n  const publicKeyRef = useRef<HTMLTextAreaElement>(null);\r\n  const privateKeyRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n  const [copied, setCopied] = useState<boolean[]>([false, false]);\r\n\r\n  // add a user if it's the first time visiting\r\n  useEffect(() => {\r\n    async function addUser(): Promise<void> {\r\n      if (!state.user.publicKey) {\r\n        const { publicKey, privateKey } = await window.crypto.subtle.generateKey(\r\n          { name: \"ECDSA\", namedCurve: \"P-256\" },\r\n          true,\r\n          [\"sign\", \"verify\"]\r\n        );\r\n\r\n        const publicKeyStr = await CryptoKeyToHex(\"spki\", publicKey as CryptoKey);\r\n        const privateKeyStr = await CryptoKeyToHex(\"pkcs8\", privateKey as CryptoKey);\r\n        if (publicKeyRef.current && privateKeyRef.current) {\r\n          publicKeyRef.current.innerText = publicKeyStr;\r\n          privateKeyRef.current.innerText = new Array(privateKeyStr.length).fill(\"◦\").join(\"\");\r\n        }\r\n\r\n        const balance = Number(1000).toFixed(2);\r\n        const mainUser = { publicKey: publicKeyStr, privateKey: privateKeyStr, balance };\r\n        dispatch({ type: ACTIONS.SET_MAIN_USER, payload: { user: mainUser } });\r\n\r\n        const newUsers = [...state.users, { publicKey: publicKeyStr, balance }];\r\n        dispatch({ type: ACTIONS.UPDATE_USERS, payload: { users: newUsers } });\r\n      }\r\n    }\r\n\r\n    addUser();\r\n  }, [dispatch, state.user.publicKey, state.users]);\r\n\r\n  const togglePrivateKey = () => {\r\n    const show = privateKeyRef.current?.value.includes(\"◦\");\r\n    const hiddenVal = new Array(state.user.privateKey.length).fill(\"◦\").join(\"\");\r\n    (privateKeyRef.current as HTMLTextAreaElement).value = show ? state.user.privateKey : hiddenVal;\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid d-flex justify-content-center mx-auto row my-5\">\r\n      <InputGroup className=\"user-key col-12 col-lg-5 pl-3 pl-lg-0\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Public</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n\r\n        <Form.Control\r\n          aria-label=\"publicKey\"\r\n          as=\"textarea\"\r\n          rows={numRows.current}\r\n          className=\"rounded-right\"\r\n          defaultValue={state.user?.publicKey ?? \"\"}\r\n          isValid={copied[0]}\r\n          onFocus={(e: React.FocusEvent<HTMLTextAreaElement>) => copyKey(e, setCopied, \"public\")}\r\n          onBlur={() => setCopied([false, false])}\r\n          readOnly\r\n          ref={publicKeyRef}\r\n        />\r\n\r\n        <Form.Control.Feedback type=\"valid\">Copied to clipboard!</Form.Control.Feedback>\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"user-key col-12 col-lg-5 pl-3\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Private</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n\r\n        <Form.Control\r\n          aria-label=\"privateKey\"\r\n          as=\"textarea\"\r\n          rows={numRows.current}\r\n          defaultValue={state.user?.privateKey ? new Array(state.user.privateKey.length).fill(\"◦\").join(\"\") : \"\"}\r\n          onFocus={(e: React.FocusEvent<HTMLTextAreaElement>) => copyKey(e, setCopied, \"private\")}\r\n          onBlur={() => setCopied([false, false])}\r\n          isValid={copied[1]}\r\n          readOnly\r\n          ref={privateKeyRef}\r\n        />\r\n\r\n        <InputGroup.Append>\r\n          <InputGroup.Text className=\"rounded-right\">\r\n            <span id=\"private-reveal-eyes\" onClick={togglePrivateKey}>\r\n              👀\r\n            </span>\r\n          </InputGroup.Text>\r\n        </InputGroup.Append>\r\n\r\n        <Form.Control.Feedback type=\"valid\">Copied to clipboard!</Form.Control.Feedback>\r\n      </InputGroup>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\r\nimport { ITransaction } from \"../../typings/AppTypes\";\r\nimport { ISign } from \"./Sign\";\r\n\r\ninterface ISend extends ISign {\r\n  details: ITransaction;\r\n  setSigned: (arg: boolean) => void;\r\n  setValidated: (arg: boolean) => void;\r\n}\r\n\r\nexport default function Send(props: ISend): JSX.Element {\r\n  return (\r\n    <Form\r\n      aria-label=\"Send Form\"\r\n      noValidate\r\n      className=\"col-12 col-lg-5 my-2 my-lg-0 trans-form\"\r\n      onSubmit={(e) => props.handleSubmit(e)}\r\n    >\r\n      <InputGroup>\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Receiver Public Key</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Receiver Public Key\"\r\n          name=\"receiver-pk\"\r\n          className=\"text-truncate\"\r\n          type=\"text\"\r\n          defaultValue={props.details.to}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <Form.Text className=\"text-muted\">Make sure this matches the value used when signing</Form.Text>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <Form.Control\r\n          aria-label=\"Send Amount\"\r\n          name=\"amount\"\r\n          type=\"number\"\r\n          defaultValue={props.details.amount}\r\n          disabled\r\n        />\r\n        <InputGroup.Append>\r\n          <InputGroup.Text className=\"rounded-right border-left-0\">LC</InputGroup.Text>\r\n        </InputGroup.Append>\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"mb-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Message</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Send Message\"\r\n          name=\"msg\"\r\n          as=\"textarea\"\r\n          defaultValue={props.details.message}\r\n          rows={4}\r\n          placeholder=\"optional message...\"\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup>\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Transaction Signature</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Transaction Signature\"\r\n          name=\"sig\"\r\n          type=\"text\"\r\n          defaultValue={props.details.signature}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <Form.Text className=\"text-muted\">Receiver uses this along with your public key to verify transaction</Form.Text>\r\n\r\n      <Button aria-label=\"Send Button\" className=\"mt-2\" variant=\"primary\" type=\"submit\" disabled={!props.signed} block>\r\n        <b>Send</b>\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\n\r\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IState } from \"../../typings/AppTypes\";\r\n\r\nexport interface ISign {\r\n  validated: boolean;\r\n  signed: boolean;\r\n  handleSubmit: (e: React.FormEvent<HTMLFormElement>) => void;\r\n}\r\n\r\nexport default function Sign({ validated, signed, handleSubmit }: ISign): JSX.Element {\r\n  const { state } = useContext(AppContext) as { state: IState };\r\n\r\n  function checkAmount(e: React.FocusEvent<HTMLInputElement>): void {\r\n    const userBalance = state.user.balance ?? 1000;\r\n    e.target.value = Math.min(Math.max(0.1, +e.target.value), userBalance).toFixed(2);\r\n  }\r\n\r\n  return (\r\n    <Form\r\n      aria-label=\"Sign Form\"\r\n      noValidate\r\n      validated={validated}\r\n      className=\"col-12 col-lg-5 trans-form\"\r\n      onSubmit={handleSubmit}\r\n    >\r\n      <InputGroup>\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Sender Public Key</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Sender Public Key\"\r\n          name=\"sender-pk\"\r\n          className=\"text-truncate rounded-right\"\r\n          type=\"text\"\r\n          defaultValue={state.user.publicKey ?? \"\"}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <Form.Text className=\"text-muted\">Used to verify transaction was signed using your private key</Form.Text>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Receiver Public Key</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Receiver Public Key\"\r\n          name=\"receiver-pk\"\r\n          className=\"text-truncate rounded-right\"\r\n          type=\"text\"\r\n          pattern=\"[A-Za-z0-9]{182,182}\"\r\n          required\r\n        />\r\n        <Form.Control.Feedback type=\"invalid\">\r\n          <b>Length or format are incorrect!</b>\r\n        </Form.Control.Feedback>\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"mb-2\">\r\n        <Form.Control\r\n          aria-label=\"Sign Amount\"\r\n          name=\"amount\"\r\n          type=\"number\"\r\n          step=\"any\"\r\n          placeholder={Number(1).toFixed(2)}\r\n          onBlur={(e: React.FocusEvent<HTMLInputElement>) => checkAmount(e)}\r\n          required\r\n        />\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text className=\"rounded-right border-left-0\">LC</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"mb-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Message</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control aria-label=\"Sign Message\" name=\"msg\" as=\"textarea\" rows={2} placeholder=\"optional message...\" />\r\n      </InputGroup>\r\n\r\n      <InputGroup>\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Sender Private Key</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Sender Private Key\"\r\n          name=\"sender-sk\"\r\n          className=\"text-truncate\"\r\n          type=\"text\"\r\n          defaultValue={state.user.privateKey ?? \"\"}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <Form.Text className=\"text-muted\">Not shared with anyone, keep this secret!</Form.Text>\r\n\r\n      <Button aria-label=\"Sign Button\" className=\"mt-2\" variant=\"primary\" type=\"submit\" disabled={signed} block>\r\n        <b>Sign</b>\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n","import React, { useState, useRef, useContext } from \"react\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { IAction, IState, ITransaction } from \"../../typings/AppTypes\";\r\nimport { digestMessage } from \"../../utils/conversion\";\r\n\r\nimport Send from \"./Send\";\r\nimport Sign from \"./Sign\";\r\nimport \"./Transaction.scss\";\r\n\r\nexport default function Transaction(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const [validated, setValidated] = useState<boolean>(false);\r\n  const [signed, setSigned] = useState<boolean>(false);\r\n\r\n  const formDetails = useRef<ITransaction>({\r\n    to: \"\",\r\n    from: state.user.publicKey ?? \"\",\r\n    amount: undefined,\r\n    message: \"\",\r\n    signature: \"\"\r\n  });\r\n\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    setValidated(true);\r\n\r\n    const form = e.currentTarget;\r\n    if (form.checkValidity()) {\r\n      if (!signed) {\r\n        // haven't signed the transaction yet\r\n        const formValues = Object.values({ ...form }).slice(1, 4).map((input) => input.value); // prettier-ignore\r\n        [formDetails.current.to, formDetails.current.amount, formDetails.current.message] = formValues;\r\n\r\n        const message = formDetails.current.to + formDetails.current.from + formDetails.current.message + formDetails.current.amount; // prettier-ignore\r\n        formDetails.current.signature = await digestMessage(message);\r\n      } else {\r\n        // signed the transaction and need to send now\r\n        dispatch({ type: ACTIONS.ADD_VERIFIED_TRANS, payload: { trans: formDetails.current } });\r\n        setValidated(false);\r\n      }\r\n\r\n      setSigned(!signed);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid d-flex justify-content-center mx-auto row my-4\">\r\n      <Sign validated={validated} signed={signed} handleSubmit={handleSubmit} />\r\n      <Send\r\n        validated={validated}\r\n        signed={signed}\r\n        handleSubmit={handleSubmit}\r\n        details={formDetails.current}\r\n        setSigned={setSigned}\r\n        setValidated={setValidated}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState, IUser } from \"../../typings/AppTypes\";\r\nimport { copyKey } from \"../../utils/copyInput\";\r\n\r\nimport \"./User.scss\";\r\n\r\nexport default function UserItems(): JSX.Element {\r\n  const { state } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n  const [copied, setCopied] = useState<boolean[]>(new Array(state.users.length).fill(false));\r\n\r\n  function resetCopy(index: number): void {\r\n    const newCopied = JSON.parse(JSON.stringify(copied));\r\n    newCopied[index] = false;\r\n    setCopied(newCopied);\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-fluid mb-2\">\r\n      <h3 className=\"font-weight-bold\">Users</h3>\r\n      <div className=\"row flex-nowrap overflow-auto bg-dark mx-1 px-2 rounded\">\r\n        {state.users?.map((user: IUser, i: number) => {\r\n          return (\r\n            <Form className=\"user-item rounded flex-shrink-0\" key={`user-${user.publicKey}`}>\r\n              <InputGroup>\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>🔑</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <Form.Control\r\n                  aria-label=\"User Public Key\"\r\n                  type=\"text\"\r\n                  className=\"text-truncate rounded-right\"\r\n                  onFocus={(e: React.FocusEvent<HTMLInputElement>) =>\r\n                    copyKey(e, setCopied, undefined, i, state.users.length)\r\n                  }\r\n                  onBlur={() => resetCopy(i)}\r\n                  defaultValue={user.publicKey}\r\n                  isValid={copied[i]}\r\n                  readOnly\r\n                />\r\n                <Form.Control.Feedback type=\"valid\">Copied to clipboard</Form.Control.Feedback>\r\n              </InputGroup>\r\n\r\n              <InputGroup className=\"mt-2\">\r\n                <Form.Control aria-label=\"balance\" type=\"number\" defaultValue={user.balance} disabled />\r\n                <InputGroup.Append>\r\n                  <InputGroup.Text>LC</InputGroup.Text>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n            </Form>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport NavMenu from \"../components/NavMenu/NavMenu\";\r\nimport KeyGeneration from \"../components/User/KeyGeneration\";\r\nimport Transaction from \"../components/Transaction/Transaction\";\r\nimport UserItems from \"../components/User/UserItems\";\r\n\r\nexport default function Wallet(): JSX.Element {\r\n  return (\r\n    <div>\r\n      <NavMenu />\r\n      <KeyGeneration />\r\n      <Transaction />\r\n      <UserItems />\r\n    </div>\r\n  );\r\n}\r\n","import { digestMessage, randomHash } from \"./conversion\";\r\n\r\nasync function createTarget(numZeros: number): Promise<string> {\r\n  const targetHash = await digestMessage(randomHash(20));\r\n\r\n  // replace leading bits with zeros\r\n  const re = new RegExp(`^.{0,${numZeros}}`, \"g\");\r\n  const zerosStr = Array(numZeros).fill(\"0\").join(\"\");\r\n\r\n  return targetHash.replace(re, zerosStr);\r\n}\r\n\r\nexport async function mine(\r\n  nonce: number,\r\n  setHeader: (arg: number) => void,\r\n  setTarget: (arg: string) => void,\r\n  setSolution: (arg: string) => void,\r\n  setIsValid: (arg: boolean) => void\r\n): Promise<string> {\r\n  // make target\r\n  const numZeros = Math.round(Math.random()) + 2;\r\n  const targetHash = await createTarget(numZeros);\r\n  setTarget(targetHash);\r\n\r\n  // mine\r\n  let candidateSolution = \"\";\r\n  let header = nonce; // re-assigning for clarity\r\n  while (header <= Number.MAX_SAFE_INTEGER) {\r\n    candidateSolution = await digestMessage(header.toString());\r\n    setSolution(candidateSolution);\r\n    setHeader(header++);\r\n\r\n    const leadingBits = candidateSolution.substr(0, numZeros).split(\"\");\r\n    if (leadingBits.every((bit) => bit === \"0\")) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  setIsValid(candidateSolution <= targetHash);\r\n  return candidateSolution;\r\n}\r\n","import { ACTIONS } from \"../enums/AppDispatchActions\";\r\nimport { IAction, IBlock, IState, ITransaction } from \"../typings/AppTypes\";\r\nimport { digestMessage } from \"./conversion\";\r\n\r\nexport async function propagateBlockStatus(\r\n  state: IState,\r\n  dispatch: React.Dispatch<IAction>,\r\n  index: number,\r\n  prevHash: string,\r\n  currHash: string,\r\n  skipFirstUpdate: boolean,\r\n  newRoot?: string,\r\n  transactions?: ITransaction[],\r\n  timestamp = Date.now()\r\n): Promise<void> {\r\n  const newBlocks: IBlock[] = [];\r\n  for (let i = index; i < state.chain.length; i++) {\r\n    const merkleRoot = newRoot && i === index ? newRoot : state.chain[i].merkleRoot;\r\n    const valid = skipFirstUpdate && i === index;\r\n    const showTrans = state.chain[i].showTrans ?? false;\r\n    currHash = i === index ? currHash : await digestMessage(i + prevHash + merkleRoot);\r\n    transactions = i === index && transactions ? transactions : state.chain[i].transactions;\r\n\r\n    newBlocks.push({ index: i, timestamp, prevHash, currHash, transactions, merkleRoot, valid, showTrans });\r\n\r\n    prevHash = currHash; // next block's prevHash is this block's currHash\r\n  }\r\n\r\n  dispatch({ type: ACTIONS.UPDATE_BLOCK, payload: { block: newBlocks } });\r\n}\r\n","import React, { useState, useRef, useContext } from \"react\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IBlock, IState } from \"../../typings/AppTypes\";\r\nimport { mine } from \"../../utils/mine\";\r\nimport { propagateBlockStatus } from \"../../utils/propagate\";\r\n\r\ninterface IStats {\r\n  chain: boolean;\r\n  isValid: boolean;\r\n  solution: string;\r\n  setIsValid: (arg: boolean) => void;\r\n  setSolution: (arg: string) => void;\r\n  block?: IBlock;\r\n}\r\n\r\nexport default function Statistics(props: IStats): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const nonce = useRef<number>();\r\n  const [header, setHeader] = useState<number>();\r\n  const [target, setTarget] = useState<string>();\r\n  const [disableMineBtn, setDisableMineBtn] = useState<boolean>(false);\r\n\r\n  async function handleMine() {\r\n    nonce.current = Math.round(Math.random() * 1e6);\r\n\r\n    setDisableMineBtn(true);\r\n    const currHash = await mine(nonce.current, setHeader, setTarget, props.setSolution, props.setIsValid);\r\n    setDisableMineBtn(false);\r\n\r\n    // propagate changes if needed\r\n    const { chain, block } = props;\r\n    if (chain && block) {\r\n      await propagateBlockStatus(state, dispatch, block.index, block.prevHash, currHash, true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={props.chain ? \"bordered-background\" : \"col-11 col-lg-5 mx-3\"}>\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Nonce</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control type=\"number\" defaultValue={props.solution ? nonce.current : \"\"} disabled />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Header</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control type=\"number\" defaultValue={header} disabled />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Target</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control className=\"text-truncate\" type=\"text\" defaultValue={target} readOnly />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Sol&apos;n</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          className=\"text-truncate\"\r\n          type=\"text\"\r\n          style={{ color: `${props.isValid ? \"green\" : \"red\"}` }}\r\n          defaultValue={props.solution}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <Button\r\n        variant=\"primary\"\r\n        className=\"btn-block d-block mt-2\"\r\n        disabled={props.isValid || (!props.chain && state.selectedTrans.length === 0) || disableMineBtn}\r\n        onClick={() => handleMine()}\r\n      >\r\n        <h4 className=\"my-1\">\r\n          Mine\r\n          {disableMineBtn && <span className=\"position-absolute spinner-border spinner-border-md mx-4\" role=\"status\" />}\r\n        </h4>\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\n\r\nimport Statistics from \"./Statistics\";\r\nimport { IAction, IBlock } from \"../../typings/AppTypes\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\n\r\nexport default function Block({ block }: { block: IBlock }): JSX.Element {\r\n  const { dispatch } = useContext(AppContext) as { dispatch: React.Dispatch<IAction> };\r\n\r\n  const [solution, setSolution] = useState<string>(\"\");\r\n  const [timestamp, setTimestamp] = useState<number | undefined>(undefined);\r\n  const [isValid, setIsValid] = useState<boolean>(block.valid ?? true);\r\n\r\n  // update timestamp when solution is mined\r\n  useEffect(() => {\r\n    setTimestamp(block.timestamp);\r\n  }, [block.timestamp]);\r\n\r\n  useEffect(() => {\r\n    if (block.valid !== undefined) {\r\n      setIsValid(block.valid);\r\n    }\r\n  }, [block.valid]);\r\n\r\n  useEffect(() => {\r\n    setSolution(block.currHash);\r\n  }, [block.currHash]);\r\n\r\n  function handleViewTransactions(): void {\r\n    dispatch({ type: ACTIONS.UPDATE_BLOCK, payload: { block: { ...block, showTrans: !block.showTrans } } });\r\n  }\r\n\r\n  return (\r\n    <div className=\"block flex-column flex-shrink-0\">\r\n      <div className={\"my-3 mx-1 p-2 rounded \" + (isValid ? \"valid-block\" : \"invalid-block\")}>\r\n        <Form>\r\n          <InputGroup className=\"my-2\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Index</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control type=\"number\" defaultValue={block.index} disabled />\r\n          </InputGroup>\r\n\r\n          <InputGroup className=\"my-2\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Timestamp</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              key={timestamp ?? block.timestamp}\r\n              type=\"number\"\r\n              defaultValue={timestamp ?? block.timestamp}\r\n              disabled\r\n            />\r\n          </InputGroup>\r\n\r\n          <InputGroup className=\"my-2\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Previous #</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control className=\"text-truncate\" type=\"text\" defaultValue={block.prevHash} readOnly />\r\n          </InputGroup>\r\n\r\n          <InputGroup className=\"my-2\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Current #</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              key={solution ? solution : block.currHash}\r\n              className=\"text-truncate\"\r\n              type=\"text\"\r\n              defaultValue={solution ? solution : block.currHash}\r\n              readOnly\r\n            />\r\n          </InputGroup>\r\n\r\n          <InputGroup className=\"my-2\">\r\n            <InputGroup.Prepend>\r\n              <InputGroup.Text>Merkle #</InputGroup.Text>\r\n            </InputGroup.Prepend>\r\n            {block.index === 0 ? (\r\n              <Form.Control type=\"text\" defaultValue={\"\"} disabled />\r\n            ) : (\r\n              <React.Fragment>\r\n                <Form.Control\r\n                  key={block.merkleRoot}\r\n                  className=\"text-truncate\"\r\n                  type=\"text\"\r\n                  defaultValue={block.merkleRoot}\r\n                  readOnly\r\n                />\r\n                <InputGroup.Append>\r\n                  <InputGroup.Text className=\"show-trans-eye\" onClick={() => handleViewTransactions()}>\r\n                    {block.showTrans ? \"🙈\" : \"🙉\"}\r\n                  </InputGroup.Text>\r\n                </InputGroup.Append>\r\n              </React.Fragment>\r\n            )}\r\n          </InputGroup>\r\n        </Form>\r\n\r\n        <Statistics\r\n          chain={true}\r\n          block={block}\r\n          solution={solution}\r\n          setSolution={setSolution}\r\n          isValid={isValid}\r\n          setIsValid={setIsValid}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { ITransaction } from \"../typings/AppTypes\";\r\n\r\n// modified from https://github.com/foqc/bfs-canvas-tree\r\ninterface ICoordinate {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nclass Node {\r\n  value: string;\r\n  children: Node[];\r\n  parent: Node | null;\r\n  pos: ICoordinate;\r\n\r\n  constructor(value: string) {\r\n    this.value = value;\r\n    this.children = [];\r\n    this.parent = null;\r\n    this.pos = { x: 0, y: 0 };\r\n  }\r\n\r\n  get left(): Node {\r\n    return this.children[0];\r\n  }\r\n\r\n  set left(node: Node) {\r\n    node.parent = this;\r\n    this.children[0] = node;\r\n  }\r\n\r\n  get right(): Node {\r\n    return this.children[1];\r\n  }\r\n\r\n  set right(node: Node) {\r\n    node.parent = this;\r\n    this.children[1] = node;\r\n  }\r\n\r\n  get position(): ICoordinate {\r\n    return this.pos;\r\n  }\r\n\r\n  set position(position: ICoordinate) {\r\n    this.pos = position;\r\n  }\r\n}\r\n\r\nexport class Tree {\r\n  #root: Node | null;\r\n  #transactionSignatures: string[];\r\n  #startPosition: ICoordinate;\r\n  #dim: { width: number; height: number };\r\n  #ctx: CanvasRenderingContext2D | null;\r\n\r\n  constructor(canvas: HTMLCanvasElement, transactions: ITransaction[]) {\r\n    const xStart = window.innerWidth < 1200 ? window.innerWidth * 1.8 : (window.innerWidth / 2) * 0.7;\r\n    this.#root = null;\r\n    this.#transactionSignatures = transactions.map((transaction) => transaction.signature.slice(0, 25) + \"...\");\r\n    this.#startPosition = { x: xStart, y: 5 };\r\n    this.#ctx = canvas.getContext(\"2d\");\r\n    this.#dim = { width: canvas.width, height: canvas.height };\r\n  }\r\n\r\n  calculatePosition({ x, y }: ICoordinate, isLeft = false): ICoordinate {\r\n    const offset = 50;\r\n    return { x: isLeft ? x - offset * 6 : x + offset * 6, y: y + offset };\r\n  }\r\n\r\n  clear(): void {\r\n    if (this.#ctx) {\r\n      this.#ctx.clearRect(0, 0, this.#dim.width, this.#dim.height);\r\n    }\r\n  }\r\n\r\n  addNode(value: string): void {\r\n    const newNode = new Node(value !== \"\" ? value.slice(0, 25) + \"...\" : \"\");\r\n    if (!this.#root) {\r\n      newNode.position = this.#startPosition;\r\n      this.#root = newNode;\r\n    } else {\r\n      // start at root, if no node on left add and break, likewise for right\r\n      // only move in direction that does not have both children\r\n      let node = this.#root;\r\n      while (node) {\r\n        if (!node.left) {\r\n          newNode.position = this.calculatePosition(node.position, true);\r\n          node.left = newNode;\r\n          break;\r\n        }\r\n\r\n        if (!node.right) {\r\n          newNode.position = this.calculatePosition(node.position);\r\n          node.right = newNode;\r\n          break;\r\n        }\r\n\r\n        node = !node.left.left || !node.left.right ? node.left : node.right;\r\n      }\r\n    }\r\n  }\r\n\r\n  drawTree(): void {\r\n    const queue = [] as Node[];\r\n    queue.push(this.#root as Node);\r\n\r\n    // level order traversal\r\n    while (queue.length !== 0) {\r\n      const node = queue.shift();\r\n      const rectWidth = node && node.value.length * 9;\r\n\r\n      if (this.#ctx && rectWidth && node) {\r\n        // draw the root node\r\n        const { x, y } = node.position;\r\n        this.#ctx.beginPath();\r\n\r\n        this.#ctx.font = \"1rem Arial\";\r\n        this.#ctx.strokeStyle = \"#000\";\r\n\r\n        const leafOrBodyColor = this.#transactionSignatures.includes(node.value) ? \"#ddf\" : \"#ff0a\";\r\n        this.#ctx.fillStyle = node.value === this.#root?.value ? \"#dfd\" : leafOrBodyColor;\r\n\r\n        this.#ctx.fillRect(x - rectWidth / 2, y + 5, rectWidth, 30);\r\n        this.#ctx.fillStyle = \"#000\";\r\n        this.#ctx.fillText(node.value, x + 10 - rectWidth / 2, y + 27);\r\n\r\n        // draw it's children\r\n        node.children.forEach((child, i) => {\r\n          child.position.x = i === 1 ? child.position.x - 150 : child.position.x + 150; // avoid overlap\r\n          queue.push(child);\r\n          if (this.#ctx) {\r\n            this.#ctx.beginPath();\r\n            this.#ctx.moveTo(x + 0.5, y + 35);\r\n            this.#ctx.lineTo(child.position.x + 0.5, child.position.y + 5);\r\n            this.#ctx.stroke();\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Tree } from \"./Tree\";\r\nimport { ITransaction } from \"../typings/AppTypes\";\r\nimport { digestMessage } from \"./conversion\";\r\n\r\nexport async function calculateMerkleTreeFormation(\r\n  verifiedTrans: ITransaction[],\r\n  selectedTrans: ITransaction[],\r\n  setMerkleTree?: (arg: string[][]) => void\r\n): Promise<string> {\r\n  let tree = [[\"\"]];\r\n  if (selectedTrans.length > 0) {\r\n    // need to make sure node's in tree appear in same order as in the verified transaction pane, regardless of selection order\r\n    const verifiedSignatures = verifiedTrans.map((trans) => trans.signature);\r\n    const selectedSignatures = selectedTrans.map((trans) => trans.signature);\r\n    let signatures = verifiedSignatures.filter((sig) => selectedSignatures.includes(sig));\r\n    tree = [signatures];\r\n\r\n    while (signatures.length !== 1) {\r\n      const hashArr = [] as string[];\r\n      for (let i = 0; i < signatures.length; i += 2) {\r\n        const hash = signatures[i + 1] ? await digestMessage(signatures[i] + signatures[i + 1]) : signatures[i];\r\n        hashArr.push(hash);\r\n      }\r\n\r\n      signatures = hashArr;\r\n      tree.push(hashArr);\r\n    }\r\n  }\r\n\r\n  if (setMerkleTree) {\r\n    setMerkleTree(tree);\r\n  }\r\n\r\n  return getMerkleRoot(tree);\r\n}\r\n\r\nexport function getMerkleRoot(tree: string[][]): string {\r\n  return tree[tree.length - 1][0];\r\n}\r\n\r\nexport function flattenTree(tree: string[][]): string[] {\r\n  let flatTree = [] as string[];\r\n  // need to reverse each tree row so that printing produces the right order!\r\n  for (let i = 0; i < tree.length; i++) {\r\n    flatTree = flatTree.concat(tree[i].reverse());\r\n  }\r\n\r\n  return flatTree;\r\n}\r\n\r\nexport function drawTreeDiagramOnCanvas(\r\n  merkleTree: string[][],\r\n  canvas: HTMLCanvasElement | null,\r\n  transactions: ITransaction[]\r\n): void {\r\n  if (canvas) {\r\n    const canvasTree = new Tree(canvas, transactions);\r\n    canvasTree.clear();\r\n    const flatTree = flattenTree(merkleTree);\r\n    for (let i = flatTree.length - 1; i >= 0; i--) {\r\n      canvasTree.addNode(flatTree[i]);\r\n    }\r\n    canvasTree.drawTree();\r\n  }\r\n}\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\n\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState, ITransaction } from \"../../typings/AppTypes\";\r\n\r\nimport { digestMessage } from \"../../utils/conversion\";\r\nimport { calculateMerkleTreeFormation } from \"../../utils/merkleTree\";\r\nimport { propagateBlockStatus } from \"../../utils/propagate\";\r\n\r\ntype TChangeType = \"from\" | \"to\" | \"message\" | \"amount\";\r\ntype TInputChange<T = HTMLInputElement> = React.ChangeEvent<T>;\r\n\r\nexport default function BlockTrans({ index }: { index: number }): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const [transDetails, setTransDetails] = useState<ITransaction[]>(state.chain[index].transactions);\r\n\r\n  async function calculateNewMerkleRoot(newVal: number | string, i: number, type: TChangeType): Promise<void> {\r\n    const newTrans: ITransaction[] = JSON.parse(JSON.stringify(transDetails)); // deep copy\r\n\r\n    // update the changed value & signature\r\n    newTrans[i] = { ...newTrans[i], [type]: newVal };\r\n    const message = newTrans[i].to + newTrans[i].from + newTrans[i].amount + newTrans[i].message;\r\n    newTrans[i].signature = await digestMessage(message);\r\n\r\n    // calculate new merkle root and currHash\r\n    const prevHash = state.chain[index].prevHash;\r\n    const newRoot = await calculateMerkleTreeFormation(newTrans, newTrans);\r\n    const newHash = await digestMessage(index + prevHash + newRoot);\r\n\r\n    setTransDetails(newTrans);\r\n    await propagateBlockStatus(state, dispatch, index, prevHash, newHash, false, newRoot, newTrans);\r\n  }\r\n\r\n  return (\r\n    <div className=\"row flex-nowrap overflow-auto mx-2\">\r\n      {transDetails.map((transaction, i) => {\r\n        return (\r\n          <div className=\"block col-12 mr-2 bg-light border border-dark p-1 rounded\" key={`sig:${i}`}>\r\n            <Form.Group className=\"mb-2 text-center\">\r\n              <Form.Control\r\n                className=\"text-truncate\"\r\n                type=\"text\"\r\n                value={transaction.from}\r\n                onChange={(e: TInputChange) => calculateNewMerkleRoot(e.target.value, i, \"from\")}\r\n              />\r\n              <h3 className=\"my-0\">↓</h3>\r\n              <Form.Control\r\n                className=\"text-truncate\"\r\n                type=\"text\"\r\n                value={transaction.to}\r\n                onChange={(e: TInputChange) => calculateNewMerkleRoot(e.target.value, i, \"to\")}\r\n              />\r\n            </Form.Group>\r\n\r\n            <InputGroup className=\"mb-2\">\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>Msg</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                rows={3}\r\n                value={transaction.message}\r\n                onChange={(e: TInputChange<HTMLTextAreaElement>) =>\r\n                  calculateNewMerkleRoot(e.target.value, i, \"message\")\r\n                }\r\n              />\r\n            </InputGroup>\r\n\r\n            <InputGroup className=\"mb-2\">\r\n              <Form.Control\r\n                type=\"number\"\r\n                value={transaction.amount ?? 0}\r\n                onChange={(e: TInputChange) => calculateNewMerkleRoot(e.target.value, i, \"amount\")}\r\n              />\r\n              <InputGroup.Append>\r\n                <InputGroup.Text>LC</InputGroup.Text>\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n\r\n            <InputGroup>\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>Sig</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                key={transaction.signature}\r\n                className=\"text-truncate\"\r\n                type=\"text\"\r\n                defaultValue={transaction.signature}\r\n                readOnly\r\n              />\r\n            </InputGroup>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\n\r\nimport Block from \"./Block\";\r\nimport BlockTrans from \"./BlockTrans\";\r\n\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IState } from \"../../typings/AppTypes\";\r\n\r\nimport \"./Block.scss\";\r\n\r\nexport default function BlockChain(): JSX.Element {\r\n  const { state } = useContext(AppContext) as { state: IState };\r\n\r\n  return (\r\n    <div className=\"mx-3 row flex-nowrap overflow-auto\">\r\n      {state.chain.map((block) => (\r\n        <div key={block.prevHash}>\r\n          <Block block={block} />\r\n          {block.showTrans && <BlockTrans index={block.index} />}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport NavMenu from \"../components/NavMenu/NavMenu\";\r\nimport BlockChain from \"../components/Block/BlockChain\";\r\n\r\nexport default function Chain(): JSX.Element {\r\n  return (\r\n    <div>\r\n      <NavMenu />\r\n      <BlockChain />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useRef, useState, useEffect, useContext } from \"react\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\n\r\nimport Statistics from \"./Statistics\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState } from \"../../typings/AppTypes\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { calculateMerkleTreeFormation, drawTreeDiagramOnCanvas, getMerkleRoot } from \"../../utils/merkleTree\";\r\n\r\nimport \"./Block.scss\";\r\n\r\nexport default function PreviewBlock(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const treeCanvas = useRef<HTMLCanvasElement | null>(null);\r\n\r\n  const [solution, setSolution] = useState<string>(\"\");\r\n  const [isValid, setIsValid] = useState<boolean>(false);\r\n  const [timestamp, setTimestamp] = useState<number>(Date.now());\r\n  const [merkleTree, setMerkleTree] = useState<string[][]>([[\"\"]]);\r\n  const [index, setIndex] = useState<number>(state.chain[state.chain.length - 1].index + 1);\r\n  const [prevHash, setPrevHash] = useState<string>(state.chain[state.chain.length - 1].currHash);\r\n\r\n  useEffect(() => {\r\n    calculateMerkleTreeFormation(state.verifiedTrans, state.selectedTrans, setMerkleTree);\r\n    setIsValid(false);\r\n  }, [state.selectedTrans, state.verifiedTrans]);\r\n\r\n  // draw tree in canvas\r\n  useEffect(() => {\r\n    drawTreeDiagramOnCanvas(merkleTree, treeCanvas.current, state.selectedTrans);\r\n  }, [merkleTree, state.selectedTrans]);\r\n\r\n  // update timestamp & currentHash when solution is mined\r\n  useEffect(() => setTimestamp(Date.now()), [solution]);\r\n\r\n  function handleAddBlock() {\r\n    const block = {\r\n      index,\r\n      prevHash,\r\n      currHash: solution,\r\n      transactions: state.selectedTrans,\r\n      timestamp,\r\n      merkleRoot: getMerkleRoot(merkleTree),\r\n      valid: state.chain[index - 1].valid, // validity depends on previous block\r\n      showTrans: false\r\n    };\r\n\r\n    // add the block, update verified transactions, clear selected transactions\r\n    dispatch({ type: ACTIONS.ADD_BLOCK, payload: { block } });\r\n    dispatch({ type: ACTIONS.UPDATE_VERIFIED_TRANS });\r\n    dispatch({ type: ACTIONS.UPDATE_SELECTED_TRANS, payload: { selectedTrans: [] } });\r\n\r\n    // update preview details\r\n    setIsValid(false);\r\n    setIndex(index + 1);\r\n    setPrevHash(solution);\r\n    setSolution(\"\");\r\n    setTimestamp(Date.now());\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-fluid row d-flex justify-content-center mx-auto my-3\">\r\n      <div className=\"mb-2 d-none d-lg-block\">\r\n        <h4 className=\"font-weight-bold text-center\">Merkle Tree Visualization</h4>\r\n        <canvas ref={treeCanvas} className=\"border border-dark rounded\" width={window.outerWidth * 0.7} />\r\n      </div>\r\n\r\n      <Statistics\r\n        chain={false}\r\n        solution={solution}\r\n        setSolution={setSolution}\r\n        isValid={isValid}\r\n        setIsValid={setIsValid}\r\n      />\r\n\r\n      <Form className={\"col-10 col-lg-5 my-4 my-lg-0 pb-2 px-2 rounded \" + (isValid ? \"valid-block\" : \"invalid-block\")}>\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Index</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control type=\"number\" value={index} disabled />\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Timestamp</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control type=\"number\" value={timestamp} disabled />\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Previous #</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control className=\"text-truncate\" type=\"text\" value={prevHash} readOnly />\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Current #</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control className=\"text-truncate\" type=\"text\" value={solution} readOnly />\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"mt-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Merkle #</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control className=\"text-truncate\" type=\"text\" value={getMerkleRoot(merkleTree)} readOnly />\r\n        </InputGroup>\r\n\r\n        {isValid && (\r\n          <Button className=\"mt-2\" variant=\"success\" block onClick={() => handleAddBlock()}>\r\n            <h4 className=\"my-0\">Add Block</h4>\r\n          </Button>\r\n        )}\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { IAction, IState, ITransaction } from \"../../typings/AppTypes\";\r\n\r\nimport \"./Transaction.scss\";\r\n\r\nexport default function TransactionItems(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  function selectTransaction(transaction: ITransaction): void {\r\n    let selectedTrans: ITransaction[] = JSON.parse(JSON.stringify(state)).selectedTrans;\r\n    const signatures = selectedTrans.map((x) => x.signature);\r\n    const included = signatures.includes(transaction.signature);\r\n\r\n    if (selectedTrans.length < 4 || included) {\r\n      // if just selected - push onto stack, else remove it\r\n      // adjust backgrounds according to selection/deselection\r\n      if (!included) {\r\n        selectedTrans.push(transaction);\r\n      } else {\r\n        selectedTrans = selectedTrans.filter((x) => x.signature !== transaction.signature);\r\n      }\r\n\r\n      dispatch({ type: ACTIONS.UPDATE_SELECTED_TRANS, payload: { selectedTrans } });\r\n    } else {\r\n      alert(\"You can mine at most 4 transactions at a time!\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <h3 className=\"font-weight-bold\">Verified Transactions</h3>\r\n      <div className=\"trans-list row flex-nowrap overflow-auto bg-dark mx-1 px-2 rounded\">\r\n        {state.verifiedTrans.map((transaction) => {\r\n          return (\r\n            <div\r\n              className={\r\n                \"trans-item \" +\r\n                (state.selectedTrans.map((x) => x.signature).includes(transaction.signature) ? \"selected\" : \"not-selected\") // prettier-ignore\r\n              }\r\n              onClick={() => selectTransaction(transaction)}\r\n              key={`sig:${transaction.signature}`}\r\n            >\r\n              <Form.Group className=\"mb-2 text-center\">\r\n                <Form.Control className=\"text-truncate\" type=\"text\" defaultValue={transaction.from} readOnly />\r\n                <h3 className=\"my-0\">↓</h3>\r\n                <Form.Control className=\"text-truncate\" type=\"text\" defaultValue={transaction.to} readOnly />\r\n              </Form.Group>\r\n\r\n              <InputGroup className=\"mb-2\">\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>Msg</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <Form.Control as=\"textarea\" defaultValue={transaction.message} readOnly />\r\n              </InputGroup>\r\n\r\n              <InputGroup className=\"mb-2\">\r\n                <Form.Control type=\"number\" defaultValue={transaction.amount} disabled />\r\n                <InputGroup.Append>\r\n                  <InputGroup.Text>LC</InputGroup.Text>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n\r\n              <InputGroup>\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>Sig</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <Form.Control className=\"text-truncate\" type=\"text\" defaultValue={transaction.signature} readOnly />\r\n              </InputGroup>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport NavMenu from \"../components/NavMenu/NavMenu\";\r\nimport PreviewBlock from \"../components/Block/PreviewBlock\";\r\nimport TransactionItems from \"../components/Transaction/TransactionItems\";\r\n\r\nexport default function Mine(): JSX.Element {\r\n  return (\r\n    <div>\r\n      <NavMenu />\r\n      <TransactionItems />\r\n      <PreviewBlock />\r\n    </div>\r\n  );\r\n}\r\n","import { ACTIONS } from \"../enums/AppDispatchActions\";\r\nimport { IAction, IState, IUser, ITransaction, IBlock, IMainUser } from \"../typings/AppTypes\";\r\n\r\nfunction deepCopy<T>(obj: T): T {\r\n  return JSON.parse(JSON.stringify(obj));\r\n}\r\n\r\nexport const AppReducer = (state: IState, action: IAction): IState => {\r\n  switch (action.type) {\r\n    case ACTIONS.ADD_VERIFIED_TRANS: {\r\n      const { trans } = action.payload as { trans: ITransaction };\r\n      const verifiedTrans = [...state.verifiedTrans, deepCopy(trans)];\r\n      localStorage.setItem(\"verTrans\", JSON.stringify(verifiedTrans));\r\n      return { ...state, verifiedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_VERIFIED_TRANS: {\r\n      const selectedTransSignatures = state.selectedTrans.map((x) => x.signature);\r\n      const verifiedTrans = state.verifiedTrans.filter((x) => !selectedTransSignatures.includes(x.signature));\r\n      localStorage.setItem(\"verTrans\", JSON.stringify(verifiedTrans));\r\n      return { ...state, verifiedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_SELECTED_TRANS: {\r\n      const { selectedTrans } = action.payload as { selectedTrans: ITransaction[] };\r\n      localStorage.setItem(\"selTrans\", JSON.stringify(selectedTrans));\r\n      return { ...state, selectedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_USERS: {\r\n      const { users } = action.payload as { users: IUser[] };\r\n      localStorage.setItem(\"users\", JSON.stringify(users));\r\n      return { ...state, users };\r\n    }\r\n\r\n    case ACTIONS.SET_MAIN_USER: {\r\n      const { user } = action.payload as { user: IMainUser };\r\n      localStorage.setItem(\"user\", JSON.stringify(user));\r\n      return { ...state, user };\r\n    }\r\n\r\n    case ACTIONS.ADD_BLOCK: {\r\n      const { block } = action.payload as { block: IBlock };\r\n      const chain = [...deepCopy(state.chain), block];\r\n      localStorage.setItem(\"chain\", JSON.stringify(chain));\r\n      return { ...state, chain };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_BLOCK: {\r\n      const { block } = action.payload as { block: IBlock | IBlock[] };\r\n      const blocks = Array.isArray(block) ? block : [block];\r\n      const chain = deepCopy(state.chain);\r\n\r\n      blocks.forEach((b) => (chain[b.index] = deepCopy(b)));\r\n\r\n      localStorage.setItem(\"chain\", JSON.stringify(chain));\r\n      return { ...state, chain };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { useMemo, useReducer } from \"react\";\r\nimport { Route, BrowserRouter as Router, Redirect } from \"react-router-dom\";\r\n\r\nimport Wallet from \"../../pages/Wallet\";\r\nimport Chain from \"../../pages/Chain\";\r\nimport Mine from \"../../pages/Mine\";\r\n\r\nimport { AppReducer } from \"../../reducers/AppReducer\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\n\r\nimport \"./App.scss\";\r\n\r\nexport default function App(): JSX.Element {\r\n  const [state, dispatch] = useReducer(AppReducer, {\r\n    verifiedTrans: JSON.parse(localStorage.getItem(\"verTrans\") as string) ?? [],\r\n    selectedTrans: JSON.parse(localStorage.getItem(\"selTrans\") as string) ?? [],\r\n    users: JSON.parse(localStorage.getItem(\"users\") as string) ?? [],\r\n    user: JSON.parse(localStorage.getItem(\"user\") as string) ?? {},\r\n    chain: JSON.parse(localStorage.getItem(\"chain\") as string) ?? [\r\n      {\r\n        index: 0,\r\n        prevHash: \"\",\r\n        currHash: new Array(64).fill(\"0\").join(\"\"),\r\n        transactions: [],\r\n        timestamp: Date.parse(\"04/31/2021\"),\r\n        merkleRoot: \"\"\r\n      }\r\n    ]\r\n  });\r\n\r\n  // prevent re-rendering children when App re-renders\r\n  const value = useMemo(() => ({ state, dispatch }), [state, dispatch]);\r\n\r\n  return (\r\n    <Router basename={\"/LibraCoin\"}>\r\n      <AppContext.Provider value={value}>\r\n        <Route exact path=\"/\">\r\n          <Redirect to=\"/wallet\" />\r\n        </Route>\r\n        <Route path=\"/wallet\" component={Wallet} />\r\n        <Route path=\"/mine\" component={Mine} />\r\n        <Route path=\"/blockchain\" component={Chain} />\r\n      </AppContext.Provider>\r\n    </Router>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./components/App/App\";\r\nimport \"bootstrap/scss/bootstrap.scss\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}