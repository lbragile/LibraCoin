{"version":3,"sources":["components/NavMenu/NavMenu.tsx","enums/AppDispatchActions.ts","context/AppContext.ts","utils/copyInput.ts","utils/conversion.ts","components/User/KeyGeneration.tsx","components/User/UserItems.tsx","components/Transaction/Sign.tsx","components/Transaction/Send.tsx","pages/Wallet.tsx","components/Block/Block.tsx","utils/merkleTree.ts","components/Block/BlockTrans.tsx","components/Block/Statistics.tsx","pages/Chain.tsx","components/Transaction/TransactionItems.tsx","utils/Tree.ts","components/Transaction/PreviewTree.tsx","pages/Mine.tsx","reducers/AppReducer.ts","components/App/App.tsx","index.tsx"],"names":["NavMenu","Navbar","expand","className","Brand","aria-label","href","src","alt","width","Toggle","aria-controls","Collapse","id","Nav","Link","active","location","includes","ACTIONS","AppContext","React","createContext","undefined","copyInput","target","assignName","dispatch","value","blur","select","document","execCommand","type","ASSIGN_COPIED","payload","copied","removeCopied","bufferToHex","hashBuffer","Array","from","Uint8Array","map","b","toString","padStart","join","CryptoKeyToHex","format","key","a","window","crypto","subtle","exportKey","buf","digestMessage","message","msgUint8","TextEncoder","encode","digest","randomHash","len","getRandomValues","Uint32Array","KeyGeneration","useContext","state","numRows","useRef","useState","show","setShow","useEffect","user","privateKey","generateKey","name","namedCurve","publicKey","publicKeyStr","privateKeyStr","balance","Number","toFixed","mainUser","SET_MAIN_USER","newUsers","users","UPDATE_USERS","addUser","InputGroup","Prepend","Text","Form","Control","as","rows","current","isValid","onFocus","e","onBlur","readOnly","Feedback","length","fill","Append","onClick","UserItems","i","defaultValue","disabled","Sign","validated","signed","handleSubmit","noValidate","onSubmit","pattern","required","step","placeholder","Math","min","max","checkAmount","Button","variant","block","Send","props","details","to","amount","signature","Wallet","setValidated","setSigned","formDetails","preventDefault","form","currentTarget","checkValidity","formValues","Object","values","slice","input","ADD_VERIFIED_TRANS","trans","Block","chain","index","valid","preview","timestamp","currHash","prevHash","Fragment","merkleRoot","UPDATE_BLOCK","showTrans","handleViewTransactions","transactions","selectedTrans","Date","now","ADD_BLOCK","UPDATE_VERIFIED_TRANS","UPDATE_SELECTED_TRANS","UPDATE_PREVIEW","handleAddBlock","calculateMerkleTreeFormation","verifiedTrans","tree","verifiedSignatures","selectedSignatures","signatures","filter","sig","hashArr","hash","push","getMerkleRoot","drawTreeDiagramOnCanvas","merkleTree","canvasTree","clear","flatTree","concat","reverse","flattenTree","addNode","drawTree","BlockTrans","transDetails","setTransDetails","calculateNewMerkleRoot","newVal","newTrans","JSON","parse","stringify","newTree","newRoot","newBlocks","transaction","Group","onChange","Statistics","nonce","header","setHeader","setTarget","solution","setSolution","disableMineBtn","setDisableMineBtn","round","random","numZeros","re","RegExp","zerosStr","targetHash","replace","candidateSolution","MAX_SAFE_INTEGER","match","handleMine","role","Chain","TransactionItems","x","included","newPreview","alert","selectTransaction","Node","children","parent","pos","this","y","node","position","Tree","canvas","xStart","innerWidth","getContext","height","isLeft","offset","clearRect","newNode","left","calculatePosition","right","queue","shift","rectWidth","beginPath","font","strokeStyle","leafOrBodyColor","fillStyle","fillRect","fillText","forEach","child","moveTo","lineTo","stroke","PreviewTree","treeCanvas","ref","outerWidth","Mine","AppReducer","action","localStorage","setItem","selectedTransSignatures","blocks","isArray","App","useReducer","getItem","useMemo","basename","Provider","exact","path","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.315cd919.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\n\r\nimport \"./NavMenu.scss\";\r\n\r\nexport default function NavMenu(): JSX.Element {\r\n  return (\r\n    <Navbar expand=\"lg\" className=\"mb-3\">\r\n      <Navbar.Brand aria-label=\"LibraCoin Logo\" href=\"https://github.com/lbragile/LibraCoin\">\r\n        <img src=\"./assets/libracoin-logo-256.png\" alt=\"LibraCoin Logo\" width=\"64\" />\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"ml-auto\">\r\n          <Nav.Link href=\"/LibraCoin/wallet\" active={location.href.includes(\"/wallet\")}>\r\n            Wallet\r\n          </Nav.Link>\r\n          <Nav.Link href=\"/LibraCoin/mine\" active={location.href.includes(\"/mine\")}>\r\n            Mine\r\n          </Nav.Link>\r\n          <Nav.Link href=\"/LibraCoin/blockchain\" active={location.href.includes(\"/blockchain\")}>\r\n            Blockchain\r\n          </Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\n","export enum ACTIONS {\r\n  ADD_VERIFIED_TRANS,\r\n  UPDATE_VERIFIED_TRANS,\r\n  UPDATE_SELECTED_TRANS,\r\n  UPDATE_USERS,\r\n  SET_MAIN_USER,\r\n  ADD_BLOCK,\r\n  UPDATE_BLOCK,\r\n  UPDATE_PREVIEW,\r\n  ASSIGN_COPIED\r\n}\r\n","import React from \"react\";\r\nimport { IAction, IState } from \"../typings/AppTypes\";\r\n\r\ntype TAppContext = { state: IState; dispatch: React.Dispatch<IAction> } | undefined;\r\n\r\nexport const AppContext = React.createContext<TAppContext>(undefined);\r\n","import React from \"react\";\r\nimport { ACTIONS } from \"../enums/AppDispatchActions\";\r\nimport { IAction } from \"../typings/AppTypes\";\r\n\r\nexport function copyInput(\r\n  target: HTMLTextAreaElement | HTMLInputElement,\r\n  assignName: string,\r\n  dispatch: React.Dispatch<IAction>\r\n): void {\r\n  if (!target.value.includes(\"◦\")) {\r\n    target.select();\r\n    document.execCommand(\"copy\");\r\n    dispatch({ type: ACTIONS.ASSIGN_COPIED, payload: { copied: assignName } });\r\n  } else {\r\n    target.blur();\r\n  }\r\n}\r\n\r\nexport function removeCopied(dispatch: React.Dispatch<IAction>): void {\r\n  dispatch({ type: ACTIONS.ASSIGN_COPIED, payload: { copied: \"\" } });\r\n}\r\n","import { TextEncoder } from \"text-encoding\";\r\n\r\nexport function bufferToHex(hashBuffer: ArrayBuffer): string {\r\n  const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\r\n  const hashHex = hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\"); // convert bytes to hex string\r\n  return hashHex;\r\n}\r\n\r\nexport async function CryptoKeyToHex(format: string, key: CryptoKey): Promise<string> {\r\n  const buf = (await window.crypto.subtle.exportKey(format, key)) as ArrayBuffer;\r\n  return bufferToHex(buf);\r\n}\r\n\r\nexport async function digestMessage(message: string): Promise<string> {\r\n  const msgUint8 = new TextEncoder().encode(message); // encode as (utf-8) Uint8Array\r\n  const hashBuffer = await window.crypto.subtle.digest(\"SHA-256\", msgUint8); // hash the message\r\n  return bufferToHex(hashBuffer);\r\n}\r\n\r\nexport function randomHash(len: number): string {\r\n  return bufferToHex(window.crypto.getRandomValues(new Uint32Array(len)));\r\n}\r\n","import React, { useRef, useState, useContext, useEffect } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\n\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState } from \"../../typings/AppTypes\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { copyInput, removeCopied } from \"../../utils/copyInput\";\r\nimport { CryptoKeyToHex } from \"../../utils/conversion\";\r\n\r\nimport \"./User.scss\";\r\n\r\nexport default function KeyGeneration(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const numRows = useRef(4);\r\n  const [show, setShow] = useState<boolean>(false);\r\n\r\n  // add a user if it's the first time visiting\r\n  useEffect(() => {\r\n    async function addUser(): Promise<void> {\r\n      if (state.user.privateKey === \"\") {\r\n        const { publicKey, privateKey } = await window.crypto.subtle.generateKey(\r\n          { name: \"ECDSA\", namedCurve: \"P-256\" },\r\n          true,\r\n          [\"sign\", \"verify\"]\r\n        );\r\n\r\n        const publicKeyStr = await CryptoKeyToHex(\"spki\", publicKey as CryptoKey);\r\n        const privateKeyStr = await CryptoKeyToHex(\"pkcs8\", privateKey as CryptoKey);\r\n\r\n        const balance = Number(1000).toFixed(2);\r\n        const mainUser = { publicKey: publicKeyStr, privateKey: privateKeyStr, balance };\r\n        dispatch({ type: ACTIONS.SET_MAIN_USER, payload: { user: mainUser } });\r\n\r\n        const newUsers = [...state.users, { publicKey: publicKeyStr, balance }];\r\n        dispatch({ type: ACTIONS.UPDATE_USERS, payload: { users: newUsers } });\r\n      }\r\n    }\r\n\r\n    addUser();\r\n  }, [dispatch, state.user.privateKey, state.users]);\r\n\r\n  return (\r\n    <div className=\"container-fluid d-flex justify-content-center mx-auto row my-5\">\r\n      <InputGroup className=\"user-key col-12 col-lg-5 pl-3 pl-lg-0\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Public</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n\r\n        <Form.Control\r\n          aria-label=\"publicKey\"\r\n          as=\"textarea\"\r\n          rows={numRows.current}\r\n          className=\"rounded-right\"\r\n          value={state.user.publicKey}\r\n          isValid={state.copied === \"walletPK\"}\r\n          onFocus={(e: React.FocusEvent<HTMLTextAreaElement>) => copyInput(e.target, \"walletPK\", dispatch)}\r\n          onBlur={() => removeCopied(dispatch)}\r\n          readOnly\r\n        />\r\n\r\n        <Form.Control.Feedback type=\"valid\">Copied to clipboard!</Form.Control.Feedback>\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"user-key col-12 col-lg-5 pl-3\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Private</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n\r\n        <Form.Control\r\n          aria-label=\"privateKey\"\r\n          as=\"textarea\"\r\n          rows={numRows.current}\r\n          value={show ? state.user.privateKey : new Array(state.user.privateKey.length).fill(\"◦\").join(\"\")}\r\n          onFocus={(e: React.FocusEvent<HTMLTextAreaElement>) => copyInput(e.target, \"walletSK\", dispatch)}\r\n          onBlur={() => removeCopied(dispatch)}\r\n          isValid={state.copied === \"walletSK\"}\r\n          readOnly\r\n        />\r\n\r\n        <InputGroup.Append>\r\n          <InputGroup.Text className=\"rounded-right\">\r\n            <span id=\"private-reveal-eyes\" onClick={() => setShow(!show)}>\r\n              👀\r\n            </span>\r\n          </InputGroup.Text>\r\n        </InputGroup.Append>\r\n\r\n        <Form.Control.Feedback type=\"valid\">Copied to clipboard!</Form.Control.Feedback>\r\n      </InputGroup>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState, IUser } from \"../../typings/AppTypes\";\r\nimport { copyInput, removeCopied } from \"../../utils/copyInput\";\r\n\r\nimport \"./User.scss\";\r\n\r\nexport default function UserItems(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  return (\r\n    <div className=\"container-fluid mb-2\">\r\n      <h3 className=\"font-weight-bold\">Users</h3>\r\n      <div className=\"row flex-nowrap overflow-auto bg-dark mx-1 px-2 rounded\">\r\n        {state.users.map((user: IUser, i: number) => {\r\n          return (\r\n            <Form className=\"user-item rounded flex-shrink-0\" key={`user-${user.publicKey}`}>\r\n              <InputGroup>\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>🔑</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <Form.Control\r\n                  aria-label=\"User Public Key\"\r\n                  type=\"text\"\r\n                  className=\"text-truncate rounded-right\"\r\n                  onFocus={(e: React.FocusEvent<HTMLInputElement>) => copyInput(e.target, \"userItem-\" + i, dispatch)}\r\n                  onBlur={() => removeCopied(dispatch)}\r\n                  defaultValue={user.publicKey}\r\n                  isValid={state.copied === \"userItem-\" + i}\r\n                  readOnly\r\n                />\r\n                <Form.Control.Feedback type=\"valid\">Copied to clipboard</Form.Control.Feedback>\r\n              </InputGroup>\r\n\r\n              <InputGroup className=\"mt-2\">\r\n                <Form.Control aria-label=\"balance\" type=\"number\" defaultValue={user.balance} disabled />\r\n                <InputGroup.Append>\r\n                  <InputGroup.Text>LC</InputGroup.Text>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n            </Form>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\n\r\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IState } from \"../../typings/AppTypes\";\r\n\r\nexport interface ISign {\r\n  validated: boolean;\r\n  signed: boolean;\r\n  handleSubmit: (e: React.FormEvent<HTMLFormElement>) => void;\r\n}\r\n\r\nexport default function Sign({ validated, signed, handleSubmit }: ISign): JSX.Element {\r\n  const { state } = useContext(AppContext) as { state: IState };\r\n\r\n  function checkAmount(e: React.FocusEvent<HTMLInputElement>): void {\r\n    e.target.value = Math.min(Math.max(0.1, +e.target.value), state.user.balance).toFixed(2);\r\n  }\r\n\r\n  return (\r\n    <Form\r\n      aria-label=\"Sign Form\"\r\n      noValidate\r\n      validated={validated}\r\n      className=\"col-12 col-lg-5 trans-form\"\r\n      onSubmit={handleSubmit}\r\n    >\r\n      <InputGroup>\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Sender Public Key</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Sender Public Key\"\r\n          name=\"sender-pk\"\r\n          className=\"text-truncate rounded-right\"\r\n          type=\"text\"\r\n          defaultValue={state.user.publicKey}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <Form.Text className=\"text-muted\">Used to verify transaction was signed using your private key</Form.Text>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Receiver Public Key</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Receiver Public Key\"\r\n          name=\"receiver-pk\"\r\n          className=\"text-truncate rounded-right\"\r\n          type=\"text\"\r\n          pattern=\"[A-Za-z0-9]{182,182}\"\r\n          required\r\n        />\r\n        <Form.Control.Feedback type=\"invalid\">\r\n          <b>Length or format are incorrect!</b>\r\n        </Form.Control.Feedback>\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"mb-2\">\r\n        <Form.Control\r\n          aria-label=\"Sign Amount\"\r\n          name=\"amount\"\r\n          type=\"number\"\r\n          step=\"any\"\r\n          placeholder={Number(1).toFixed(2)}\r\n          onBlur={(e: React.FocusEvent<HTMLInputElement>) => checkAmount(e)}\r\n          required\r\n        />\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text className=\"rounded-right border-left-0\">LC</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"mb-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Message</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control aria-label=\"Sign Message\" name=\"msg\" as=\"textarea\" rows={2} placeholder=\"optional message...\" />\r\n      </InputGroup>\r\n\r\n      <InputGroup>\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Sender Private Key</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Sender Private Key\"\r\n          name=\"sender-sk\"\r\n          className=\"text-truncate\"\r\n          type=\"text\"\r\n          defaultValue={state.user.privateKey}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <Form.Text className=\"text-muted\">Not shared with anyone, keep this secret!</Form.Text>\r\n\r\n      <Button aria-label=\"Sign Button\" className=\"mt-2\" variant=\"primary\" type=\"submit\" disabled={signed} block>\r\n        <b>Sign</b>\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\r\nimport { ITransaction } from \"../../typings/AppTypes\";\r\nimport { ISign } from \"./Sign\";\r\n\r\ninterface ISend extends ISign {\r\n  details: ITransaction;\r\n  setSigned: (arg: boolean) => void;\r\n  setValidated: (arg: boolean) => void;\r\n}\r\n\r\nexport default function Send(props: ISend): JSX.Element {\r\n  return (\r\n    <Form\r\n      aria-label=\"Send Form\"\r\n      noValidate\r\n      className=\"col-12 col-lg-5 my-2 my-lg-0 trans-form\"\r\n      onSubmit={(e) => props.handleSubmit(e)}\r\n    >\r\n      <InputGroup>\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Receiver Public Key</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Receiver Public Key\"\r\n          name=\"receiver-pk\"\r\n          className=\"text-truncate\"\r\n          type=\"text\"\r\n          defaultValue={props.details.to}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <Form.Text className=\"text-muted\">Make sure this matches the value used when signing</Form.Text>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <Form.Control\r\n          aria-label=\"Send Amount\"\r\n          name=\"amount\"\r\n          type=\"number\"\r\n          defaultValue={props.details.amount}\r\n          disabled\r\n        />\r\n        <InputGroup.Append>\r\n          <InputGroup.Text className=\"rounded-right border-left-0\">LC</InputGroup.Text>\r\n        </InputGroup.Append>\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"mb-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Message</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Send Message\"\r\n          name=\"msg\"\r\n          as=\"textarea\"\r\n          defaultValue={props.details.message}\r\n          rows={4}\r\n          placeholder=\"optional message...\"\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup>\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Transaction Signature</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Transaction Signature\"\r\n          name=\"sig\"\r\n          type=\"text\"\r\n          className=\"text-truncate\"\r\n          defaultValue={props.details.signature}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <Form.Text className=\"text-muted\">Receiver uses this along with your public key to verify transaction</Form.Text>\r\n\r\n      <Button aria-label=\"Send Button\" className=\"mt-2\" variant=\"primary\" type=\"submit\" disabled={!props.signed} block>\r\n        <b>Send</b>\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n","import React, { useContext, useRef, useState } from \"react\";\r\n\r\nimport NavMenu from \"../components/NavMenu/NavMenu\";\r\nimport KeyGeneration from \"../components/User/KeyGeneration\";\r\nimport UserItems from \"../components/User/UserItems\";\r\nimport Sign from \"../components/Transaction/Sign\";\r\nimport Send from \"../components/Transaction/Send\";\r\nimport { ACTIONS } from \"../enums/AppDispatchActions\";\r\nimport { digestMessage } from \"../utils/conversion\";\r\nimport { IAction, IState, ITransaction } from \"../typings/AppTypes\";\r\nimport { AppContext } from \"../context/AppContext\";\r\n\r\nexport default function Wallet(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const [validated, setValidated] = useState<boolean>(false);\r\n  const [signed, setSigned] = useState<boolean>(false);\r\n\r\n  const formDetails = useRef<ITransaction>({\r\n    to: \"\",\r\n    from: state.user.publicKey ?? \"\",\r\n    amount: undefined,\r\n    message: \"\",\r\n    signature: \"\"\r\n  });\r\n\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    setValidated(true);\r\n\r\n    const form = e.currentTarget;\r\n    if (form.checkValidity()) {\r\n      if (!signed) {\r\n        // haven't signed the transaction yet\r\n        const formValues = Object.values({ ...form }).slice(1, 4).map((input) => input.value); // prettier-ignore\r\n        [formDetails.current.to, formDetails.current.amount, formDetails.current.message] = formValues;\r\n\r\n        const message = formDetails.current.to + formDetails.current.from + formDetails.current.message + formDetails.current.amount; // prettier-ignore\r\n        formDetails.current.signature = await digestMessage(message);\r\n      } else {\r\n        // signed the transaction and need to send now\r\n        dispatch({ type: ACTIONS.ADD_VERIFIED_TRANS, payload: { trans: formDetails.current } });\r\n        setValidated(false);\r\n      }\r\n\r\n      setSigned(!signed);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <NavMenu />\r\n\r\n      <KeyGeneration />\r\n\r\n      <div className=\"container-fluid d-flex justify-content-center mx-auto row my-4\">\r\n        <Sign validated={validated} signed={signed} handleSubmit={handleSubmit} />\r\n        <Send\r\n          validated={validated}\r\n          signed={signed}\r\n          handleSubmit={handleSubmit}\r\n          details={formDetails.current}\r\n          setSigned={setSigned}\r\n          setValidated={setValidated}\r\n        />\r\n      </div>\r\n\r\n      <UserItems />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\n\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState } from \"../../typings/AppTypes\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\n\r\nimport \"./Block.scss\";\r\n\r\nexport interface IBlockProps {\r\n  chain: boolean;\r\n  index: number;\r\n}\r\n\r\nexport default function Block(props: IBlockProps): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  function handleAddBlock() {\r\n    // this only happens on the mining page so can use state.preview.index here\r\n\r\n    const block = {\r\n      ...state.preview,\r\n      transactions: state.selectedTrans,\r\n      valid: state.chain[state.preview.index - 1].valid, // validity depends on previous block\r\n      showTrans: false\r\n    };\r\n\r\n    const preview = {\r\n      timestamp: Date.now(),\r\n      index: state.preview.index + 1,\r\n      prevHash: state.preview.currHash,\r\n      currHash: \"\",\r\n      merkleRoot: \"\",\r\n      valid: false\r\n    };\r\n\r\n    // add the block, update verified transactions, clear selected transactions, update preview\r\n    dispatch({ type: ACTIONS.ADD_BLOCK, payload: { block } });\r\n    dispatch({ type: ACTIONS.UPDATE_VERIFIED_TRANS });\r\n    dispatch({ type: ACTIONS.UPDATE_SELECTED_TRANS, payload: { selectedTrans: [] } });\r\n    dispatch({ type: ACTIONS.UPDATE_PREVIEW, payload: { preview } });\r\n  }\r\n\r\n  function handleViewTransactions(): void {\r\n    const block = state.chain[props.index];\r\n    dispatch({ type: ACTIONS.UPDATE_BLOCK, payload: { block: { ...block, showTrans: !block.showTrans } } });\r\n  }\r\n\r\n  return (\r\n    <Form\r\n      aria-label=\"Block Form\"\r\n      className={\r\n        (props.chain ? \"\" : \"col-10 col-lg-5 \") +\r\n        \"my-4 my-lg-0 p-2 rounded \" +\r\n        ((props.chain && state.chain[props.index].valid) || (!props.chain && state.preview.valid)\r\n          ? \"valid-block\"\r\n          : \"invalid-block\")\r\n      }\r\n    >\r\n      <InputGroup className=\"mb-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Index</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Block Index\"\r\n          name=\"index\"\r\n          type=\"number\"\r\n          value={props.chain ? props.index : state.preview.index}\r\n          disabled\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Timestamp</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Block Timestamp\"\r\n          name=\"timestamp\"\r\n          type=\"number\"\r\n          value={props.chain ? state.chain[props.index].timestamp : state.preview.timestamp}\r\n          disabled\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Previous #</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Block PrevHash\"\r\n          name=\"prevHash\"\r\n          className=\"text-truncate\"\r\n          type=\"text\"\r\n          value={\r\n            props.chain && props.index > 0\r\n              ? state.chain[props.index - 1].currHash\r\n              : props.chain\r\n              ? \"\"\r\n              : state.preview.prevHash\r\n          }\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Current #</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Block CurrHash\"\r\n          name=\"currHash\"\r\n          className=\"text-truncate\"\r\n          type=\"text\"\r\n          value={props.chain ? state.chain[props.index].currHash : state.preview.currHash}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"mt-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Merkle #</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        {props.chain && props.index === 0 ? (\r\n          <Form.Control aria-label=\"Block Merkle Genesis\" name=\"merkleRoot\" type=\"text\" defaultValue={\"\"} disabled />\r\n        ) : (\r\n          <React.Fragment>\r\n            <Form.Control\r\n              aria-label=\"Block Merkle\"\r\n              name=\"merkleRoot\"\r\n              className=\"text-truncate\"\r\n              type=\"text\"\r\n              value={props.chain ? state.chain[props.index].merkleRoot : state.preview.merkleRoot}\r\n              readOnly\r\n            />\r\n            {props.chain && (\r\n              <InputGroup.Append>\r\n                <InputGroup.Text\r\n                  aria-label=\"Show Trans\"\r\n                  className=\"show-trans-eye\"\r\n                  onClick={() => handleViewTransactions()}\r\n                >\r\n                  {state.chain[props.index].showTrans ? \"🙈\" : \"🙉\"}\r\n                </InputGroup.Text>\r\n              </InputGroup.Append>\r\n            )}\r\n          </React.Fragment>\r\n        )}\r\n      </InputGroup>\r\n\r\n      {!props.chain && state.preview.valid && (\r\n        <Button aria-label=\"Add Block\" className=\"mt-2\" variant=\"success\" block onClick={() => handleAddBlock()}>\r\n          <h4 className=\"my-0\">Add Block</h4>\r\n        </Button>\r\n      )}\r\n    </Form>\r\n  );\r\n}\r\n","import { Tree } from \"./Tree\";\r\nimport { ITransaction } from \"../typings/AppTypes\";\r\nimport { digestMessage } from \"./conversion\";\r\n\r\nexport async function calculateMerkleTreeFormation(\r\n  verifiedTrans: ITransaction[],\r\n  selectedTrans: ITransaction[]\r\n): Promise<string[][]> {\r\n  let tree = [[\"\"]];\r\n  if (selectedTrans.length > 0) {\r\n    // need to make sure node's in tree appear in same order as in the verified transaction pane, regardless of selection order\r\n    const verifiedSignatures = verifiedTrans.map((trans) => trans.signature);\r\n    const selectedSignatures = selectedTrans.map((trans) => trans.signature);\r\n    let signatures = verifiedSignatures.filter((sig) => selectedSignatures.includes(sig));\r\n    tree = [signatures];\r\n\r\n    while (signatures.length !== 1) {\r\n      const hashArr = [] as string[];\r\n      for (let i = 0; i < signatures.length; i += 2) {\r\n        const hash = signatures[i + 1] ? await digestMessage(signatures[i] + signatures[i + 1]) : signatures[i];\r\n        hashArr.push(hash);\r\n      }\r\n\r\n      signatures = hashArr;\r\n      tree.push(hashArr);\r\n    }\r\n  }\r\n\r\n  return tree;\r\n}\r\n\r\nexport function getMerkleRoot(tree: string[][]): string {\r\n  return tree[tree.length - 1][0];\r\n}\r\n\r\nexport function flattenTree(tree: string[][]): string[] {\r\n  let flatTree = [] as string[];\r\n  // need to reverse each tree row so that printing produces the right order!\r\n  for (let i = 0; i < tree.length; i++) {\r\n    flatTree = flatTree.concat(tree[i].reverse());\r\n  }\r\n\r\n  return flatTree;\r\n}\r\n\r\nexport function drawTreeDiagramOnCanvas(merkleTree: string[][], canvasTree: Tree): void {\r\n  canvasTree.clear();\r\n  const flatTree = flattenTree(merkleTree);\r\n  for (let i = flatTree.length - 1; i >= 0; i--) {\r\n    canvasTree.addNode(flatTree[i]);\r\n  }\r\n  canvasTree.drawTree();\r\n}\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\n\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { IAction, IBlock, IState, ITransaction } from \"../../typings/AppTypes\";\r\n\r\nimport { digestMessage } from \"../../utils/conversion\";\r\nimport { calculateMerkleTreeFormation, getMerkleRoot } from \"../../utils/merkleTree\";\r\n\r\ntype TChangeType = \"from\" | \"to\" | \"message\" | \"amount\";\r\ntype TInputChange<T = HTMLInputElement> = React.ChangeEvent<T>;\r\n\r\nexport default function BlockTrans({ index }: { index: number }): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const [transDetails, setTransDetails] = useState<ITransaction[]>(state.chain[index].transactions);\r\n\r\n  async function calculateNewMerkleRoot(newVal: number | string, i: number, type: TChangeType): Promise<void> {\r\n    const newTrans: ITransaction[] = JSON.parse(JSON.stringify(transDetails)); // deep copy\r\n\r\n    // update the changed value & signature\r\n    newTrans[i] = { ...newTrans[i], [type]: newVal };\r\n    const message = newTrans[i].to + newTrans[i].from + newTrans[i].amount + newTrans[i].message;\r\n    newTrans[i].signature = await digestMessage(message);\r\n    setTransDetails(newTrans);\r\n\r\n    // calculate new merkle root\r\n    const newTree = await calculateMerkleTreeFormation(newTrans, newTrans);\r\n    const newRoot = getMerkleRoot(newTree);\r\n\r\n    // propagate changes to next blocks\r\n    const newBlocks: IBlock[] = [];\r\n    const timestamp = Date.now();\r\n    let prevHash = state.chain[index].prevHash;\r\n    let currHash = \"\";\r\n    for (let i = index; i < state.chain.length; i++) {\r\n      const transactions = i === index ? newTrans : state.chain[i].transactions;\r\n      const merkleRoot = i === index ? newRoot : state.chain[i].merkleRoot;\r\n      currHash = await digestMessage(i + prevHash + merkleRoot);\r\n      newBlocks.push({ ...state.chain[i], timestamp, prevHash, currHash, transactions, merkleRoot, valid: false });\r\n      prevHash = currHash; // next block's prevHash is this block's currHash\r\n    }\r\n\r\n    dispatch({ type: ACTIONS.UPDATE_BLOCK, payload: { block: newBlocks } });\r\n  }\r\n\r\n  return (\r\n    <div className=\"row flex-nowrap overflow-auto mx-1 p-2 rounded bg-dark\">\r\n      {transDetails.map((transaction, i) => {\r\n        return (\r\n          <div\r\n            className={\r\n              (transDetails.length > 1 && i !== transDetails.length - 1 ? \"mr-2 \" : \"\") +\r\n              \"col-12 bg-light border border-dark p-1 rounded\"\r\n            }\r\n            key={`sig:${i}`}\r\n          >\r\n            <Form.Group className=\"mb-2 text-center\">\r\n              <Form.Control\r\n                className=\"text-truncate\"\r\n                type=\"text\"\r\n                value={transaction.from}\r\n                onChange={(e: TInputChange) => calculateNewMerkleRoot(e.target.value, i, \"from\")}\r\n              />\r\n              <h3 className=\"my-0\">↓</h3>\r\n              <Form.Control\r\n                className=\"text-truncate\"\r\n                type=\"text\"\r\n                value={transaction.to}\r\n                onChange={(e: TInputChange) => calculateNewMerkleRoot(e.target.value, i, \"to\")}\r\n              />\r\n            </Form.Group>\r\n\r\n            <InputGroup className=\"mb-2\">\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>Msg</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                rows={3}\r\n                value={transaction.message}\r\n                onChange={(e: TInputChange<HTMLTextAreaElement>) =>\r\n                  calculateNewMerkleRoot(e.target.value, i, \"message\")\r\n                }\r\n              />\r\n            </InputGroup>\r\n\r\n            <InputGroup className=\"mb-2\">\r\n              <Form.Control\r\n                type=\"number\"\r\n                value={transaction.amount ?? 0}\r\n                onChange={(e: TInputChange) => calculateNewMerkleRoot(e.target.value, i, \"amount\")}\r\n              />\r\n              <InputGroup.Append>\r\n                <InputGroup.Text>LC</InputGroup.Text>\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n\r\n            <InputGroup>\r\n              <InputGroup.Prepend>\r\n                <InputGroup.Text>Sig</InputGroup.Text>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                key={transaction.signature}\r\n                className=\"text-truncate\"\r\n                type=\"text\"\r\n                defaultValue={transaction.signature}\r\n                readOnly\r\n              />\r\n            </InputGroup>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useRef, useContext } from \"react\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { IAction, IBlock, IState } from \"../../typings/AppTypes\";\r\nimport { digestMessage, randomHash } from \"../../utils/conversion\";\r\n\r\nimport \"./Block.scss\";\r\ninterface IStatisticsProps {\r\n  chain: boolean;\r\n  index: number;\r\n}\r\n\r\nexport default function Statistics(props: IStatisticsProps): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const nonce = useRef<number>(0);\r\n  const [header, setHeader] = useState<number>(0);\r\n  const [target, setTarget] = useState<string>(\"\");\r\n  const [solution, setSolution] = useState<string>(\"\");\r\n  const [disableMineBtn, setDisableMineBtn] = useState<boolean>(false);\r\n\r\n  async function handleMine() {\r\n    const { chain, index } = props;\r\n\r\n    setDisableMineBtn(true);\r\n    nonce.current = Math.round(Math.random() * 1e6);\r\n\r\n    // make target with 2 or 3 leading zeros\r\n    const numZeros = Math.round(Math.random()) + 2;\r\n    const re = new RegExp(`^.{0,${numZeros}}`, \"g\");\r\n    const zerosStr = new Array(numZeros).fill(\"0\").join(\"\");\r\n    let targetHash = await digestMessage(randomHash(20));\r\n    targetHash = targetHash.replace(re, zerosStr);\r\n    setTarget(targetHash);\r\n\r\n    // mine block for a new current hash (solution)\r\n    let candidateSolution = \"\";\r\n    let header = nonce.current;\r\n    while (header <= Number.MAX_SAFE_INTEGER) {\r\n      candidateSolution = await digestMessage(header.toString());\r\n      setSolution(candidateSolution);\r\n      setHeader(header++);\r\n\r\n      const re = new RegExp(`^0{${numZeros}}`); // exactly numZeros 0 characters at start of string\r\n      if (candidateSolution.match(re)) break;\r\n    }\r\n    setDisableMineBtn(false);\r\n\r\n    const timestamp = Date.now();\r\n    const payload = {\r\n      [!chain ? \"preview\" : \"block\"]: {\r\n        ...(!chain ? state.preview : state.chain[index]),\r\n        timestamp,\r\n        prevHash: state.chain[(!chain ? state.preview.index : index) - 1].currHash,\r\n        currHash: candidateSolution,\r\n        valid: candidateSolution <= targetHash\r\n      }\r\n    };\r\n\r\n    const type = !chain ? ACTIONS.UPDATE_PREVIEW : ACTIONS.UPDATE_BLOCK;\r\n    dispatch({ type, payload });\r\n\r\n    // propagate changes to next blocks if in blockchain mode and mined block is not last\r\n    if (chain) {\r\n      const newBlocks: IBlock[] = [];\r\n      let prevHash = candidateSolution;\r\n      let currHash = \"\";\r\n      for (let i = index + 1; i < state.chain.length; i++) {\r\n        currHash = await digestMessage(i + prevHash + state.chain[i].merkleRoot);\r\n        newBlocks.push({ ...state.chain[i], timestamp, prevHash, currHash, valid: false });\r\n        prevHash = currHash; // next block's prevHash is this block's currHash\r\n      }\r\n\r\n      if (newBlocks.length) {\r\n        dispatch({ type: ACTIONS.UPDATE_BLOCK, payload: { block: newBlocks } });\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Form aria-label=\"Block Statistics\" className={props.chain ? \"my-3\" : \"col-11 col-lg-5 mx-3\"}>\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Nonce</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Block Nonce\"\r\n          name=\"nonce\"\r\n          type=\"number\"\r\n          key={nonce.current}\r\n          defaultValue={nonce.current}\r\n          disabled\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Header</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control aria-label=\"Block Header\" name=\"header\" type=\"number\" value={header} disabled />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Target</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Block Target\"\r\n          name=\"target\"\r\n          className=\"text-truncate\"\r\n          type=\"text\"\r\n          value={target}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Sol&apos;n</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Block Solution\"\r\n          name=\"solution\"\r\n          className={\r\n            \"text-truncate \" +\r\n            ((props.chain && state.chain[props.index].valid) || (!props.chain && state.preview.valid)\r\n              ? \"valid-solution\"\r\n              : \"invalid-solution\")\r\n          }\r\n          type=\"text\"\r\n          value={solution}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <Button\r\n        aria-label=\"Block Mine\"\r\n        variant=\"primary\"\r\n        className=\"btn-block mt-2 py-2\"\r\n        disabled={\r\n          (props.chain && state.chain[props.index].valid) ||\r\n          (!props.chain && (state.preview.valid || state.selectedTrans.length === 0)) ||\r\n          disableMineBtn\r\n        }\r\n        onClick={() => handleMine()}\r\n      >\r\n        <h4 className=\"my-0 row justify-content-end flex-nowrap\">\r\n          <span className=\"col-10 pl-5\">Mine</span>\r\n          <span\r\n            className={\"spinner-border spinner-border-md mr-3 \" + (disableMineBtn ? \"visible\" : \"invisible\")}\r\n            role=\"status\"\r\n          />\r\n        </h4>\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport Block from \"../components/Block/Block\";\r\nimport BlockTrans from \"../components/Block/BlockTrans\";\r\nimport Statistics from \"../components/Block/Statistics\";\r\nimport NavMenu from \"../components/NavMenu/NavMenu\";\r\nimport { AppContext } from \"../context/AppContext\";\r\nimport { IState } from \"../typings/AppTypes\";\r\n\r\nexport default function Chain(): JSX.Element {\r\n  const { state } = useContext(AppContext) as { state: IState };\r\n\r\n  return (\r\n    <div>\r\n      <NavMenu />\r\n\r\n      <div className=\"mx-3 row flex-nowrap overflow-auto\">\r\n        {state.chain.map((block) => (\r\n          <div className=\"block mx-2 flex-column flex-shrink-0\" key={block.prevHash}>\r\n            <Block chain={true} index={block.index} />\r\n            <Statistics chain={true} index={block.index} />\r\n            {block.showTrans && <BlockTrans index={block.index} />}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { IAction, IState, ITransaction } from \"../../typings/AppTypes\";\r\nimport { calculateMerkleTreeFormation, getMerkleRoot } from \"../../utils/merkleTree\";\r\n\r\nimport \"./Transaction.scss\";\r\n\r\nexport default function TransactionItems(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  async function selectTransaction(transaction: ITransaction): Promise<void> {\r\n    let selectedTrans: ITransaction[] = JSON.parse(JSON.stringify(state.selectedTrans));\r\n    const signatures = selectedTrans.map((x) => x.signature);\r\n    const included = signatures.includes(transaction.signature);\r\n\r\n    if (selectedTrans.length < 4 || included) {\r\n      // if just selected - push onto stack, else remove it\r\n      // adjust backgrounds according to selection/deselection\r\n      if (!included) {\r\n        selectedTrans.push(transaction);\r\n      } else {\r\n        selectedTrans = selectedTrans.filter((x) => x.signature !== transaction.signature);\r\n      }\r\n\r\n      const newTree = await calculateMerkleTreeFormation(state.verifiedTrans, selectedTrans);\r\n      const newPreview = {\r\n        ...state.preview,\r\n        merkleRoot: getMerkleRoot(newTree),\r\n        valid: false\r\n      };\r\n\r\n      dispatch({ type: ACTIONS.UPDATE_SELECTED_TRANS, payload: { selectedTrans } });\r\n      dispatch({ type: ACTIONS.UPDATE_PREVIEW, payload: { preview: newPreview } });\r\n    } else {\r\n      alert(\"You can mine at most 4 transactions at a time!\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <h3 aria-label=\"Title\" className=\"font-weight-bold\">\r\n        Verified Transactions\r\n      </h3>\r\n      <div className=\"trans-list row flex-nowrap overflow-auto bg-dark mx-1 px-2 rounded\">\r\n        {state.verifiedTrans.map((transaction) => {\r\n          return (\r\n            <Form\r\n              aria-label=\"Transaction Information\"\r\n              className={\r\n                \"trans-item \" +\r\n                (state.selectedTrans.map((x) => x.signature).includes(transaction.signature) ? \"selected\" : \"not-selected\") // prettier-ignore\r\n              }\r\n              onClick={() => selectTransaction(transaction)}\r\n              key={`sig:${transaction.signature}`}\r\n            >\r\n              <Form.Group className=\"mb-2 text-center\">\r\n                <Form.Control\r\n                  aria-label=\"Transaction From\"\r\n                  name=\"from\"\r\n                  className=\"text-truncate\"\r\n                  type=\"text\"\r\n                  defaultValue={transaction.from}\r\n                  readOnly\r\n                />\r\n                <h3 className=\"my-0\">↓</h3>\r\n                <Form.Control\r\n                  aria-label=\"Transaction To\"\r\n                  name=\"to\"\r\n                  className=\"text-truncate\"\r\n                  type=\"text\"\r\n                  defaultValue={transaction.to}\r\n                  readOnly\r\n                />\r\n              </Form.Group>\r\n\r\n              <InputGroup className=\"mb-2\">\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>Msg</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <Form.Control\r\n                  aria-label=\"Transaction Message\"\r\n                  name=\"message\"\r\n                  as=\"textarea\"\r\n                  defaultValue={transaction.message}\r\n                  readOnly\r\n                />\r\n              </InputGroup>\r\n\r\n              <InputGroup className=\"mb-2\">\r\n                <Form.Control\r\n                  aria-label=\"Transaction Amount\"\r\n                  name=\"amount\"\r\n                  type=\"number\"\r\n                  defaultValue={transaction.amount}\r\n                  disabled\r\n                />\r\n                <InputGroup.Append>\r\n                  <InputGroup.Text>LC</InputGroup.Text>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n\r\n              <InputGroup>\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>Sig</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <Form.Control\r\n                  aria-label=\"Transaction Signature\"\r\n                  name=\"signature\"\r\n                  className=\"text-truncate\"\r\n                  type=\"text\"\r\n                  defaultValue={transaction.signature}\r\n                  readOnly\r\n                />\r\n              </InputGroup>\r\n            </Form>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { ITransaction } from \"../typings/AppTypes\";\r\n\r\n// modified from https://github.com/foqc/bfs-canvas-tree\r\ninterface ICoordinate {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nclass Node {\r\n  value: string;\r\n  children: Node[];\r\n  parent: Node | null;\r\n  pos: ICoordinate;\r\n\r\n  constructor(value: string) {\r\n    this.value = value;\r\n    this.children = [];\r\n    this.parent = null;\r\n    this.pos = { x: 0, y: 0 };\r\n  }\r\n\r\n  get left(): Node {\r\n    return this.children[0];\r\n  }\r\n\r\n  set left(node: Node) {\r\n    node.parent = this;\r\n    this.children[0] = node;\r\n  }\r\n\r\n  get right(): Node {\r\n    return this.children[1];\r\n  }\r\n\r\n  set right(node: Node) {\r\n    node.parent = this;\r\n    this.children[1] = node;\r\n  }\r\n\r\n  get position(): ICoordinate {\r\n    return this.pos;\r\n  }\r\n\r\n  set position(position: ICoordinate) {\r\n    this.pos = position;\r\n  }\r\n}\r\n\r\nexport class Tree {\r\n  #root: Node | null;\r\n  #transactionSignatures: string[];\r\n  #startPosition: ICoordinate;\r\n  #dim: { width: number; height: number };\r\n  #ctx: CanvasRenderingContext2D | null;\r\n\r\n  constructor(canvas: HTMLCanvasElement, transactions: ITransaction[]) {\r\n    const xStart = window.innerWidth < 1200 ? window.innerWidth * 1.8 : (window.innerWidth / 2) * 0.7;\r\n    this.#root = null;\r\n    this.#transactionSignatures = transactions.map((transaction) => transaction.signature.slice(0, 25) + \"...\");\r\n    this.#startPosition = { x: xStart, y: 5 };\r\n    this.#ctx = canvas.getContext(\"2d\");\r\n    this.#dim = { width: canvas.width, height: canvas.height };\r\n  }\r\n\r\n  calculatePosition({ x, y }: ICoordinate, isLeft = false): ICoordinate {\r\n    const offset = 50;\r\n    return { x: isLeft ? x - offset * 6 : x + offset * 6, y: y + offset };\r\n  }\r\n\r\n  clear(): void {\r\n    if (this.#ctx) {\r\n      this.#ctx.clearRect(0, 0, this.#dim.width, this.#dim.height);\r\n    }\r\n  }\r\n\r\n  addNode(value: string): void {\r\n    const newNode = new Node(value !== \"\" ? value.slice(0, 25) + \"...\" : \"\");\r\n    if (!this.#root) {\r\n      newNode.position = this.#startPosition;\r\n      this.#root = newNode;\r\n    } else {\r\n      // start at root, if no node on left add and break, likewise for right\r\n      // only move in direction that does not have both children\r\n      let node = this.#root;\r\n      while (node) {\r\n        if (!node.left) {\r\n          newNode.position = this.calculatePosition(node.position, true);\r\n          node.left = newNode;\r\n          break;\r\n        }\r\n\r\n        if (!node.right) {\r\n          newNode.position = this.calculatePosition(node.position);\r\n          node.right = newNode;\r\n          break;\r\n        }\r\n\r\n        node = !node.left.left || !node.left.right ? node.left : node.right;\r\n      }\r\n    }\r\n  }\r\n\r\n  drawTree(): void {\r\n    const queue = [] as Node[];\r\n    queue.push(this.#root as Node);\r\n\r\n    // level order traversal\r\n    while (queue.length !== 0) {\r\n      const node = queue.shift();\r\n      const rectWidth = node && node.value.length * 9;\r\n\r\n      if (this.#ctx && rectWidth && node) {\r\n        // draw the root node\r\n        const { x, y } = node.position;\r\n        this.#ctx.beginPath();\r\n\r\n        this.#ctx.font = \"1rem Arial\";\r\n        this.#ctx.strokeStyle = \"#000\";\r\n\r\n        const leafOrBodyColor = this.#transactionSignatures.includes(node.value) ? \"#ddf\" : \"#ff0a\";\r\n        this.#ctx.fillStyle = node.value === this.#root?.value ? \"#dfd\" : leafOrBodyColor;\r\n\r\n        this.#ctx.fillRect(x - rectWidth / 2, y + 5, rectWidth, 30);\r\n        this.#ctx.fillStyle = \"#000\";\r\n        this.#ctx.fillText(node.value, x + 10 - rectWidth / 2, y + 27);\r\n\r\n        // draw it's children\r\n        node.children.forEach((child, i) => {\r\n          child.position.x = i === 1 ? child.position.x - 150 : child.position.x + 150; // avoid overlap\r\n          queue.push(child);\r\n          if (this.#ctx) {\r\n            this.#ctx.beginPath();\r\n            this.#ctx.moveTo(x + 0.5, y + 35);\r\n            this.#ctx.lineTo(child.position.x + 0.5, child.position.y + 5);\r\n            this.#ctx.stroke();\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import React, { useContext, useEffect, useRef } from \"react\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IState } from \"../../typings/AppTypes\";\r\nimport { calculateMerkleTreeFormation, drawTreeDiagramOnCanvas } from \"../../utils/merkleTree\";\r\nimport { Tree } from \"../../utils/Tree\";\r\n\r\nexport default function PreviewTree(): JSX.Element {\r\n  const { state } = useContext(AppContext) as { state: IState };\r\n\r\n  const treeCanvas = useRef<HTMLCanvasElement | null>(null);\r\n\r\n  useEffect(() => {\r\n    async function drawTree() {\r\n      if (treeCanvas.current) {\r\n        const tree = await calculateMerkleTreeFormation(state.verifiedTrans, state.selectedTrans);\r\n        const canvasTree = new Tree(treeCanvas.current, state.selectedTrans);\r\n        drawTreeDiagramOnCanvas(tree, canvasTree);\r\n      }\r\n    }\r\n\r\n    drawTree();\r\n  }, [state.selectedTrans, state.verifiedTrans]);\r\n\r\n  return (\r\n    <div className=\"mb-2 d-none d-lg-block\">\r\n      <h4 className=\"font-weight-bold text-center\">Merkle Tree Visualization</h4>\r\n      <canvas ref={treeCanvas} className=\"border border-dark rounded\" width={window.outerWidth * 0.7} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport NavMenu from \"../components/NavMenu/NavMenu\";\r\nimport Block from \"../components/Block/Block\";\r\nimport TransactionItems from \"../components/Transaction/TransactionItems\";\r\nimport PreviewTree from \"../components/Transaction/PreviewTree\";\r\nimport Statistics from \"../components/Block/Statistics\";\r\n\r\nexport default function Mine(): JSX.Element {\r\n  return (\r\n    <div>\r\n      <NavMenu />\r\n      <TransactionItems />\r\n      <div className=\"container-fluid row d-flex justify-content-center mx-auto my-3\">\r\n        <PreviewTree />\r\n        <Statistics chain={false} index={0} />\r\n        <Block chain={false} index={0} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { ACTIONS } from \"../enums/AppDispatchActions\";\r\nimport { IAction, IState, IUser, ITransaction, IBlock, IMainUser } from \"../typings/AppTypes\";\r\n\r\nexport const AppReducer = (state: IState, action: IAction): IState => {\r\n  switch (action.type) {\r\n    case ACTIONS.ADD_VERIFIED_TRANS: {\r\n      const { trans } = action.payload as { trans: ITransaction };\r\n      const verifiedTrans = [...state.verifiedTrans, { ...trans }];\r\n      localStorage.setItem(\"verTrans\", JSON.stringify(verifiedTrans, null, 2));\r\n      return { ...state, verifiedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_VERIFIED_TRANS: {\r\n      const selectedTransSignatures = state.selectedTrans.map((x) => x.signature);\r\n      const verifiedTrans = state.verifiedTrans.filter((x) => !selectedTransSignatures.includes(x.signature));\r\n      localStorage.setItem(\"verTrans\", JSON.stringify(verifiedTrans, null, 2));\r\n      return { ...state, verifiedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_SELECTED_TRANS: {\r\n      const { selectedTrans } = action.payload as { selectedTrans: ITransaction[] };\r\n      localStorage.setItem(\"selTrans\", JSON.stringify(selectedTrans, null, 2));\r\n      return { ...state, selectedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_USERS: {\r\n      const { users } = action.payload as { users: IUser[] };\r\n      localStorage.setItem(\"users\", JSON.stringify(users, null, 2));\r\n      return { ...state, users };\r\n    }\r\n\r\n    case ACTIONS.SET_MAIN_USER: {\r\n      const { user } = action.payload as { user: IMainUser };\r\n      localStorage.setItem(\"user\", JSON.stringify(user, null, 2));\r\n      return { ...state, user };\r\n    }\r\n\r\n    case ACTIONS.ADD_BLOCK: {\r\n      const { block } = action.payload as { block: IBlock };\r\n      const chain = [...state.chain, { ...block }];\r\n      localStorage.setItem(\"chain\", JSON.stringify(chain, null, 2));\r\n      return { ...state, chain };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_BLOCK: {\r\n      const { block } = action.payload as { block: IBlock | IBlock[] };\r\n      const blocks = Array.isArray(block) ? [...block] : [block];\r\n      const chain = [...state.chain];\r\n\r\n      blocks.forEach((b) => (chain[b.index] = { ...b }));\r\n\r\n      localStorage.setItem(\"chain\", JSON.stringify(chain, null, 2));\r\n      return { ...state, chain };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_PREVIEW: {\r\n      const { preview } = action.payload as { preview: IBlock };\r\n      localStorage.setItem(\"preview\", JSON.stringify(preview, null, 2));\r\n      return { ...state, preview: { ...preview } };\r\n    }\r\n\r\n    case ACTIONS.ASSIGN_COPIED: {\r\n      const { copied } = action.payload as { copied: string };\r\n      localStorage.setItem(\"copied\", copied);\r\n      return { ...state, copied };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { useMemo, useReducer } from \"react\";\r\nimport { Route, BrowserRouter as Router, Redirect } from \"react-router-dom\";\r\n\r\nimport Wallet from \"../../pages/Wallet\";\r\nimport Chain from \"../../pages/Chain\";\r\nimport Mine from \"../../pages/Mine\";\r\n\r\nimport { AppReducer } from \"../../reducers/AppReducer\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\n\r\nimport \"./App.scss\";\r\n\r\nexport default function App(): JSX.Element {\r\n  const [state, dispatch] = useReducer(AppReducer, {\r\n    verifiedTrans: JSON.parse(localStorage.getItem(\"verTrans\") as string) ?? [],\r\n    selectedTrans: JSON.parse(localStorage.getItem(\"selTrans\") as string) ?? [],\r\n    users: JSON.parse(localStorage.getItem(\"users\") as string) ?? [],\r\n    user: JSON.parse(localStorage.getItem(\"user\") as string) ?? { publicKey: \"\", privateKey: \"\", balance: 1000.0 },\r\n    chain: JSON.parse(localStorage.getItem(\"chain\") as string) ?? [\r\n      {\r\n        index: 0,\r\n        prevHash: \"\",\r\n        currHash: new Array(64).fill(\"0\").join(\"\"),\r\n        transactions: [],\r\n        timestamp: Date.parse(\"31 Apr 2021 00:00:00 UTC\"),\r\n        merkleRoot: \"\",\r\n        valid: true\r\n      }\r\n    ],\r\n    copied: \"\",\r\n    preview: JSON.parse(localStorage.getItem(\"preview\") as string) ?? {\r\n      index: 1,\r\n      prevHash: new Array(64).fill(\"0\").join(\"\"),\r\n      currHash: \"\",\r\n      transactions: [],\r\n      timestamp: Date.parse(\"31 Apr 2021 00:00:00 UTC\"),\r\n      merkleRoot: \"\",\r\n      valid: false\r\n    }\r\n  });\r\n\r\n  // prevent re-rendering children when App re-renders\r\n  const value = useMemo(() => ({ state, dispatch }), [state, dispatch]);\r\n\r\n  return (\r\n    <Router basename={\"/LibraCoin\"}>\r\n      <AppContext.Provider value={value}>\r\n        <Route exact path=\"/\">\r\n          <Redirect to=\"/wallet\" />\r\n        </Route>\r\n        <Route path=\"/wallet\" component={Wallet} />\r\n        <Route path=\"/mine\" component={Mine} />\r\n        <Route path=\"/blockchain\" component={Chain} />\r\n      </AppContext.Provider>\r\n    </Router>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./components/App/App\";\r\nimport \"bootstrap/scss/bootstrap.scss\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}