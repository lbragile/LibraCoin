{"version":3,"sources":["components/NavMenu/NavMenu.tsx","enums/AppDispatchActions.ts","context/AppContext.ts","utils/copyInput.ts","utils/conversion.ts","components/User/KeyGeneration.tsx","components/Transaction/SendUI.tsx","components/Transaction/SignUI.tsx","components/Transaction/Transaction.tsx","components/User/UserItems.tsx","pages/Wallet.tsx","components/Block/Statistics.tsx","components/Block/Block.tsx","components/Chain/Chain.tsx","components/Transaction/TransactionItems.tsx","pages/Mine.tsx","reducers/AppReducer.ts","components/App/App.tsx","index.tsx"],"names":["NavMenu","Navbar","bg","expand","className","Brand","href","src","alt","width","Toggle","aria-controls","Collapse","id","Nav","Link","active","location","includes","ACTIONS","AppContext","React","createContext","undefined","copyKey","e","setCopied","type","target","select","setSelectionRange","document","execCommand","isPublic","value","bufferToHex","hashBuffer","Array","from","Uint8Array","map","b","toString","padStart","join","digestMessage","message","a","msgUint8","TextEncoder","encode","window","crypto","subtle","digest","KeyGeneration","useContext","state","dispatch","publicKeyRef","useRef","privateKeyRef","numRows","useState","copied","CryptoKeyToHex","format","key","exportKey","buf","generateKey","name","namedCurve","publicKey","privateKey","publicKeyStr","privateKeyStr","current","innerText","length","fill","localStorage","setItem","JSON","stringify","balance","newUsers","users","UPDATE_USERS","payload","parse","getItem","Button","variant","onClick","Form","Group","Label","Control","as","rows","defaultValue","isValid","onFocus","ref","Feedback","SendUI","props","noValidate","onSubmit","handleSubmit","details","to","disabled","Text","InputGroup","amount","Prepend","placeholder","signature","validated","block","SignUI","pattern","required","onBlur","userBalance","Math","min","max","toFixed","checkAmount","Transaction","setValidated","signed","setSigned","formDetails","preventDefault","form","currentTarget","checkValidity","formInputs","formValues","Object","values","slice","input","verifiedTrans","UserItems","user","random","Wallet","Statistics","origNonce","mineBtn","console","log","chain","style","color","solution","selectedTrans","handleMine","Block","startValid","setSolution","setIsValid","showBtn","setShowBtn","timestamp","Date","now","setTimestamp","useEffect","Fragment","index","prevHash","currHash","onChange","handleTransactionInfoChange","Chain","TransactionLineUI","transaction","x","filter","push","UPDATE_SELECTED_TRANS","selectTransaction","Mine","AppReducer","action","UPDATE_VERIFIED_TRANS","selectedTransSignatures","App","useReducer","useMemo","basename","Provider","exact","path","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.82972320.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\n\r\nimport \"./NavMenu.css\";\r\n\r\nexport default function NavMenu(): JSX.Element {\r\n  return (\r\n    <Navbar bg=\"none\" expand=\"lg\" className=\"mb-3\">\r\n      <Navbar.Brand href=\"https://github.com/lbragile/LibraCoin\">\r\n        <img src=\"./assets/libracoin-logo-256.png\" alt=\"LibraCoin Logo\" width=\"64\" />\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n          <Nav.Link href=\"/LibraCoin/wallet\" active={location.href.includes(\"/wallet\")}>\r\n            Wallet\r\n          </Nav.Link>\r\n          <Nav.Link href=\"/LibraCoin/mine\" active={location.href.includes(\"/mine\")}>\r\n            Mine\r\n          </Nav.Link>\r\n          <Nav.Link href=\"/LibraCoin/blockchain\" active={location.href.includes(\"/blockchain\")}>\r\n            Blockchain\r\n          </Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\n","export enum ACTIONS {\r\n  ADD_VERIFIED_TRANS,\r\n  UPDATE_VERIFIED_TRANS,\r\n  UPDATE_SELECTED_TRANS,\r\n  UPDATE_USERS,\r\n}\r\n","import React from \"react\";\r\nimport { IAction, IState } from \"../typings/AppTypes\";\r\n\r\ntype TAppContext = { state: IState; dispatch: React.Dispatch<IAction> } | undefined;\r\n\r\nexport const AppContext = React.createContext<TAppContext>(undefined);\r\n","export function copyKey(\r\n  e: React.FocusEvent<HTMLTextAreaElement | HTMLInputElement>,\r\n  setCopied: (arg: boolean[]) => void,\r\n  type?: \"public\" | \"private\"\r\n): void {\r\n  e.target.select();\r\n  e.target.setSelectionRange(0, 1e6);\r\n  document.execCommand(\"copy\");\r\n\r\n  // wallet page, copying keys\r\n  if (type) {\r\n    const isPublic = type === \"public\";\r\n    setCopied([isPublic, !isPublic && !e.target.value.includes(\"◦\")]);\r\n  } else {\r\n    setCopied([true]);\r\n  }\r\n}\r\n","export function bufferToHex(hashBuffer: ArrayBuffer): string {\r\n  const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\r\n  const hashHex = hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\"); // convert bytes to hex string\r\n  return hashHex;\r\n}\r\n\r\nexport async function digestMessage(message: string): Promise<string> {\r\n  const msgUint8 = new TextEncoder().encode(message); // encode as (utf-8) Uint8Array\r\n  const hashBuffer = await window.crypto.subtle.digest(\"SHA-256\", msgUint8); // hash the message\r\n  return bufferToHex(hashBuffer);\r\n}\r\n","import React, { useRef, useState, useContext } from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\n\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState } from \"../../typings/AppTypes\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { copyKey } from \"../../utils/copyInput\";\r\nimport { bufferToHex } from \"../../utils/conversion\";\r\n\r\nimport \"./User.css\";\r\n\r\nexport default function KeyGeneration(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const publicKeyRef = useRef<HTMLTextAreaElement>(null);\r\n  const privateKeyRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n  const numRows = useRef(3);\r\n\r\n  const [copied, setCopied] = useState<boolean[]>([false, false]);\r\n\r\n  async function CryptoKeyToHex(format: string, key: CryptoKey): Promise<string> {\r\n    const buf = (await window.crypto.subtle.exportKey(format, key)) as ArrayBuffer;\r\n    return bufferToHex(buf);\r\n  }\r\n\r\n  async function addUser(): Promise<void> {\r\n    const { publicKey, privateKey } = await window.crypto.subtle.generateKey(\r\n      { name: \"ECDSA\", namedCurve: \"P-256\" },\r\n      true,\r\n      [\"sign\", \"verify\"]\r\n    );\r\n\r\n    const publicKeyStr = await CryptoKeyToHex(\"spki\", publicKey as CryptoKey);\r\n    const privateKeyStr = await CryptoKeyToHex(\"pkcs8\", privateKey as CryptoKey);\r\n    if (publicKeyRef.current && privateKeyRef.current) {\r\n      publicKeyRef.current.innerText = publicKeyStr;\r\n      privateKeyRef.current.innerText = new Array(privateKeyStr.length).fill(\"◦\").join(\"\");\r\n    }\r\n    localStorage.setItem(\"user\", JSON.stringify({ publicKey: publicKeyStr, privateKey: privateKeyStr, balance: 1000 })); // prettier-ignore\r\n\r\n    const newUsers = [...state.users, { publicKey: publicKeyStr, balance: 1000 }];\r\n    localStorage.setItem(\"users\", JSON.stringify(newUsers));\r\n    dispatch({ type: ACTIONS.UPDATE_USERS, payload: { users: newUsers } });\r\n  }\r\n\r\n  const togglePrivateKey = () => {\r\n    if (privateKeyRef.current) {\r\n      if (privateKeyRef.current.value.includes(\"◦\")) {\r\n        privateKeyRef.current.value = JSON.parse(localStorage.getItem(\"user\") as string).privateKey;\r\n      } else {\r\n        privateKeyRef.current.value = new Array(privateKeyRef.current.value.length).fill(\"◦\").join(\"\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"row d-flex align-items-center justify-content-center\">\r\n      {!JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey && (\r\n        <Button variant=\"primary\" className=\"p-3 mx-2 font-weight-bold\" onClick={addUser}>\r\n          Create Wallet\r\n        </Button>\r\n      )}\r\n      <Form.Group className=\"user-key col-5 px-0\">\r\n        <Form.Label className=\"mb-3\">\r\n          <h3 className=\"mb-0\">Public Key:</h3>\r\n        </Form.Label>\r\n        <Form.Control\r\n          as=\"textarea\"\r\n          rows={numRows.current}\r\n          defaultValue={localStorage.getItem(\"user\") && JSON.parse(localStorage.getItem(\"user\") as string).publicKey}\r\n          isValid={copied[0]}\r\n          onFocus={(e: React.FocusEvent<HTMLTextAreaElement>) => copyKey(e, setCopied, \"public\")}\r\n          ref={publicKeyRef}\r\n        />\r\n        <Form.Control.Feedback type=\"valid\">Copied to clipboard!</Form.Control.Feedback>\r\n      </Form.Group>\r\n\r\n      <Form.Group className=\"user-key col-5 px-0\">\r\n        <Form.Label className=\"mb-3\">\r\n          <h3 className=\"mb-0\">\r\n            Private Key:{\" \"}\r\n            {JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey && (\r\n              <span id=\"private-reveal-eyes\" onClick={togglePrivateKey}>\r\n                👀\r\n              </span>\r\n            )}\r\n          </h3>\r\n        </Form.Label>\r\n        <Form.Control\r\n          as=\"textarea\"\r\n          rows={numRows.current}\r\n          defaultValue={\r\n            localStorage.getItem(\"user\")\r\n              ? new Array(JSON.parse(localStorage.getItem(\"user\") as string).privateKey.length).fill(\"◦\").join(\"\")\r\n              : \"\"\r\n          }\r\n          onFocus={(e: React.FocusEvent<HTMLTextAreaElement>) => copyKey(e, setCopied, \"private\")}\r\n          isValid={copied[1]}\r\n          ref={privateKeyRef}\r\n        />\r\n        <Form.Control.Feedback type=\"valid\">Copied to clipboard!</Form.Control.Feedback>\r\n      </Form.Group>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\r\nimport { ITransaction } from \"../../typings/AppTypes\";\r\nimport { ISign } from \"./SignUI\";\r\n\r\ninterface ISend extends ISign {\r\n  details: ITransaction;\r\n  setSigned: (arg: boolean) => void;\r\n  setValidated: (arg: boolean) => void;\r\n}\r\n\r\nexport default function SendUI(props: ISend): JSX.Element {\r\n  return (\r\n    <Form noValidate className=\"col-5 trans-form\" onSubmit={(e) => props.handleSubmit(e)}>\r\n      <Form.Group>\r\n        <Form.Control type=\"text\" defaultValue={props.details.to} disabled={true} />\r\n        <Form.Text className=\"text-muted\">The receiver&apos;s public key</Form.Text>\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <InputGroup className=\"mb-2\">\r\n          <Form.Control type=\"number\" defaultValue={props.details.amount} disabled={true} />\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>LC</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <Form.Control\r\n          as=\"textarea\"\r\n          defaultValue={props.details.message}\r\n          rows={5}\r\n          placeholder=\"optional message...\"\r\n          disabled={true}\r\n        />\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <Form.Control type=\"text\" defaultValue={props.details.signature} disabled={true} />\r\n        <Form.Text className=\"text-muted\">\r\n          Transaction Signature → receiver uses this along with your public key to verify transaction.\r\n        </Form.Text>\r\n      </Form.Group>\r\n\r\n      <Button variant=\"primary\" type=\"submit\" disabled={!props.validated} block>\r\n        <b>Send</b>\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\r\n\r\nexport interface ISign {\r\n  validated: boolean;\r\n  handleSubmit: (e: React.FormEvent<HTMLFormElement>) => void;\r\n}\r\n\r\nexport default function SignUI({ validated, handleSubmit }: ISign): JSX.Element {\r\n  function checkAmount(e: React.ChangeEvent<HTMLInputElement>): void {\r\n    const userBalance = JSON.parse(localStorage.getItem(\"user\") as string)?.balance || 1000;\r\n    e.target.value = Math.min(Math.max(0.1, +e.target.value), userBalance)\r\n      .toFixed(2)\r\n      .toString();\r\n  }\r\n\r\n  return (\r\n    <Form noValidate validated={validated} className=\"col-5 trans-form\" onSubmit={handleSubmit}>\r\n      <Form.Group>\r\n        <Form.Control\r\n          type=\"text\"\r\n          defaultValue={JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey || \"\"}\r\n          disabled={true}\r\n        />\r\n        <Form.Text className=\"text-muted\">\r\n          Your public key → used to verify transaction was signed using your private key\r\n        </Form.Text>\r\n        <h3 className=\"my-0 text-center\">↓</h3>\r\n        <Form.Control type=\"text\" placeholder=\"Receiver's public key\" pattern=\"[A-Za-z0-9]{182,182}\" required />\r\n        <Form.Control.Feedback type=\"invalid\">Must be of the same format as your public key</Form.Control.Feedback>\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <InputGroup className=\"mb-2\">\r\n          <Form.Control\r\n            type=\"number\"\r\n            placeholder=\"1.00\"\r\n            onBlur={(e: React.ChangeEvent<HTMLInputElement>) => checkAmount(e)}\r\n            required\r\n          />\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>LC</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <Form.Control as=\"textarea\" rows={2} placeholder=\"optional message...\" />\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <Form.Control\r\n          type=\"text\"\r\n          defaultValue={JSON.parse(localStorage.getItem(\"user\") as string)?.privateKey || \"\"}\r\n          disabled={true}\r\n        />\r\n        <Form.Text className=\"text-muted\">Your private key → not shared with anyone, keep this secret!</Form.Text>\r\n      </Form.Group>\r\n\r\n      <Button\r\n        variant=\"primary\"\r\n        type=\"submit\"\r\n        disabled={!JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey || validated}\r\n        block\r\n      >\r\n        <b>Sign</b>\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n","import React, { useState, useRef, useContext } from \"react\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState, ITransaction } from \"../../typings/AppTypes\";\r\nimport { digestMessage } from \"../../utils/conversion\";\r\n\r\nimport SendUI from \"./SendUI\";\r\nimport SignUI from \"./SignUI\";\r\nimport \"./Transaction.css\";\r\n\r\nexport default function Transaction(): JSX.Element {\r\n  const { state } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const [validated, setValidated] = useState<boolean>(false);\r\n  const [signed, setSigned] = useState<boolean>(false);\r\n\r\n  const formDetails = useRef<ITransaction>({\r\n    to: \"\",\r\n    from: JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey ?? \"\",\r\n    amount: undefined,\r\n    message: \"\",\r\n    signature: \"\",\r\n  });\r\n\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const form = e.currentTarget;\r\n    setValidated(true);\r\n\r\n    if (form.checkValidity() && !signed) {\r\n      // haven't signed the transaction yet\r\n      const formInputs = { ...form };\r\n      const formValues = Object.values(formInputs)\r\n        .slice(1, 4)\r\n        .map((input) => input.value);\r\n\r\n      formDetails.current.to = formValues[0];\r\n      formDetails.current.amount = formValues[1];\r\n      formDetails.current.message = formValues[2];\r\n      formDetails.current.signature = await digestMessage(JSON.stringify(formDetails.current));\r\n\r\n      setSigned(true);\r\n    } else if (form.checkValidity()) {\r\n      // signed the transaction and need to send now\r\n      localStorage.setItem(\"transactions\", JSON.stringify([...state.verifiedTrans, formDetails.current]));\r\n      setSigned(false);\r\n      setValidated(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid d-flex justify-content-center row mb-2\">\r\n      <SignUI validated={validated} handleSubmit={handleSubmit} />\r\n      <SendUI\r\n        validated={validated}\r\n        setValidated={setValidated}\r\n        setSigned={setSigned}\r\n        handleSubmit={handleSubmit}\r\n        details={formDetails.current}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState, IUser } from \"../../typings/AppTypes\";\r\nimport { copyKey } from \"../../utils/copyInput\";\r\n\r\nimport \"./User.css\";\r\n\r\nexport default function UserItems(): JSX.Element {\r\n  const { state } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n  const [copied, setCopied] = useState<boolean[]>([false]);\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h3>\r\n          <b>Users:</b>\r\n        </h3>\r\n        <div id=\"list-background\">\r\n          {state.users?.map((user: IUser) => {\r\n            return (\r\n              <Form className=\"item\" key={Math.random()}>\r\n                <Form.Group>\r\n                  <Form.Label>\r\n                    <h5 className={copied ? \"my-0\" : \"mt-1\"}>Public Key:</h5>\r\n                  </Form.Label>\r\n                  <Form.Control\r\n                    type=\"text\"\r\n                    className=\"text-truncate\"\r\n                    onFocus={(e: React.FocusEvent<HTMLInputElement>) => copyKey(e, setCopied)}\r\n                    defaultValue={user.publicKey}\r\n                    isValid={copied[0]}\r\n                  />\r\n                  <Form.Control.Feedback type=\"valid\">Copied to clipboard</Form.Control.Feedback>\r\n                </Form.Group>\r\n\r\n                <Form.Group>\r\n                  <Form.Label>\r\n                    <h5 className=\"my-0\">Balance:</h5>\r\n                  </Form.Label>\r\n                  <p>{user.balance.toFixed(2)} LC</p>\r\n                </Form.Group>\r\n              </Form>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport NavMenu from \"../components/NavMenu/NavMenu\";\r\nimport KeyGeneration from \"../components/User/KeyGeneration\";\r\nimport Transaction from \"../components/Transaction/Transaction\";\r\nimport UserItems from \"../components/User/UserItems\";\r\n\r\nexport default function Wallet(): JSX.Element {\r\n  return (\r\n    <div className=\"container-fluid my-3\">\r\n      <NavMenu />\r\n      <KeyGeneration />\r\n      <Transaction />\r\n      <UserItems />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useRef, useContext } from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\n// import { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { IAction, IState } from \"../../typings/AppTypes\";\r\n\r\ninterface IStats {\r\n  setShowBtn: (arg: boolean) => void;\r\n  setIsValid: (arg: boolean) => void;\r\n  setSolution: (arg: string) => void;\r\n  solution: string;\r\n  isValid: boolean;\r\n  chain: boolean;\r\n  index?: number;\r\n}\r\n\r\nexport default function Statistics(props: IStats): JSX.Element {\r\n  const { state } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const origNonce = useRef<number>();\r\n  const mineBtn = useRef<HTMLButtonElement>(null);\r\n  // const [nonce, setNonce] = useState<number>();\r\n  // const [target, setTarget] = useState<string>();\r\n\r\n  async function handleMine() {\r\n    console.log(\"Here\");\r\n    // props.setShowBtn(true);\r\n    // props.setIsValid(false);\r\n\r\n    // let solutionHash = \"\";\r\n\r\n    // // make target\r\n    // origNonce.current = Math.round(Math.random() * 1e6);\r\n    // const numZeros = Math.round(Math.random()) + 2;\r\n    // const targetHash = await Chain.instance.createTarget(numZeros);\r\n    // setTarget(targetHash);\r\n\r\n    // // mine\r\n    // if (mineBtn.current) {\r\n    //   mineBtn.current.disabled = true;\r\n    //   solutionHash = await Chain.instance.mine(origNonce.current, numZeros, setNonce, props.setSolution);\r\n    //   mineBtn.current.disabled = false;\r\n    // }\r\n\r\n    // if (solutionHash <= targetHash) {\r\n    //   if (props.index) {\r\n    //     Chain.instance.blockChain[props.index].currHash = solutionHash;\r\n    //     localStorage.setItem(\"chain\", JSON.stringify(Chain.instance.blockChain));\r\n    //   }\r\n\r\n    //   dispatch({ type: ACTIONS.UPDATE_VERIFIED_TRANS });\r\n\r\n    //   Chain.instance.updateBlocksInChain(Chain.instance.blockChain);\r\n    //   props.setIsValid(true);\r\n    // }\r\n  }\r\n\r\n  return (\r\n    <div className={props.chain ? \"bordered-background\" : \"col-6 mx-3\"}>\r\n      <Form.Group>\r\n        <Form.Label>\r\n          <h5 className=\"my-0\">Nonce:</h5>\r\n        </Form.Label>\r\n        <Form.Control type=\"number\" defaultValue={origNonce.current} disabled={true} />\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <Form.Label>\r\n          <h5 className=\"my-0\">Block Header (Current):</h5>\r\n        </Form.Label>\r\n        <Form.Control type=\"number\" disabled={true} />\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <Form.Label>\r\n          <h5 className=\"my-0\">Target:</h5>\r\n        </Form.Label>\r\n        <Form.Control type=\"text\" disabled={true} />\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <Form.Label>\r\n          <h5 className=\"my-0\">Solution:</h5>\r\n        </Form.Label>\r\n        <Form.Control\r\n          type=\"text\"\r\n          style={props.isValid ? { color: \"green\" } : { color: \"red\" }}\r\n          defaultValue={props.solution}\r\n          disabled={true}\r\n        />\r\n      </Form.Group>\r\n\r\n      <Button\r\n        variant=\"primary\"\r\n        className=\"btn-block d-block mt-3\"\r\n        disabled={props.isValid || state.selectedTrans.length === 0}\r\n        onClick={() => handleMine()}\r\n        ref={mineBtn}\r\n      >\r\n        <h4 className=\"m-0\">Mine</h4>\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\n\r\nimport Statistics from \"./Statistics\";\r\nimport { IBlock } from \"../../typings/AppTypes\";\r\n\r\nimport \"./Block.css\";\r\n\r\nexport default function Block({\r\n  details,\r\n  startValid,\r\n}: // setBlockchain,\r\n{\r\n  startValid: boolean;\r\n  details?: IBlock;\r\n  // setBlockchain?: (arg: Block[]) => void;\r\n}): JSX.Element {\r\n  const [solution, setSolution] = useState<string>(\"\");\r\n  const [isValid, setIsValid] = useState<boolean>(startValid);\r\n  const [showBtn, setShowBtn] = useState<boolean>(true);\r\n  const [timestamp, setTimestamp] = useState<number>(details?.timestamp ?? Date.now());\r\n\r\n  useEffect(() => {\r\n    setTimestamp(Date.now());\r\n  }, [solution]);\r\n\r\n  function handleAddBlock() {\r\n    // Chain.instance.addBlock(solution, []);\r\n    setShowBtn(false);\r\n  }\r\n\r\n  async function handleTransactionInfoChange(e: React.ChangeEvent<HTMLInputElement>) {\r\n    console.log(e.target.value);\r\n    // if (details) {\r\n    //   const og_hash = Chain.instance.blockChain[details.index].currHash;\r\n\r\n    //   const hash = await Chain.instance.digestMessage(\r\n    //     Chain.instance.blockChain[details.index].prevHash + e.target.value\r\n    //   );\r\n    //   Chain.instance.blockChain[details.index].currHash = hash;\r\n\r\n    //   // !TODO will need to update the transactions field once it is complete (merkle root string)\r\n    //   // Chain.instance.blockChain[details.index].transactions = [e.target.value];\r\n\r\n    //   // persist new blockchain\r\n    //   localStorage.setItem(\"chain\", JSON.stringify(Chain.instance.blockChain));\r\n\r\n    //   // re-render the new calculated hash\r\n    //   setSolution(hash);\r\n    //   setIsValid(hash === og_hash && hash.slice(0, 2) === \"00\");\r\n    //   setBlockchain && setBlockchain(Chain.instance.blockChain);\r\n    // }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {!details && (\r\n        <Statistics\r\n          chain={false}\r\n          setShowBtn={setShowBtn}\r\n          solution={solution}\r\n          setSolution={setSolution}\r\n          isValid={isValid}\r\n          setIsValid={setIsValid}\r\n        />\r\n      )}\r\n\r\n      <div className={\"block \" + (details ? \"col-12 \" : \"\") + (isValid ? \"valid-block\" : \"invalid-block\")}>\r\n        <Form.Group>\r\n          <Form.Label>\r\n            <h5>Index:</h5>\r\n          </Form.Label>\r\n          <Form.Control type=\"number\" defaultValue={details?.index} disabled={true} />\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>\r\n            <h5>Timestamp:</h5>\r\n          </Form.Label>\r\n          <Form.Control type=\"number\" value={!details || solution ? timestamp : details.timestamp} disabled={true} />\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>\r\n            <h5>Previous Hash:</h5>\r\n          </Form.Label>\r\n          <Form.Control type=\"text\" defaultValue={details?.prevHash} disabled={true} />\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>\r\n            <h5>Current Hash:</h5>\r\n          </Form.Label>\r\n          <Form.Control type=\"text\" value={!details || solution ? solution : details.currHash} disabled={true} />\r\n        </Form.Group>\r\n        <Form.Group>\r\n          <Form.Label>\r\n            <h5>Merkle Root:</h5>\r\n          </Form.Label>\r\n          <Form.Control\r\n            type=\"text\"\r\n            value={details?.index === 0 ? \"\" : \"abc\"}\r\n            disabled={details && details.index === 0}\r\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) => handleTransactionInfoChange(e)}\r\n          />\r\n        </Form.Group>\r\n\r\n        {!details && isValid && showBtn && (\r\n          <Button variant=\"success\" block onClick={() => handleAddBlock()}>\r\n            <h3 className=\"my-0 font-weight-bold\">+</h3>\r\n          </Button>\r\n        )}\r\n\r\n        {details && (\r\n          <Statistics\r\n            chain={true}\r\n            index={details.index}\r\n            setShowBtn={setShowBtn}\r\n            solution={solution}\r\n            setSolution={setSolution}\r\n            isValid={isValid}\r\n            setIsValid={setIsValid}\r\n          />\r\n        )}\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Block from \"../Block/Block\";\r\nimport NavMenu from \"../NavMenu/NavMenu\";\r\n\r\nimport \"./Chain.css\";\r\n\r\nexport default function Chain(): JSX.Element {\r\n  return (\r\n    <div>\r\n      <NavMenu />\r\n      <div id=\"blockchain\">\r\n        {[].map((block) => {\r\n          return (\r\n            <div className=\"block-and-chain\" key={Math.random()}>\r\n              <Block details={block} startValid={false} />\r\n              <div className=\"chain\">🔗</div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { IAction, IState, ITransaction } from \"../../typings/AppTypes\";\r\nimport { copyKey } from \"../../utils/copyInput\";\r\n\r\nimport \"./Transaction.css\";\r\n\r\nexport default function TransactionLineUI(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n  const [copied, setCopied] = useState<boolean[]>([false]);\r\n\r\n  function selectTransaction(transaction: ITransaction): void {\r\n    let selectedTrans = (JSON.parse(localStorage.getItem(\"selectedTransactions\") as string) as ITransaction[]) || [];\r\n    const signatures = selectedTrans.map((x) => x.signature);\r\n\r\n    // if just selected - push onto stack, else remove it\r\n    // adjust backgrounds according to selection/deselection\r\n    if (!signatures.includes(transaction.signature)) {\r\n      selectedTrans.push(transaction);\r\n    } else {\r\n      selectedTrans = selectedTrans.filter((x) => x.signature !== transaction.signature);\r\n    }\r\n\r\n    dispatch({ type: ACTIONS.UPDATE_SELECTED_TRANS, payload: { selectedTrans } });\r\n    localStorage.setItem(\"selectedTransactions\", JSON.stringify(selectedTrans));\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>\r\n        <b>Verified Transactions:</b>\r\n      </h3>\r\n      <div id=\"list-background\">\r\n        {state.verifiedTrans.map((transaction: ITransaction) => {\r\n          return (\r\n            <div\r\n              className={\r\n                \"trans-item \" +\r\n                (state.selectedTrans.map((x) => x.signature).includes(transaction.signature) ? \"selected\" : \"not-selected\") // prettier-ignore\r\n              }\r\n              onClick={() => selectTransaction(transaction)}\r\n              key={Math.random()}\r\n            >\r\n              <Form.Group className=\"mb-1 text-center\">\r\n                <Form.Control type=\"text\" className=\"text-truncate\" defaultValue={transaction.from} />\r\n                <h3 className=\"my-0\">↓</h3>\r\n                <Form.Control type=\"text\" className=\"text-truncate\" defaultValue={transaction.to} />\r\n              </Form.Group>\r\n\r\n              <Form.Group className=\"mb-1\">\r\n                <Form.Label>\r\n                  <h5 className=\"my-0\">Message:</h5>\r\n                </Form.Label>\r\n                <Form.Control as=\"textarea\" className=\"text-truncate\" defaultValue={transaction.message} />\r\n              </Form.Group>\r\n\r\n              <Form.Group className=\"mb-1\">\r\n                <Form.Label>\r\n                  <h5 className=\"my-0\">Amount:</h5>\r\n                </Form.Label>\r\n                <Form.Control type=\"number\" className=\"text-truncate\" defaultValue={transaction.amount} />\r\n              </Form.Group>\r\n\r\n              <Form.Group className=\"mb-1\">\r\n                <Form.Label>\r\n                  <h5 className=\"my-0\">Signature:</h5>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  className=\"text-truncate\"\r\n                  defaultValue={transaction.signature}\r\n                  onFocus={(e: React.FocusEvent<HTMLInputElement>) => copyKey(e, setCopied)}\r\n                  isValid={copied[0]}\r\n                />\r\n                <Form.Control.Feedback type=\"valid\">Copied to clipboard</Form.Control.Feedback>\r\n              </Form.Group>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport NavMenu from \"../components/NavMenu/NavMenu\";\r\nimport Block from \"../components/Block/Block\";\r\nimport TransactionItems from \"../components/Transaction/TransactionItems\";\r\n\r\nexport default function Mine(): JSX.Element {\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <NavMenu />\r\n      <TransactionItems />\r\n\r\n      <div className=\"row d-flex justify-content-center align-items-center my-2 container-fluid\">\r\n        <Block startValid={false} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { ACTIONS } from \"../enums/AppDispatchActions\";\r\nimport { IAction, IState, IUser, ITransaction } from \"../typings/AppTypes\";\r\n\r\nexport const AppReducer = (state: IState, action: IAction): IState => {\r\n  switch (action.type) {\r\n    case ACTIONS.UPDATE_VERIFIED_TRANS: {\r\n      const selectedTransSignatures = state.selectedTrans.map((x) => x.signature);\r\n      const verifiedTrans = state.verifiedTrans.filter((x) => !selectedTransSignatures.includes(x.signature));\r\n      return { ...state, verifiedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_SELECTED_TRANS: {\r\n      return { ...state, selectedTrans: (action.payload as { selectedTrans: ITransaction[] }).selectedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_USERS: {\r\n      return { ...state, users: (action.payload as { users: IUser[] }).users };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { useMemo, useReducer } from \"react\";\r\nimport { Route, BrowserRouter as Router, Redirect } from \"react-router-dom\";\r\n\r\nimport Wallet from \"../../pages/Wallet\";\r\nimport Chain from \"../Chain/Chain\";\r\nimport Mine from \"../../pages/Mine\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport { AppReducer } from \"../../reducers/AppReducer\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\n\r\nexport default function App(): JSX.Element {\r\n  const [state, dispatch] = useReducer(AppReducer, {\r\n    verifiedTrans: JSON.parse(localStorage.getItem(\"transactions\") as string) ?? [],\r\n    selectedTrans: JSON.parse(localStorage.getItem(\"selectedTransactions\") as string) ?? [],\r\n    users: JSON.parse(localStorage.getItem(\"users\") as string) ?? [],\r\n  });\r\n\r\n  // prevent re-rendering children when App re-renders\r\n  const value = useMemo(() => ({ state, dispatch }), [state, dispatch]);\r\n\r\n  return (\r\n    <Router basename={\"/LibraCoin\"}>\r\n      <AppContext.Provider value={value}>\r\n        <Route exact path=\"/\">\r\n          <Redirect to=\"/wallet\" />\r\n        </Route>\r\n        <Route path=\"/wallet\" component={Wallet} />\r\n        <Route path=\"/mine\" component={Mine} />\r\n        <Route path=\"/blockchain\" component={Chain} />\r\n      </AppContext.Provider>\r\n    </Router>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App/App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}