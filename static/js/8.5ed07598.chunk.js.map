{"version":3,"sources":["styles/UserStyles.tsx","utils/copyInput.ts","components/User/KeyGeneration.tsx","hooks/useAddUser.ts","schema/SignSchema.ts","utils/numberManipulation.ts","components/Transaction/Sign.tsx","hooks/useResetTransactionDetails.ts","components/Transaction/Send.tsx","components/User/UserItems.tsx","pages/Wallet.tsx","hooks/useAppContext.tsx","enums/ColorPallet.ts","utils/conversion.ts","styles/TransactionStyles.tsx"],"names":["UserKey","styled","InputGroup","UserItem","Form","COLORS","DEFAULT_BACKGROUND","RevealEyes","span","copyInput","target","assignName","dispatch","value","includes","blur","select","document","execCommand","type","ACTIONS","ASSIGN_COPIED","payload","copied","removeCopied","KeyGeneration","useAppContext","state","numRows","useRef","useState","show","setShow","userSK","users","useEffect","a","window","crypto","subtle","generateKey","name","namedCurve","publicKey","privateKey","CryptoKeyToHex","publicKeyStr","privateKeyStr","newUser","balance","SET_MAIN_USER","user","UPDATE_USERS","addUser","useAddUser","className","Prepend","Control","as","rows","current","isValid","onFocus","e","onBlur","readOnly","Feedback","Array","length","fill","join","Append","onClick","minVal","min","undefined","decimalFormat","num","Number","Math","floor","toString","split","SignSchema","lenPK","yup","shape","to","obj","diff","max","matches","RegExp","required","amount","test","x","replace","msg","optional","Sign","userPK","SET_VALIDATED","validated","SET_SIGNED","signed","sent","SET_DETAILS","details","from","signature","useResetTransactionDetails","TextAreaFormControl","props","validationSchema","onSubmit","data","setSubmitting","message","Object","values","reduce","total","curr","digestMessage","currentDetails","initialValues","handleSubmit","isSubmitting","touched","errors","noValidate","Text","wallet","isInvalid","render","errorMessage","role","step","placeholder","toFixed","Button","variant","disabled","block","Send","preventDefault","ADD_VERIFIED_TRANS","trans","UserItems","map","i","defaultValue","Wallet","Fragment","useContext","AppContext","bufferToHex","hashBuffer","Uint8Array","b","padStart","format","key","exportKey","buf","msgUint8","TextEncoder","encode","digest","randomHash","len","getRandomValues","Uint32Array","Transaction","margin","padding","borderRadius","border","css","TransList","div","TransItem","theme","selected","SELECTED_TRANS_BACKGROUND","SELECTED_TRANS_BORDER","TransForm","DARK_BACKGROUND"],"mappings":"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","file":"static/js/8.5ed07598.chunk.js","sourcesContent":["import { Form, InputGroup } from \"react-bootstrap\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { COLORS } from \"../enums/ColorPallet\";\r\n\r\nexport const UserKey = styled(InputGroup)`\r\n  margin: 0.25em 0.5em;\r\n  word-wrap: break-word;\r\n`;\r\n\r\nexport const UserItem = styled(Form)`\r\n  background-color: ${COLORS.DEFAULT_BACKGROUND};\r\n  margin: 1em 0.5em;\r\n  padding: 1em;\r\n  width: 14rem;\r\n`;\r\n\r\nexport const RevealEyes = styled.span`\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { ACTIONS } from \"../enums/AppDispatchActions\";\r\nimport { IAction } from \"../typings/AppTypes\";\r\n\r\nexport function copyInput(\r\n  target: HTMLTextAreaElement | HTMLInputElement,\r\n  assignName: string,\r\n  dispatch: React.Dispatch<IAction>\r\n): void {\r\n  if (!target.value.includes(\"◦\")) {\r\n    target.select();\r\n    document.execCommand(\"copy\");\r\n    dispatch({ type: ACTIONS.ASSIGN_COPIED, payload: { copied: assignName } });\r\n  } else {\r\n    target.blur();\r\n  }\r\n}\r\n\r\nexport function removeCopied(dispatch: React.Dispatch<IAction>): void {\r\n  dispatch({ type: ACTIONS.ASSIGN_COPIED, payload: { copied: \"\" } });\r\n}\r\n","import React, { useRef, useState } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\n\r\nimport { useAddUser } from \"../../hooks/useAddUser\";\r\nimport { useAppContext } from \"../../hooks/useAppContext\";\r\nimport { StyledInputGroupText } from \"../../styles/GlobalStyles\";\r\nimport { RevealEyes, UserKey } from \"../../styles/UserStyles\";\r\nimport { copyInput, removeCopied } from \"../../utils/copyInput\";\r\n\r\nexport default function KeyGeneration(): JSX.Element {\r\n  const { state, dispatch } = useAppContext();\r\n\r\n  const numRows = useRef(3);\r\n  const [show, setShow] = useState<boolean>(false);\r\n\r\n  useAddUser(state.user.publicKey, state.users);\r\n\r\n  return (\r\n    <div className=\"container-fluid d-flex justify-content-center mx-auto row my-5\">\r\n      <UserKey className=\"col-12 col-lg-8\">\r\n        <InputGroup.Prepend>\r\n          <StyledInputGroupText>Public Key (PK)</StyledInputGroupText>\r\n        </InputGroup.Prepend>\r\n\r\n        <Form.Control\r\n          aria-label=\"publicKey\"\r\n          as=\"textarea\"\r\n          rows={numRows.current}\r\n          className=\"rounded-right\"\r\n          value={state.user.publicKey}\r\n          isValid={state.copied === \"walletPK\"}\r\n          onFocus={(e: React.FocusEvent<HTMLTextAreaElement>) => copyInput(e.target, \"walletPK\", dispatch)}\r\n          onBlur={() => removeCopied(dispatch)}\r\n          readOnly\r\n        />\r\n\r\n        <Form.Control.Feedback type=\"valid\">Copied to clipboard!</Form.Control.Feedback>\r\n      </UserKey>\r\n\r\n      <UserKey className=\"col-12 col-lg-8\">\r\n        <InputGroup.Prepend>\r\n          <StyledInputGroupText>Private Key (SK)</StyledInputGroupText>\r\n        </InputGroup.Prepend>\r\n\r\n        <Form.Control\r\n          aria-label=\"privateKey\"\r\n          as=\"textarea\"\r\n          rows={numRows.current}\r\n          value={show ? state.user.privateKey : new Array(state.user.privateKey.length).fill(\"◦\").join(\"\")}\r\n          onFocus={(e: React.FocusEvent<HTMLTextAreaElement>) => copyInput(e.target, \"walletSK\", dispatch)}\r\n          onBlur={() => removeCopied(dispatch)}\r\n          isValid={state.copied === \"walletSK\"}\r\n          readOnly\r\n        />\r\n\r\n        <InputGroup.Append>\r\n          <StyledInputGroupText className=\"rounded-right\">\r\n            <RevealEyes onClick={() => setShow(!show)}>👀</RevealEyes>\r\n          </StyledInputGroupText>\r\n        </InputGroup.Append>\r\n\r\n        <Form.Control.Feedback type=\"valid\">Copied to clipboard!</Form.Control.Feedback>\r\n      </UserKey>\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useAppContext } from \"./useAppContext\";\r\nimport { ACTIONS } from \"../enums/AppDispatchActions\";\r\nimport { CryptoKeyToHex } from \"../utils/conversion\";\r\nimport { IUser } from \"../typings/AppTypes\";\r\n\r\nexport function useAddUser(userSK: string, users: IUser[]): void {\r\n  const { dispatch } = useAppContext();\r\n\r\n  useEffect(() => {\r\n    async function addUser(): Promise<void> {\r\n      if (userSK === \"\") {\r\n        const { publicKey, privateKey } = await window.crypto.subtle.generateKey(\r\n          { name: \"ECDSA\", namedCurve: \"P-256\" },\r\n          true,\r\n          [\"sign\", \"verify\"]\r\n        );\r\n\r\n        const publicKeyStr = await CryptoKeyToHex(\"spki\", publicKey as CryptoKey);\r\n        const privateKeyStr = await CryptoKeyToHex(\"pkcs8\", privateKey as CryptoKey);\r\n\r\n        const newUser = { publicKey: publicKeyStr, balance: \"1000.00\" };\r\n        dispatch({ type: ACTIONS.SET_MAIN_USER, payload: { user: { ...newUser, privateKey: privateKeyStr } } });\r\n        dispatch({ type: ACTIONS.UPDATE_USERS, payload: { users: [...users, newUser] } });\r\n      }\r\n    }\r\n\r\n    addUser();\r\n  }, [dispatch, userSK, users]);\r\n}\r\n","import * as yup from \"yup\";\r\nimport { StringSchema } from \"yup\";\r\nimport { RequiredNumberSchema } from \"yup/lib/number\";\r\nimport { RequiredStringSchema } from \"yup/lib/string\";\r\nimport { numberWithCommas } from \"../utils/numberManipulation\";\r\n\r\ntype reqStrSchema = RequiredStringSchema<string | undefined, Record<string, unknown>>;\r\ntype optStrSchema = StringSchema<string | undefined, Record<string, unknown>>;\r\ntype reqNumSchema = RequiredNumberSchema<number | undefined, Record<string, unknown>>;\r\n\r\ntype TSignSchema = {\r\n  to: reqStrSchema;\r\n  amount: reqNumSchema;\r\n  msg: optStrSchema;\r\n};\r\n\r\nconst minVal = (min: number, value?: number): boolean => (value === undefined ? true : value >= min);\r\nconst decimalFormat = (value?: number): boolean => {\r\n  const num = Number(value);\r\n  return Math.floor(num) === num || !value ? true : value.toString().split(\".\")[1].length <= 2;\r\n};\r\n\r\nexport const SignSchema = (lenPK: number, balance: number): yup.ObjectSchema<TSignSchema> => {\r\n  return yup.object().shape({\r\n    to: yup\r\n      .string()\r\n      .min(lenPK, (obj) => {\r\n        const diff = obj.min - obj.value.length;\r\n        return `Length is too short. Add ${diff} alphanumeric character${diff === 1 ? \"\" : \"s\"}`;\r\n      })\r\n      .max(lenPK, (obj) => {\r\n        const diff = obj.value.length - obj.max;\r\n        return `Length is too long. Remove ${diff} alphanumeric character${diff === 1 ? \"\" : \"s\"}`;\r\n      })\r\n      .matches(new RegExp(`[A-Za-z0-9]{${lenPK}}`), \"Format is invalid, characters must be alphanumeric\")\r\n      .required(\"Receiver Public Key is required!\"),\r\n    amount: yup\r\n      .number()\r\n      .test(\"negative\", \"Cannot be a negative value\", (value) => minVal(0, value))\r\n      .test(\"min\", \"Must be at least $0.10 LC\", (value) => minVal(0.1, value))\r\n      .test(\"format\", \"Allowed at most 2 decimal places\", decimalFormat)\r\n      .max(balance, `Must be at most $${numberWithCommas(balance)} LC`)\r\n      .required(\"Amount is required!\"),\r\n    msg: yup.string().optional()\r\n  });\r\n};\r\n","// https://stackoverflow.com/a/2901298/4298115\r\nexport function numberWithCommas(x: number): string {\r\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Formik, ErrorMessage, Field } from \"formik\";\r\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\r\n\r\nimport { useAppContext } from \"../../hooks/useAppContext\";\r\nimport { useResetTransactionDetails } from \"../../hooks/useResetTransactionDetails\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { SignSchema } from \"../../schema/SignSchema\";\r\nimport { digestMessage } from \"../../utils/conversion\";\r\nimport { TransForm } from \"../../styles/TransactionStyles\";\r\nimport { StyledInputGroupText } from \"../../styles/GlobalStyles\";\r\n\r\nexport default function Sign(): JSX.Element {\r\n  const { state, dispatch } = useAppContext();\r\n\r\n  useResetTransactionDetails(state.user.publicKey);\r\n\r\n  const TextAreaFormControl = (props: unknown): JSX.Element => {\r\n    return <Form.Control as=\"textarea\" {...props} />;\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      validationSchema={SignSchema(state.user.publicKey.length, state.user.balance)}\r\n      onSubmit={async (data, { setSubmitting }) => {\r\n        setSubmitting(true);\r\n        const message = Object.values(data).reduce((total, curr) => total + curr, \"\");\r\n        const currentDetails = { ...data, from: state.user.publicKey, signature: await digestMessage(message) };\r\n\r\n        dispatch({ type: ACTIONS.SET_SIGNED, payload: { signed: true } });\r\n        dispatch({ type: ACTIONS.SET_DETAILS, payload: { details: currentDetails } });\r\n        setSubmitting(false);\r\n      }}\r\n      initialValues={{ to: \"\", amount: \"\", msg: \"\" }}\r\n    >\r\n      {({ handleSubmit, isSubmitting, touched, errors }) => (\r\n        <TransForm aria-label=\"Sign Form\" noValidate className=\"col-12 col-lg-5\" onSubmit={handleSubmit}>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <StyledInputGroupText>Sender Public Key</StyledInputGroupText>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              aria-label=\"Sender Public Key\"\r\n              name=\"from\"\r\n              className=\"text-truncate rounded-right\"\r\n              type=\"text\"\r\n              value={state.user.publicKey}\r\n              readOnly\r\n            />\r\n          </InputGroup>\r\n\r\n          <Form.Text className=\"text-light\">Used to verify transaction was signed using your private key</Form.Text>\r\n\r\n          <InputGroup className=\"my-2\">\r\n            <InputGroup.Prepend>\r\n              <StyledInputGroupText>Receiver Public Key</StyledInputGroupText>\r\n            </InputGroup.Prepend>\r\n            <Field\r\n              as={Form.Control}\r\n              aria-label=\"Receiver PK\"\r\n              name=\"to\"\r\n              className=\"text-truncate rounded-right\"\r\n              type=\"text\"\r\n              required\r\n              readOnly={state.wallet.signed}\r\n              isInvalid={!!touched.to && !!errors.to}\r\n              isValid={!!touched.to && !errors.to}\r\n            />\r\n\r\n            <ErrorMessage\r\n              name=\"to\"\r\n              render={(errorMessage) => (\r\n                <Form.Control.Feedback\r\n                  className=\"font-weight-bold\"\r\n                  type=\"invalid\"\r\n                  role=\"alert\"\r\n                  aria-label=\"Receiver PK Feedback\"\r\n                >\r\n                  {errorMessage}\r\n                </Form.Control.Feedback>\r\n              )}\r\n            />\r\n          </InputGroup>\r\n\r\n          <InputGroup className=\"mb-2\">\r\n            <Field\r\n              as={Form.Control}\r\n              aria-label=\"Sign Amount\"\r\n              name=\"amount\"\r\n              type=\"number\"\r\n              step=\"any\"\r\n              placeholder={(1).toFixed(2)}\r\n              required\r\n              readOnly={state.wallet.signed}\r\n              isInvalid={!!touched.amount && !!errors.amount}\r\n              isValid={!!touched.amount && !errors.amount}\r\n            />\r\n\r\n            <InputGroup.Append>\r\n              <StyledInputGroupText className=\"rounded-right border-left-0\">LC</StyledInputGroupText>\r\n            </InputGroup.Append>\r\n\r\n            <ErrorMessage\r\n              name=\"amount\"\r\n              render={(errorMessage) => (\r\n                <Form.Control.Feedback\r\n                  className=\"font-weight-bold\"\r\n                  type=\"invalid\"\r\n                  role=\"alert\"\r\n                  aria-label=\"Amount Feedback\"\r\n                >\r\n                  {errorMessage}\r\n                </Form.Control.Feedback>\r\n              )}\r\n            />\r\n          </InputGroup>\r\n\r\n          <InputGroup className=\"mb-2\">\r\n            <InputGroup.Prepend>\r\n              <StyledInputGroupText>Message</StyledInputGroupText>\r\n            </InputGroup.Prepend>\r\n            <Field\r\n              as={TextAreaFormControl}\r\n              aria-label=\"Sign Message\"\r\n              name=\"msg\"\r\n              rows={2}\r\n              placeholder=\"optional message...\"\r\n              readOnly={state.wallet.signed}\r\n              isValid={!!touched.msg && !errors.msg}\r\n            />\r\n          </InputGroup>\r\n\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <StyledInputGroupText>Sender Private Key</StyledInputGroupText>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              aria-label=\"Sender Private Key\"\r\n              name=\"fromSK\"\r\n              className=\"text-truncate\"\r\n              type=\"text\"\r\n              value={state.user.privateKey}\r\n              readOnly\r\n            />\r\n          </InputGroup>\r\n\r\n          <Form.Text className=\"text-light\">Not shared with anyone, keep this secret!</Form.Text>\r\n\r\n          <Button\r\n            aria-label=\"Sign Button\"\r\n            className=\"mt-2\"\r\n            variant={state.wallet.signed ? \"success\" : \"primary\"}\r\n            type=\"submit\"\r\n            disabled={state.wallet.signed || isSubmitting}\r\n            block\r\n          >\r\n            <b>{state.wallet.signed ? \"Signed\" : \"Sign\"}</b>\r\n          </Button>\r\n        </TransForm>\r\n      )}\r\n    </Formik>\r\n  );\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { ACTIONS } from \"../enums/AppDispatchActions\";\r\nimport { useAppContext } from \"./useAppContext\";\r\n\r\nexport function useResetTransactionDetails(userPK: string): void {\r\n  const { dispatch } = useAppContext();\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: ACTIONS.SET_VALIDATED, payload: { validated: false } });\r\n    dispatch({ type: ACTIONS.SET_SIGNED, payload: { signed: false, sent: false } });\r\n    dispatch({\r\n      type: ACTIONS.SET_DETAILS,\r\n      payload: {\r\n        details: { from: userPK, to: \"\", amount: \"0.00\", msg: \"\", signature: \"\" }\r\n      }\r\n    });\r\n  }, [dispatch, userPK]);\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { useAppContext } from \"../../hooks/useAppContext\";\r\nimport { StyledInputGroupText } from \"../../styles/GlobalStyles\";\r\nimport { TransForm } from \"../../styles/TransactionStyles\";\r\n\r\nexport default function Send(): JSX.Element {\r\n  const { state, dispatch } = useAppContext();\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n\r\n    dispatch({ type: ACTIONS.SET_SIGNED, payload: { signed: false } });\r\n    dispatch({ type: ACTIONS.SET_VALIDATED, payload: { validated: false } });\r\n    dispatch({ type: ACTIONS.ADD_VERIFIED_TRANS, payload: { trans: state.wallet.details } });\r\n    dispatch({\r\n      type: ACTIONS.SET_DETAILS,\r\n      payload: { details: { from: \"\", to: \"\", amount: (0).toFixed(2), msg: \"\", signature: \"\" } }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <TransForm aria-label=\"Send Form\" noValidate className=\"col-12 col-lg-5 my-2 my-lg-0\" onSubmit={handleSubmit}>\r\n      <InputGroup>\r\n        <InputGroup.Prepend>\r\n          <StyledInputGroupText>Receiver Public Key</StyledInputGroupText>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Receiver PK\"\r\n          name=\"receiver-pk\"\r\n          className=\"text-truncate\"\r\n          type=\"text\"\r\n          value={state.wallet.details.to}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <Form.Text className=\"text-light\">Make sure this matches the value used when signing</Form.Text>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <Form.Control\r\n          aria-label=\"Send Amount\"\r\n          name=\"amount\"\r\n          type=\"number\"\r\n          value={state.wallet.details.amount}\r\n          readOnly\r\n        />\r\n        <InputGroup.Append>\r\n          <StyledInputGroupText className=\"rounded-right border-left-0\">LC</StyledInputGroupText>\r\n        </InputGroup.Append>\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"mb-2\">\r\n        <InputGroup.Prepend>\r\n          <StyledInputGroupText>Message</StyledInputGroupText>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Send Message\"\r\n          name=\"msg\"\r\n          as=\"textarea\"\r\n          value={state.wallet.details.msg}\r\n          rows={4}\r\n          placeholder=\"optional message...\"\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup>\r\n        <InputGroup.Prepend>\r\n          <StyledInputGroupText>Transaction Signature</StyledInputGroupText>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Transaction Signature\"\r\n          name=\"sig\"\r\n          type=\"text\"\r\n          className=\"text-truncate\"\r\n          value={state.wallet.details.signature}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <Form.Text className=\"text-light\">Receiver uses this along with your public key to verify transaction</Form.Text>\r\n\r\n      <Button\r\n        aria-label=\"Send Button\"\r\n        className=\"mt-2\"\r\n        variant={state.wallet.sent ? \"success\" : \"primary\"}\r\n        type=\"submit\"\r\n        disabled={!state.wallet.signed}\r\n        block\r\n      >\r\n        <b>{state.wallet.sent ? \"Sent\" : \"Send\"}</b>\r\n      </Button>\r\n    </TransForm>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { useAppContext } from \"../../hooks/useAppContext\";\r\nimport { StyledInputGroupText } from \"../../styles/GlobalStyles\";\r\nimport { UserItem } from \"../../styles/UserStyles\";\r\nimport { IUser } from \"../../typings/AppTypes\";\r\nimport { copyInput, removeCopied } from \"../../utils/copyInput\";\r\n\r\nexport default function UserItems(): JSX.Element {\r\n  const { state, dispatch } = useAppContext();\r\n\r\n  return (\r\n    <div className=\"container-fluid mb-2\">\r\n      <h3 className=\"font-weight-bold\">Users</h3>\r\n      <div className=\"row flex-nowrap overflow-auto bg-dark mx-1 px-2 rounded\">\r\n        {state.users.map((user: IUser, i: number) => {\r\n          return (\r\n            <UserItem className=\"rounded flex-shrink-0\" key={`user-${user.publicKey}`}>\r\n              <InputGroup>\r\n                <InputGroup.Prepend>\r\n                  <StyledInputGroupText>🔑</StyledInputGroupText>\r\n                </InputGroup.Prepend>\r\n                <Form.Control\r\n                  aria-label=\"User Public Key\"\r\n                  type=\"text\"\r\n                  className=\"text-truncate rounded-right\"\r\n                  onFocus={(e: React.FocusEvent<HTMLInputElement>) => copyInput(e.target, \"userItem-\" + i, dispatch)}\r\n                  onBlur={() => removeCopied(dispatch)}\r\n                  defaultValue={user.publicKey}\r\n                  isValid={state.copied === \"userItem-\" + i}\r\n                  readOnly\r\n                />\r\n                <Form.Control.Feedback type=\"valid\">Copied to clipboard</Form.Control.Feedback>\r\n              </InputGroup>\r\n\r\n              <InputGroup className=\"mt-2\">\r\n                <Form.Control aria-label=\"balance\" type=\"number\" defaultValue={user.balance} disabled />\r\n                <InputGroup.Append>\r\n                  <StyledInputGroupText>LC</StyledInputGroupText>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n            </UserItem>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport KeyGeneration from \"../components/User/KeyGeneration\";\r\nimport Sign from \"../components/Transaction/Sign\";\r\nimport Send from \"../components/Transaction/Send\";\r\nimport UserItems from \"../components/User/UserItems\";\r\n\r\nexport default function Wallet(): JSX.Element {\r\n  return (\r\n    <React.Fragment>\r\n      <KeyGeneration />\r\n\r\n      <div className=\"container-fluid d-flex justify-content-center mx-auto row my-4\">\r\n        <Sign />\r\n        <Send />\r\n      </div>\r\n\r\n      <UserItems />\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { AppContext } from \"../context/AppContext\";\r\nimport { IAction, IState } from \"../typings/AppTypes\";\r\n\r\ninterface IAppContext {\r\n  state: IState;\r\n  dispatch: React.Dispatch<IAction>;\r\n}\r\n\r\nexport function useAppContext(): IAppContext {\r\n  const { state, dispatch } = useContext(AppContext) as IAppContext;\r\n  return { state, dispatch };\r\n}\r\n","export enum COLORS {\r\n  DEFAULT_BACKGROUND = \"#fff\",\r\n\r\n  DARK_BACKGROUND = \"#1f1f1f\",\r\n\r\n  VALID_BACKGROUND = \"#b4ff9a\",\r\n  INVALID_BACKGROUND = \"#ff9a9a\",\r\n  VALID_SOLUTION = \"#008000\",\r\n  INVALID_SOLUTION = \"#f00\",\r\n\r\n  NAVBAR_BACKGROUND = \"#eee\",\r\n  NAV_LINK_UNDERSCORE = \"#8ac0ff\",\r\n  NAV_TEXT = \"#000\",\r\n\r\n  SELECTED_TRANS_BACKGROUND = \"#dfd\",\r\n  SELECTED_TRANS_BORDER = \"#090\",\r\n\r\n  ROOT_CELL = \"#4f9249\",\r\n  MIDDLE_CELLS = \"#cf8b31\",\r\n  DATA_CELLS = \"#7d95ff\",\r\n  PREVIEW_LINES = \"#777\"\r\n}\r\n","import { TextEncoder } from \"text-encoding\";\r\n\r\nexport function bufferToHex(hashBuffer: ArrayBuffer): string {\r\n  const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\r\n  const hashHex = hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\"); // convert bytes to hex string\r\n  return hashHex;\r\n}\r\n\r\nexport async function CryptoKeyToHex(format: string, key: CryptoKey): Promise<string> {\r\n  const buf = (await window.crypto.subtle.exportKey(format, key)) as ArrayBuffer;\r\n  return bufferToHex(buf);\r\n}\r\n\r\nexport async function digestMessage(message: string): Promise<string> {\r\n  const msgUint8 = new TextEncoder().encode(message); // encode as (utf-8) Uint8Array\r\n  const hashBuffer = await window.crypto.subtle.digest(\"SHA-256\", msgUint8); // hash the message\r\n  return bufferToHex(hashBuffer);\r\n}\r\n\r\nexport function randomHash(len: number): string {\r\n  return bufferToHex(window.crypto.getRandomValues(new Uint32Array(len)));\r\n}\r\n","import { Form } from \"react-bootstrap\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nimport { COLORS } from \"../enums/ColorPallet\";\r\n\r\n// create a \"mixin\"\r\nconst Transaction = (margin: string, padding: string, borderRadius: string, border: string) => css`\r\n  margin: ${margin};\r\n  padding: ${padding};\r\n  border-radius: ${borderRadius};\r\n  border: ${border};\r\n`;\r\n\r\nexport const TransList = styled.div`\r\n  min-height: 18rem;\r\n`;\r\n\r\nexport const TransItem = styled(Form)`\r\n  ${Transaction(\"0.5rem\", \"0.5em\", \"5px\", \"2px solid transparent\")}; /* stylelint-disable-line */\r\n  min-width: 14rem;\r\n  background-color: ${(props) => (props.theme.selected ? COLORS.SELECTED_TRANS_BACKGROUND : COLORS.DEFAULT_BACKGROUND)};\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    border: 2px solid ${COLORS.SELECTED_TRANS_BORDER};\r\n  }\r\n`;\r\n\r\nexport const TransForm = styled(Form)`\r\n  ${Transaction(\"0 1rem\", \"1em\", \"6px\", \"1px solid black\")}; /* stylelint-disable-line */\r\n  background-color: ${COLORS.DARK_BACKGROUND};\r\n`;\r\n"],"sourceRoot":""}