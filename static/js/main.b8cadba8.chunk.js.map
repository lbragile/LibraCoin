{"version":3,"sources":["components/Navbar/NavbarUI.tsx","components/Transaction/SendUI.tsx","components/Transaction/SignUI.tsx","components/Transaction/TransactionUI.tsx","components/BoxItemLineUI/BoxItemLineUI.tsx","components/Block/block_class.ts","components/Transaction/transaction_class.ts","components/Chain/chain_class.ts","components/Wallet/Wallet_class.ts","components/Wallet/WalletUI.tsx","components/Block/BlockUI.tsx","components/Chain/ChainUI.tsx","components/Mine/MineUI.tsx","components/App/App.tsx","index.tsx"],"names":["NavbarUI","Navbar","bg","expand","className","Brand","href","src","alt","width","Toggle","aria-controls","Collapse","id","Nav","Link","active","location","includes","SendUI","props","Modal","show","validated","toString","centered","backdrop","onHide","setShow","setSigned","setValidated","animation","Header","closeButton","Body","Form","noValidate","onSubmit","handleSubmit","Group","controlId","Label","Control","type","defaultValue","details","to","disabled","InputGroup","amount","Prepend","Text","as","message","rows","Button","variant","block","SignUI","JSON","parse","localStorage","getItem","publicKey","pattern","required","Feedback","placeholder","onBlur","e","userBalance","balance","target","value","Math","min","max","toFixed","checkAmount","privateKey","TransactionUI","useState","signed","formDetails","useRef","from","preventDefault","form","currentTarget","checkValidity","formInputs","formValues","Object","values","slice","map","input","current","prevTrans","setItem","stringify","onClick","BoxItemLineUI","title","copied","setCopied","modalText","toLowerCase","index","boxDetail","i","showUserDetails","random","Title","onFocus","select","setSelectionRange","document","execCommand","copyPublicKey","isValid","signature","Block","prevHash","currHash","transactions","timestamp","Date","now","this","Transaction","Chain","genericCryptoKey","extractable","algorithm","name","usages","genesisTransaction","genesisPrevHash","Array","fill","join","genesisCurrHash","randomHash","replace","length","user","push","len","bufferToHex","window","crypto","getRandomValues","Uint32Array","a","msgUint8","TextEncoder","encode","subtle","digest","hashBuffer","nonce","leadingZeros","console","log","candidateSolution","Number","MAX_SAFE_INTEGER","digestMessage","substr","split","every","bit","transaction","data","stringToArrayBuffer","verify","hash","addBlock","numZeros","round","targetHash","re","RegExp","zerosStr","targetStr","mine","newHash","newBlock","lastBlock","str","buf","ArrayBuffer","bufView","Uint16Array","strLen","charCodeAt","Uint8Array","b","padStart","instance","Wallet","generateKey","namedCurve","keyPair","sign","verifyTransaction","alert","format","key","exportKey","WalletUI","users","setUsers","addUser","initialize","CryptoKeyToHex","publicKeyStr","privateKeyStr","innerText","newUsers","isPublic","ref","BlockUI","blockItem","ChainUI","MineUI","minedBlock","stats","solution","App","basename","exact","path","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b8cadba8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\n\r\nimport \"./Navbar.css\";\r\n\r\nexport default function NavbarUI(): JSX.Element {\r\n  return (\r\n    <Navbar bg=\"none\" expand=\"lg\" className=\"mb-3\">\r\n      <Navbar.Brand href=\"https://github.com/lbragile/LibraCoin\">\r\n        <img src=\"./assets/libracoin-logo-256.png\" alt=\"LibraCoin Logo\" width=\"64\" />\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n          <Nav.Link href=\"/LibraCoin/wallet\" active={location.href.includes(\"/wallet\")}>\r\n            Wallet\r\n          </Nav.Link>\r\n          <Nav.Link href=\"/LibraCoin/mine\" active={location.href.includes(\"/mine\")}>\r\n            Mine\r\n          </Nav.Link>\r\n          <Nav.Link href=\"/LibraCoin/blockchain\" active={location.href.includes(\"/blockchain\")}>\r\n            Blockchain\r\n          </Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Modal, Form, Button, InputGroup } from \"react-bootstrap\";\r\nimport { ISign } from \"./SignUI\";\r\n\r\ninterface ISend extends ISign {\r\n  details: { to: string; amount: number; message: string };\r\n  setSigned: (arg: boolean) => void;\r\n  setValidated: (arg: boolean) => void;\r\n}\r\n\r\nexport default function SendUI(props: ISend): JSX.Element {\r\n  return (\r\n    <div>\r\n      <Modal\r\n        show={props.show}\r\n        validated={props.validated.toString()}\r\n        centered\r\n        backdrop=\"static\"\r\n        onHide={() => {\r\n          props.setShow(false);\r\n          props.setSigned(false);\r\n          props.setValidated(false);\r\n        }}\r\n        animation={false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <h4>LibraCoin Transaction (Send)</h4>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form noValidate onSubmit={props.handleSubmit}>\r\n            <Form.Group controlId=\"SendTo\">\r\n              <Form.Label>\r\n                <b>To:</b>\r\n              </Form.Label>\r\n              <Form.Control type=\"text\" defaultValue={props.details.to} disabled={true} />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"SendAmount\">\r\n              <Form.Label>\r\n                <b>Amount:</b>\r\n              </Form.Label>\r\n              <InputGroup className=\"mb-2\">\r\n                <Form.Control type=\"text\" defaultValue={props.details.amount} disabled={true} />\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>LC</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n              </InputGroup>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"TransMessage\">\r\n              <Form.Label>\r\n                <b>Message:</b>\r\n              </Form.Label>\r\n              <Form.Control as=\"textarea\" defaultValue={props.details.message} rows={3} disabled={true} />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"SendSignature\">\r\n              <Form.Label>\r\n                <b>Signature:</b>\r\n              </Form.Label>\r\n              <Form.Control type=\"text\" defaultValue={\"axbcdhdsihfewimfdalrewiuf......\"} disabled={true} />\r\n              <Form.Text className=\"text-muted\">\r\n                Receiver uses this along with your public key to verify transaction.\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Button variant=\"primary\" type=\"submit\" block>\r\n              <b>Send</b>\r\n            </Button>\r\n          </Form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Modal, Form, Button, InputGroup } from \"react-bootstrap\";\r\n\r\nexport interface ISign {\r\n  show: boolean;\r\n  setShow: (arg: boolean) => void;\r\n  validated: boolean;\r\n  handleSubmit: (e: React.FormEvent<HTMLFormElement>) => void;\r\n}\r\n\r\nexport default function SignUI(props: ISign): JSX.Element {\r\n  function checkAmount(e: React.ChangeEvent<HTMLInputElement>): void {\r\n    const userBalance = JSON.parse(localStorage.getItem(\"user\") as string)?.balance || 1000;\r\n    e.target.value = Math.min(Math.max(0.1, +e.target.value), userBalance)\r\n      .toFixed(2)\r\n      .toString();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Modal show={props.show} centered backdrop=\"static\" onHide={() => props.setShow(false)} animation={false}>\r\n        <Modal.Header closeButton>\r\n          <h4>LibraCoin Transaction (Sign)</h4>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form noValidate validated={props.validated} onSubmit={props.handleSubmit}>\r\n            <Form.Group controlId=\"TransFrom\">\r\n              <Form.Label>\r\n                <b>From:</b>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                defaultValue={JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey || \"\"}\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                Your public key → used to verify transaction was signed using your private key\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"TransTo\">\r\n              <Form.Label>\r\n                <b>To:</b>\r\n              </Form.Label>\r\n              <Form.Control type=\"text\" pattern=\"[A-Za-z0-9]{182,182}\" required />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                Must be of the same format as your public key\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"TransAmount\">\r\n              <Form.Label>\r\n                <b>Amount:</b>\r\n              </Form.Label>\r\n              <InputGroup className=\"mb-2\">\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"1.00\"\r\n                  onBlur={(e: React.ChangeEvent<HTMLInputElement>) => checkAmount(e)}\r\n                  required\r\n                />\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>LC</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n              </InputGroup>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"TransMessage\">\r\n              <Form.Label>\r\n                <b>Message:</b>\r\n              </Form.Label>\r\n              <Form.Control as=\"textarea\" placeholder=\"optional message...\" rows={3} />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"TransPrivate\">\r\n              <Form.Label>\r\n                <b>Private Key:</b>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                defaultValue={JSON.parse(localStorage.getItem(\"user\") as string)?.privateKey || \"\"}\r\n                required\r\n              />\r\n              <Form.Text className=\"text-muted\">This is not shared with anyone, keep this secret!</Form.Text>\r\n            </Form.Group>\r\n\r\n            <Button variant=\"primary\" type=\"submit\" block>\r\n              <b>Sign</b>\r\n            </Button>\r\n          </Form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useRef } from \"react\";\r\n\r\nimport SendUI from \"./SendUI\";\r\nimport SignUI from \"./SignUI\";\r\n\r\nexport default function TransactionUI(): JSX.Element {\r\n  const [show, setShow] = useState<boolean>(false);\r\n  const [validated, setValidated] = useState<boolean>(false);\r\n  const [signed, setSigned] = useState<boolean>(false);\r\n\r\n  const formDetails = useRef<{ to: string; from: string; amount: number; message: string }>({\r\n    to: \"\",\r\n    from: JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey ?? \"\",\r\n    amount: 0,\r\n    message: \"\",\r\n  });\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const form = e.currentTarget;\r\n    setValidated(true);\r\n\r\n    if (form.checkValidity() && !signed) {\r\n      // haven't signed the transaction yet\r\n      const formInputs = { ...form };\r\n      const formValues = Object.values(formInputs)\r\n        .slice(1, 4)\r\n        .map((input) => input.value);\r\n\r\n      formDetails.current.to = formValues[0];\r\n      formDetails.current.amount = +formValues[1];\r\n      formDetails.current.message = formValues[2];\r\n\r\n      setSigned(true);\r\n    } else if (form.checkValidity()) {\r\n      // signed the transaction and need to send now\r\n      const prevTrans = JSON.parse(localStorage.getItem(\"transactions\") as string) || [];\r\n      localStorage.setItem(\"transactions\", JSON.stringify([...prevTrans, formDetails.current]));\r\n      setShow(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button className=\"font-weight-bold btn btn-info p-3 my-5\" onClick={() => setShow(true)}>\r\n        Make Transaction\r\n      </button>\r\n      {!signed ? (\r\n        <SignUI show={show} setShow={setShow} validated={validated} handleSubmit={handleSubmit} />\r\n      ) : (\r\n        <SendUI\r\n          show={show}\r\n          setShow={setShow}\r\n          validated={validated}\r\n          setValidated={setValidated}\r\n          setSigned={setSigned}\r\n          handleSubmit={handleSubmit}\r\n          details={formDetails.current}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useRef } from \"react\";\r\nimport { Form, Modal } from \"react-bootstrap\";\r\n\r\nimport \"./BoxItemLineUI.css\";\r\n\r\ninterface IUser {\r\n  publicKey: string;\r\n  balance: number;\r\n  index?: number;\r\n}\r\n\r\ninterface ITransaction {\r\n  to: string;\r\n  from: string;\r\n  amount: number;\r\n  message: string;\r\n  signature?: string;\r\n  index?: number;\r\n}\r\n\r\nexport default function BoxItemLineUI({\r\n  details,\r\n  title,\r\n}: {\r\n  details: IUser[] | ITransaction[];\r\n  title: string;\r\n}): JSX.Element {\r\n  const [show, setShow] = useState(false);\r\n  const [copied, setCopied] = useState(false);\r\n  const modalText = useRef<IUser | ITransaction>(\r\n    title.toLowerCase().includes(\"user\")\r\n      ? { index: 0, publicKey: \"\", balance: 0 }\r\n      : { index: 0, to: \"\", from: \"\", amount: 0, message: \"\" }\r\n  );\r\n\r\n  function showUserDetails(boxDetail: IUser | ITransaction, index: number): void {\r\n    modalText.current = { ...boxDetail, index };\r\n    setShow(true);\r\n  }\r\n\r\n  function copyPublicKey(e: React.FocusEvent<HTMLInputElement>): void {\r\n    e.target.select();\r\n    e.target.setSelectionRange(0, 99999);\r\n    document.execCommand(\"copy\");\r\n    setCopied(true);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h3>\r\n          <b>{title}:</b>\r\n        </h3>\r\n        <div id=\"user-list-background\">\r\n          {details?.map((boxDetail: IUser | ITransaction, i: number) => {\r\n            return (\r\n              <div className=\"user-item ml-3 col-1\" onClick={() => showUserDetails(boxDetail, i)} key={Math.random()}>\r\n                <p className=\"user-item-index-text\">\r\n                  <b>{i}</b>\r\n                </p>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n\r\n      <Modal show={show} centered onHide={() => setShow(false)} animation={false}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>\r\n            {title} #{modalText.current.index} Details\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          {title.toLowerCase().includes(\"user\") ? (\r\n            <div>\r\n              <Form.Group>\r\n                <Form.Label>\r\n                  <h5>Public Key:</h5>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  className=\"text-truncate\"\r\n                  onFocus={(e: React.FocusEvent<HTMLInputElement>) => copyPublicKey(e)}\r\n                  defaultValue={(modalText.current as IUser).publicKey}\r\n                  isValid={copied}\r\n                />\r\n                <Form.Control.Feedback type=\"valid\">Copied to clipboard</Form.Control.Feedback>\r\n              </Form.Group>\r\n\r\n              <Form.Group>\r\n                <Form.Label>\r\n                  <h5>Balance:</h5>\r\n                </Form.Label>\r\n                <p>{(modalText.current as IUser).balance.toFixed(2)} LC</p>\r\n              </Form.Group>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <Form.Group>\r\n                <Form.Label>\r\n                  <h5>From:</h5>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  className=\"text-truncate\"\r\n                  defaultValue={(modalText.current as ITransaction).from}\r\n                />\r\n              </Form.Group>\r\n\r\n              <Form.Group>\r\n                <Form.Label>\r\n                  <h5>To:</h5>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  className=\"text-truncate\"\r\n                  defaultValue={(modalText.current as ITransaction).to}\r\n                />\r\n              </Form.Group>\r\n\r\n              <Form.Group>\r\n                <Form.Label>\r\n                  <h5>Message:</h5>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  as=\"textarea\"\r\n                  className=\"text-truncate\"\r\n                  defaultValue={(modalText.current as ITransaction).message}\r\n                />\r\n              </Form.Group>\r\n\r\n              <Form.Group>\r\n                <Form.Label>\r\n                  <h5>Amount:</h5>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  className=\"text-truncate\"\r\n                  defaultValue={(modalText.current as ITransaction).amount}\r\n                />\r\n              </Form.Group>\r\n\r\n              <Form.Group>\r\n                <Form.Label>\r\n                  <h5>Signature:</h5>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"number\"\r\n                  className=\"text-truncate\"\r\n                  defaultValue={(modalText.current as ITransaction).signature}\r\n                />\r\n              </Form.Group>\r\n            </div>\r\n          )}\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\n// for testing\r\n// users = [\r\n//   { publicKey: \"a\", balance: 0 },\r\n//   { publicKey: \"b\", balance: 1 },\r\n//   { publicKey: \"c\", balance: 2 },\r\n//   { publicKey: \"d\", balance: 3 },\r\n//   { publicKey: \"e\", balance: 4 },\r\n//   { publicKey: \"f\", balance: 5 },\r\n//   { publicKey: \"g\", balance: 6 },\r\n//   { publicKey: \"h\", balance: 7 },\r\n//   { publicKey: \"i\", balance: 8 },\r\n//   { publicKey: \"j\", balance: 9 },\r\n//   { publicKey: \"k\", balance: 10 },\r\n//   { publicKey: \"l\", balance: 11 },\r\n//   { publicKey: \"m\", balance: 12 },\r\n//   { publicKey: \"n\", balance: 13 },\r\n//   { publicKey: \"o\", balance: 14 },\r\n// ];\r\n","import { Transaction } from \"../Transaction/transaction_class\";\r\n\r\nexport class Block {\r\n  index: number;\r\n  prevHash: string;\r\n  currHash: string;\r\n  transactions: Transaction[];\r\n  timestamp = Date.now();\r\n\r\n  constructor(index: number, prevHash: string, currHash: string, transactions: Transaction[]) {\r\n    this.index = index;\r\n    this.prevHash = prevHash;\r\n    this.currHash = currHash;\r\n    this.transactions = transactions;\r\n  }\r\n}\r\n","export class Transaction {\r\n  amount: number;\r\n  from: CryptoKey;\r\n  to: CryptoKey;\r\n  message?: string;\r\n\r\n  constructor(amount: number, from: CryptoKey, to: CryptoKey, message?: string) {\r\n    this.amount = amount;\r\n    this.from = from;\r\n    this.to = to;\r\n    this.message = message;\r\n  }\r\n}\r\n","import { Block } from \"../Block/block_class\";\r\nimport { Transaction } from \"../Transaction/transaction_class\";\r\nimport { Wallet } from \"../Wallet/Wallet_class\";\r\n\r\nexport class Chain {\r\n  #chain: Block[];\r\n  #verifiedTransactions: Transaction[];\r\n  #BLOCK_LIMIT = 2;\r\n  #users: Wallet[];\r\n\r\n  static instance = new Chain();\r\n\r\n  static stringToArrayBuffer(str: string): ArrayBuffer {\r\n    const buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\r\n    const bufView = new Uint16Array(buf);\r\n    for (let i = 0, strLen = str.length; i < strLen; i++) {\r\n      bufView[i] = str.charCodeAt(i);\r\n    }\r\n    return buf;\r\n  }\r\n\r\n  static bufferToHex(hashBuffer: ArrayBuffer): string {\r\n    const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\r\n    const hashHex = hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\"); // convert bytes to hex string\r\n    return hashHex;\r\n  }\r\n\r\n  constructor() {\r\n    const genericCryptoKey = {\r\n      type: \"public\",\r\n      extractable: true,\r\n      algorithm: { name: \"ECDSA\" },\r\n      usages: [\"verify\"],\r\n    } as CryptoKey;\r\n\r\n    const genesisTransaction = [new Transaction(0, genericCryptoKey, genericCryptoKey)];\r\n    const genesisPrevHash = Array(64).fill(\"0\").join(\"\");\r\n    const genesisCurrHash = this.randomHash(32).replace(/^.{0,3}/, \"000\");\r\n    this.#chain = [new Block(0, genesisPrevHash, genesisCurrHash, genesisTransaction)];\r\n    this.#verifiedTransactions = [];\r\n    this.#users = [];\r\n  }\r\n\r\n  get blockChain(): Block[] {\r\n    return this.#chain;\r\n  }\r\n\r\n  get lastBlock(): Block {\r\n    return this.#chain[this.#chain.length - 1];\r\n  }\r\n\r\n  addUser(user: Wallet): void {\r\n    this.#users.push(user);\r\n  }\r\n\r\n  randomHash(len: number): string {\r\n    return Chain.bufferToHex(window.crypto.getRandomValues(new Uint32Array(len)));\r\n  }\r\n\r\n  async digestMessage(message: string): Promise<string> {\r\n    const msgUint8 = new TextEncoder().encode(message); // encode as (utf-8) Uint8Array\r\n    const hashBuffer = await window.crypto.subtle.digest(\"SHA-256\", msgUint8); // hash the message\r\n    return Chain.bufferToHex(hashBuffer);\r\n  }\r\n\r\n  async mine(nonce: number, leadingZeros: number): Promise<string> {\r\n    console.log(\"⚒ mining...\");\r\n\r\n    let candidateSolution = \"\";\r\n    while (nonce <= Number.MAX_SAFE_INTEGER) {\r\n      candidateSolution = await this.digestMessage(nonce.toString());\r\n\r\n      const leadingBits = candidateSolution.substr(0, leadingZeros).split(\"\");\r\n      if (leadingBits.every((bit) => bit === \"0\")) {\r\n        console.log(`Solved: ${nonce}`);\r\n        break;\r\n      }\r\n\r\n      nonce++;\r\n    }\r\n\r\n    return candidateSolution;\r\n  }\r\n\r\n  async verifyTransaction(transaction: Transaction, signature: ArrayBuffer): Promise<boolean> {\r\n    const data = Chain.stringToArrayBuffer(JSON.stringify(transaction));\r\n    const isValid = await crypto.subtle.verify({ name: \"ECDSA\", hash: \"SHA-256\" }, transaction.from, signature, data);\r\n\r\n    if (isValid) {\r\n      this.#verifiedTransactions.push(transaction);\r\n      console.log(\"✅ Verified Transaction!\");\r\n      console.log(`Transaction Pool Now Has ${this.#verifiedTransactions.length} Verified Transactions`);\r\n    }\r\n\r\n    if (this.#verifiedTransactions.length === this.#BLOCK_LIMIT) {\r\n      await this.addBlock(this.#verifiedTransactions);\r\n      this.#verifiedTransactions = []; // empty the verified transaction pool\r\n    }\r\n\r\n    return isValid;\r\n  }\r\n\r\n  async addBlock(transactions: Transaction[]): Promise<void> {\r\n    // new hash needs between 2 and 3 leading zeros\r\n    const numZeros = Math.round(Math.random() * 2) + 2;\r\n    const targetHash = await this.digestMessage(this.randomHash(20));\r\n\r\n    // replace leading bits with zeros\r\n    const re = new RegExp(`^.{0,${numZeros}}`, \"g\");\r\n    const zerosStr = Array(numZeros).fill(\"0\").join(\"\");\r\n    const targetStr = targetHash.replace(re, zerosStr);\r\n\r\n    // only add a block of transactions to the chain if it was mined successfully and the new hash is <= target\r\n    // eslint-disable-next-line no-constant-condition\r\n    while (true) {\r\n      const nonce = Math.round(Math.random() * 999999999);\r\n      const newHash = await this.mine(nonce, numZeros);\r\n\r\n      if (newHash <= targetStr) {\r\n        const newBlock = new Block(this.lastBlock.index + 1, this.lastBlock.currHash, newHash, transactions);\r\n        this.#chain.push(newBlock);\r\n        console.log(\"✨ Added Block To Chain\");\r\n        break;\r\n      } else {\r\n        console.log(\"❌ Failed Mining Below Target\");\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Chain } from \"../Chain/chain_class\";\r\nimport { Transaction } from \"../Transaction/transaction_class\";\r\n\r\nexport class Wallet {\r\n  publicKey: CryptoKey;\r\n  privateKey: CryptoKey;\r\n  balance: number;\r\n\r\n  constructor() {\r\n    this.publicKey = { type: \"public\", extractable: true, algorithm: { name: \"ECDSA\" }, usages: [\"verify\"] };\r\n    this.privateKey = { type: \"private\", extractable: true, algorithm: { name: \"ECDSA\" }, usages: [\"sign\"] };\r\n    this.balance = 1000;\r\n  }\r\n\r\n  async initialize(): Promise<void> {\r\n    const keyPair = await window.crypto.subtle.generateKey({ name: \"ECDSA\", namedCurve: \"P-256\" }, true, [\"sign\", \"verify\"]); // prettier-ignore\r\n    this.publicKey = keyPair.publicKey;\r\n    this.privateKey = keyPair.privateKey;\r\n  }\r\n\r\n  static async CryptoKeyToHex(format: string, key: CryptoKey): Promise<string> {\r\n    const buf = (await window.crypto.subtle.exportKey(format, key)) as ArrayBuffer;\r\n    return Chain.bufferToHex(buf);\r\n  }\r\n\r\n  getMessageEncoding(message: string): Uint8Array {\r\n    return new TextEncoder().encode(message);\r\n  }\r\n\r\n  async sendMoney(amount: number, to: CryptoKey, message?: string): Promise<void> {\r\n    if (amount <= this.balance) {\r\n      const transaction = new Transaction(amount, this.publicKey, to, message);\r\n      const data = Chain.stringToArrayBuffer(JSON.stringify(transaction));\r\n      const signature = await window.crypto.subtle.sign({ name: \"ECDSA\", hash: \"SHA-256\" }, this.privateKey, data);\r\n\r\n      const isValid = await Chain.instance.verifyTransaction(transaction, signature);\r\n\r\n      if (isValid) {\r\n        this.balance -= amount;\r\n      } else {\r\n        alert(\"Invalid transaction!\");\r\n      }\r\n    } else {\r\n      alert(\"Your balance is not high enough to cover this transaction.\");\r\n    }\r\n  }\r\n}\r\n","import React, { useRef, useState } from \"react\";\r\n\r\nimport { Button, Form } from \"react-bootstrap\";\r\n\r\nimport NavbarUI from \"../Navbar/NavbarUI\";\r\nimport TransactionUI from \"../Transaction/TransactionUI\";\r\nimport BoxItemLineUI from \"../BoxItemLineUI/BoxItemLineUI\";\r\nimport { Wallet } from \"../Wallet/Wallet_class\";\r\n\r\nimport \"./Wallet.css\";\r\n\r\nexport default function WalletUI(): JSX.Element {\r\n  const publicKey = useRef<HTMLTextAreaElement>(null);\r\n  const privateKey = useRef<HTMLTextAreaElement>(null);\r\n\r\n  const [copied, setCopied] = useState<boolean[]>([false, false]);\r\n  const [users, setUsers] = useState<{ publicKey: string; balance: number }[]>(\r\n    localStorage.getItem(\"users\") ? JSON.parse(localStorage.getItem(\"users\") as string) : []\r\n  );\r\n\r\n  const addUser = async () => {\r\n    const user = new Wallet();\r\n    await user.initialize();\r\n\r\n    const publicKeyStr = await Wallet.CryptoKeyToHex(\"spki\", user.publicKey);\r\n    const privateKeyStr = await Wallet.CryptoKeyToHex(\"pkcs8\", user.privateKey);\r\n    if (publicKey.current && privateKey.current) {\r\n      publicKey.current.innerText = publicKeyStr;\r\n      privateKey.current.innerText = new Array(privateKeyStr.length).fill(\"◦\").join(\"\");\r\n    }\r\n\r\n    const newUsers = [...users, { publicKey: publicKeyStr, balance: user.balance }];\r\n    localStorage.setItem(\"user\", JSON.stringify({ publicKey: publicKeyStr, privateKey: privateKeyStr, balance: user.balance })); // prettier-ignore\r\n    localStorage.setItem(\"users\", JSON.stringify(newUsers));\r\n    setUsers(newUsers);\r\n  };\r\n\r\n  function copyPublicKey(e: React.FocusEvent<HTMLTextAreaElement>, type: \"public\" | \"private\"): void {\r\n    e.target.select();\r\n    e.target.setSelectionRange(0, 99999);\r\n    document.execCommand(\"copy\");\r\n\r\n    const isPublic = type === \"public\";\r\n    setCopied([isPublic, !isPublic && !e.target.value.includes(\"◦\")]);\r\n  }\r\n\r\n  const togglePrivateKey = () => {\r\n    if (privateKey.current) {\r\n      if (privateKey.current.value.includes(\"◦\")) {\r\n        privateKey.current.value = JSON.parse(localStorage.getItem(\"user\") as string).privateKey;\r\n      } else {\r\n        privateKey.current.value = new Array(privateKey.current.value.length).fill(\"◦\").join(\"\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid my-3\">\r\n      <NavbarUI />\r\n\r\n      <div className=\"row\">\r\n        {!JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey ? (\r\n          <div className=\"col-2\">\r\n            <Button variant=\"primary\" className=\"p-3 font-weight-bold\" onClick={addUser}>\r\n              Create Wallet\r\n            </Button>\r\n          </div>\r\n        ) : (\r\n          <div className=\"col-1\"></div>\r\n        )}\r\n        <div className=\"col-5\">\r\n          <div className=\"user-key\">\r\n            <h3 className=\"mb-3\">Public Key:</h3>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              rows={7}\r\n              className=\"userKey\"\r\n              defaultValue={\r\n                localStorage.getItem(\"user\") && JSON.parse(localStorage.getItem(\"user\") as string).publicKey\r\n              }\r\n              isValid={copied[0]}\r\n              onFocus={(e: React.FocusEvent<HTMLTextAreaElement>) => copyPublicKey(e, \"public\")}\r\n              ref={publicKey}\r\n            />\r\n            <Form.Control.Feedback type=\"valid\">Copied to clipboard!</Form.Control.Feedback>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-5\">\r\n          <div className=\"user-key\">\r\n            <h3 className=\"mb-3\">\r\n              Private Key:{\" \"}\r\n              {JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey && (\r\n                <span id=\"private-reveal-eyes\" onClick={togglePrivateKey}>\r\n                  👀\r\n                </span>\r\n              )}\r\n            </h3>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              rows={7}\r\n              className=\"userKey\"\r\n              defaultValue={\r\n                localStorage.getItem(\"user\")\r\n                  ? new Array(JSON.parse(localStorage.getItem(\"user\") as string).privateKey.length).fill(\"◦\").join(\"\")\r\n                  : \"\"\r\n              }\r\n              onFocus={(e: React.FocusEvent<HTMLTextAreaElement>) => copyPublicKey(e, \"private\")}\r\n              isValid={copied[1]}\r\n              ref={privateKey}\r\n            />\r\n            <Form.Control.Feedback type=\"valid\">Copied to clipboard!</Form.Control.Feedback>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <TransactionUI />\r\n      <BoxItemLineUI details={users} title=\"Users\" />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useRef } from \"react\";\r\nimport { Transaction } from \"../Transaction/transaction_class\";\r\n\r\nimport { Modal, Form } from \"react-bootstrap\";\r\n\r\nimport \"./Block.css\";\r\nexport interface IBlock {\r\n  index: number;\r\n  prevHash: string;\r\n  currHash: string;\r\n  transactions: Transaction[];\r\n  timestamp: number;\r\n}\r\n\r\nexport default function BlockUI({ details }: { details: IBlock[] }): JSX.Element {\r\n  const [show, setShow] = useState<boolean>(false);\r\n  const blockItem = useRef<IBlock>({ index: 0, prevHash: \"\", currHash: \"\", transactions: [], timestamp: Date.now() });\r\n\r\n  return (\r\n    <div className=\"container-fluid mx-5 row\">\r\n      {details.map((block, i) => (\r\n        <div className=\"row block-and-chain my-2\" key={Math.random()}>\r\n          <div\r\n            className={\"block-background \" + (i > 2 ? \"invalid-block\" : \"valid-block\")}\r\n            onClick={() => {\r\n              blockItem.current = block;\r\n              setShow(true);\r\n            }}\r\n          >\r\n            <div className=\"block-counter\">{i}</div>\r\n          </div>\r\n          <div className=\"chain-link\">🔗</div>\r\n        </div>\r\n      ))}\r\n\r\n      <Modal show={show} centered onHide={() => setShow(false)} animation={false}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Block Details</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form>\r\n            <Form.Group controlId=\"index-indicator\">\r\n              <Form.Label>\r\n                <h5>Index:</h5>\r\n              </Form.Label>\r\n              <Form.Control type=\"number\" defaultValue={blockItem.current.index} />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"index-indicator\">\r\n              <Form.Label>\r\n                <h5>Timestamp:</h5>\r\n              </Form.Label>\r\n              <Form.Control type=\"number\" defaultValue={blockItem.current.timestamp} />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"prevHash-indicator\">\r\n              <Form.Label>\r\n                <h5>Previous Hash:</h5>\r\n              </Form.Label>\r\n              <Form.Control type=\"text\" defaultValue={blockItem.current.prevHash} />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"prevHash-indicator\">\r\n              <Form.Label>\r\n                <h5>Current Hash:</h5>\r\n              </Form.Label>\r\n              <Form.Control type=\"text\" defaultValue={blockItem.current.currHash} />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"prevHash-indicator\">\r\n              <Form.Label>\r\n                <h5>Merkle Root:</h5>\r\n              </Form.Label>\r\n              <Form.Control type=\"text\" defaultValue={JSON.stringify(blockItem.current.transactions)} />\r\n            </Form.Group>\r\n          </Form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport BlockUI from \"../Block/BlockUI\";\r\nimport NavbarUI from \"../Navbar/NavbarUI\";\r\n\r\nexport default function ChainUI(): JSX.Element {\r\n  return (\r\n    <div>\r\n      <NavbarUI />\r\n      <BlockUI\r\n        details={[\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n        ]}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useRef } from \"react\";\r\nimport NavbarUI from \"../Navbar/NavbarUI\";\r\nimport { IBlock } from \"../Block/BlockUI\";\r\n\r\nimport \"./Mine.css\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport BoxItemLineUI from \"../BoxItemLineUI/BoxItemLineUI\";\r\n\r\ninterface IStats {\r\n  nonce: number;\r\n  target: string;\r\n  solution: string;\r\n}\r\n\r\nexport default function MineUI(): JSX.Element {\r\n  const minedBlock = useRef<IBlock>({\r\n    index: 0,\r\n    timestamp: Date.now(),\r\n    prevHash: \"00000000000000000...\",\r\n    currHash: \"000absd234hdsf84h5...\",\r\n    transactions: [],\r\n  });\r\n\r\n  const stats = useRef<IStats>({ nonce: 654, target: \"000wld823nfwe3024rin...\", solution: \"000absd234hdsf84h5...\" });\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <NavbarUI />\r\n\r\n      <div id=\"verified-transaction\">\r\n        <BoxItemLineUI\r\n          details={JSON.parse(localStorage.getItem(\"transactions\") as string)}\r\n          title=\"Verified Transactions\"\r\n        />\r\n      </div>\r\n\r\n      <div className=\"row d-flex justify-content-center my-5 container-fluid\">\r\n        <div className=\"col-3\" id=\"mine-interactive-area\">\r\n          <div id=\"statistics\">\r\n            <p>\r\n              <b>Nonce:</b> {stats.current.nonce}\r\n            </p>\r\n            <p>\r\n              <b>Current:</b> {stats.current.nonce + 1}\r\n            </p>\r\n            <p>\r\n              <b>Target:</b> {stats.current.target}\r\n            </p>\r\n            <p>\r\n              <b>Solution:</b> {stats.current.solution}\r\n            </p>\r\n          </div>\r\n\r\n          <Button variant=\"primary\" className=\"btn-block d-block mt-3\" id=\"mine-add-block\">\r\n            Mine\r\n          </Button>\r\n        </div>\r\n\r\n        <div id=\"mined-block\" className=\"valid-block\">\r\n          <Button variant=\"success\" id=\"mine-add-block\">\r\n            +\r\n          </Button>\r\n          <p>\r\n            <b>Index:</b> {minedBlock.current.index}\r\n          </p>\r\n          <p>\r\n            <b>Timestamp:</b> {minedBlock.current.timestamp}\r\n          </p>\r\n          <p>\r\n            <b>Previous Hash:</b> {minedBlock.current.prevHash}\r\n          </p>\r\n          <p>\r\n            <b>Current Hash:</b> {minedBlock.current.currHash}\r\n          </p>\r\n          <p>\r\n            <b>Merkle Root:</b> {\"4h354kdnf380sdf234...\"}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Route, BrowserRouter as Router, Redirect } from \"react-router-dom\";\r\n\r\nimport WalletUI from \"../Wallet/WalletUI\";\r\nimport ChainUI from \"../Chain/ChainUI\";\r\nimport MineUI from \"../Mine/MineUI\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\n\r\nexport default function App(): JSX.Element {\r\n  return (\r\n    <Router basename={\"/LibraCoin\"}>\r\n      <Route exact path=\"/\">\r\n        <Redirect to=\"/wallet\" />\r\n      </Route>\r\n      <Route path=\"/wallet\" component={WalletUI} />\r\n      <Route path=\"/mine\" component={MineUI} />\r\n      <Route path=\"/blockchain\" component={ChainUI} />\r\n    </Router>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App/App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}