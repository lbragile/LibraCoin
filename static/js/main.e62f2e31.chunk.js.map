{"version":3,"sources":["components/NavMenu/NavMenu.tsx","enums/AppDispatchActions.ts","context/AppContext.ts","utils/copyInput.ts","utils/conversion.ts","components/User/KeyGeneration.tsx","components/Transaction/SendUI.tsx","components/Transaction/SignUI.tsx","components/Transaction/Transaction.tsx","components/User/UserItems.tsx","pages/Wallet.tsx","utils/mine.ts","components/Block/Statistics.tsx","components/Block/Block.tsx","components/Block/BlockChain.tsx","pages/Chain.tsx","components/Block/Tree.ts","utils/merkleTree.ts","reducers/AppReducer.ts","components/Block/PreviewBlock.tsx","components/Transaction/TransactionItems.tsx","pages/Mine.tsx","components/App/App.tsx","index.tsx"],"names":["NavMenu","Navbar","expand","className","Brand","href","src","alt","width","Toggle","aria-controls","Collapse","id","Nav","Link","active","location","includes","ACTIONS","AppContext","React","createContext","undefined","copyKey","e","setCopied","type","target","select","setSelectionRange","document","execCommand","isPublic","value","bufferToHex","hashBuffer","Array","from","Uint8Array","map","b","toString","padStart","join","digestMessage","message","a","msgUint8","TextEncoder","encode","window","crypto","subtle","digest","randomHash","len","getRandomValues","Uint32Array","KeyGeneration","useContext","state","dispatch","publicKeyRef","useRef","privateKeyRef","numRows","useState","copied","CryptoKeyToHex","format","key","exportKey","buf","generateKey","name","namedCurve","publicKey","privateKey","publicKeyStr","privateKeyStr","current","innerText","length","fill","localStorage","setItem","JSON","stringify","balance","newUsers","users","UPDATE_USERS","payload","parse","getItem","Button","variant","onClick","Form","Group","Label","Control","as","rows","defaultValue","isValid","onFocus","ref","Feedback","SendUI","props","noValidate","onSubmit","handleSubmit","details","to","disabled","Text","InputGroup","amount","Prepend","placeholder","signature","validated","block","SignUI","pattern","required","onBlur","userBalance","Math","min","max","toFixed","checkAmount","Transaction","setValidated","signed","setSigned","formDetails","preventDefault","form","currentTarget","checkValidity","formInputs","formValues","Object","values","slice","input","verifiedTrans","UserItems","user","random","Wallet","createTarget","numZeros","targetHash","re","RegExp","zerosStr","replace","nonce","setHeader","setTarget","setSolution","setIsValid","round","candidateSolution","header","Number","MAX_SAFE_INTEGER","substr","split","every","bit","Statistics","chain","solution","style","color","selectedTrans","mine","Block","Date","now","setTimestamp","useEffect","index","timestamp","prevHash","currHash","BlockChain","Chain","Node","children","parent","pos","this","x","y","node","position","Tree","canvas","innerWidth","getContext","height","isLeft","offset","clearRect","newNode","left","calculatePosition","right","queue","push","shift","rectWidth","beginPath","font","strokeStyle","fillStyle","fillRect","fillText","forEach","child","i","moveTo","lineTo","stroke","setMerkleTree","verifiedSignatures","trans","selectedSignatures","signatures","filter","sig","tree","hashArr","hash","AppReducer","action","UPDATE_VERIFIED_TRANS","filterVerifiedTrans","UPDATE_SELECTED_TRANS","ADD_BLOCK","selectedTransSignatures","PreviewBlock","nextIndex","prevBlockHash","treeCanvas","showBtn","setShowBtn","merkleTree","calculateMerkleTreeFormation","canvasTree","clear","flatTree","concat","reverse","flattenTree","addNode","drawTree","drawTreeDiagramOnCanvas","transactions","handleAddBlock","TransactionLineUI","transaction","included","alert","selectTransaction","Append","Mine","App","useReducer","useMemo","basename","Provider","exact","path","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e62f2e31.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\n\r\nimport \"./NavMenu.css\";\r\n\r\nexport default function NavMenu(): JSX.Element {\r\n  return (\r\n    <Navbar expand=\"lg\" className=\"mb-3\">\r\n      <Navbar.Brand href=\"https://github.com/lbragile/LibraCoin\">\r\n        <img src=\"./assets/libracoin-logo-256.png\" alt=\"LibraCoin Logo\" width=\"64\" />\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"ml-auto\">\r\n          <Nav.Link href=\"/LibraCoin/wallet\" active={location.href.includes(\"/wallet\")}>\r\n            Wallet\r\n          </Nav.Link>\r\n          <Nav.Link href=\"/LibraCoin/mine\" active={location.href.includes(\"/mine\")}>\r\n            Mine\r\n          </Nav.Link>\r\n          <Nav.Link href=\"/LibraCoin/blockchain\" active={location.href.includes(\"/blockchain\")}>\r\n            Blockchain\r\n          </Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\n","export enum ACTIONS {\r\n  ADD_VERIFIED_TRANS,\r\n  UPDATE_VERIFIED_TRANS,\r\n  UPDATE_SELECTED_TRANS,\r\n  UPDATE_USERS,\r\n  ADD_BLOCK,\r\n}\r\n","import React from \"react\";\r\nimport { IAction, IState } from \"../typings/AppTypes\";\r\n\r\ntype TAppContext = { state: IState; dispatch: React.Dispatch<IAction> } | undefined;\r\n\r\nexport const AppContext = React.createContext<TAppContext>(undefined);\r\n","export function copyKey(\r\n  e: React.FocusEvent<HTMLTextAreaElement | HTMLInputElement>,\r\n  setCopied: (arg: boolean[]) => void,\r\n  type?: \"public\" | \"private\"\r\n): void {\r\n  e.target.select();\r\n  e.target.setSelectionRange(0, 1e6);\r\n  document.execCommand(\"copy\");\r\n\r\n  // wallet page, copying keys\r\n  if (type) {\r\n    const isPublic = type === \"public\";\r\n    setCopied([isPublic, !isPublic && !e.target.value.includes(\"◦\")]);\r\n  } else {\r\n    setCopied([true]);\r\n  }\r\n}\r\n","export function bufferToHex(hashBuffer: ArrayBuffer): string {\r\n  const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\r\n  const hashHex = hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\"); // convert bytes to hex string\r\n  return hashHex;\r\n}\r\n\r\nexport async function digestMessage(message: string): Promise<string> {\r\n  const msgUint8 = new TextEncoder().encode(message); // encode as (utf-8) Uint8Array\r\n  const hashBuffer = await window.crypto.subtle.digest(\"SHA-256\", msgUint8); // hash the message\r\n  return bufferToHex(hashBuffer);\r\n}\r\n\r\nexport function randomHash(len: number): string {\r\n  return bufferToHex(window.crypto.getRandomValues(new Uint32Array(len)));\r\n}\r\n","import React, { useRef, useState, useContext } from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\";\r\n\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState } from \"../../typings/AppTypes\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { copyKey } from \"../../utils/copyInput\";\r\nimport { bufferToHex } from \"../../utils/conversion\";\r\n\r\nimport \"./User.css\";\r\n\r\nexport default function KeyGeneration(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const publicKeyRef = useRef<HTMLTextAreaElement>(null);\r\n  const privateKeyRef = useRef<HTMLTextAreaElement>(null);\r\n\r\n  const numRows = useRef(3);\r\n\r\n  const [copied, setCopied] = useState<boolean[]>([false, false]);\r\n\r\n  async function CryptoKeyToHex(format: string, key: CryptoKey): Promise<string> {\r\n    const buf = (await window.crypto.subtle.exportKey(format, key)) as ArrayBuffer;\r\n    return bufferToHex(buf);\r\n  }\r\n\r\n  async function addUser(): Promise<void> {\r\n    const { publicKey, privateKey } = await window.crypto.subtle.generateKey(\r\n      { name: \"ECDSA\", namedCurve: \"P-256\" },\r\n      true,\r\n      [\"sign\", \"verify\"]\r\n    );\r\n\r\n    const publicKeyStr = await CryptoKeyToHex(\"spki\", publicKey as CryptoKey);\r\n    const privateKeyStr = await CryptoKeyToHex(\"pkcs8\", privateKey as CryptoKey);\r\n    if (publicKeyRef.current && privateKeyRef.current) {\r\n      publicKeyRef.current.innerText = publicKeyStr;\r\n      privateKeyRef.current.innerText = new Array(privateKeyStr.length).fill(\"◦\").join(\"\");\r\n    }\r\n    localStorage.setItem(\"user\", JSON.stringify({ publicKey: publicKeyStr, privateKey: privateKeyStr, balance: 1000 })); // prettier-ignore\r\n\r\n    const newUsers = [...state.users, { publicKey: publicKeyStr, balance: 1000 }];\r\n    localStorage.setItem(\"users\", JSON.stringify(newUsers));\r\n    dispatch({ type: ACTIONS.UPDATE_USERS, payload: { users: newUsers } });\r\n  }\r\n\r\n  const togglePrivateKey = () => {\r\n    if (privateKeyRef.current) {\r\n      if (privateKeyRef.current.value.includes(\"◦\")) {\r\n        privateKeyRef.current.value = JSON.parse(localStorage.getItem(\"user\") as string).privateKey;\r\n      } else {\r\n        privateKeyRef.current.value = new Array(privateKeyRef.current.value.length).fill(\"◦\").join(\"\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid row d-flex align-items-center justify-content-center mx-auto\">\r\n      {!JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey && (\r\n        <Button variant=\"primary\" className=\"p-3 mx-2 font-weight-bold\" onClick={addUser}>\r\n          Create Wallet\r\n        </Button>\r\n      )}\r\n      <Form.Group className=\"user-key col-5 px-0\">\r\n        <Form.Label className=\"mb-3\">\r\n          <h4 className=\"mb-0\">Public:</h4>\r\n        </Form.Label>\r\n        <Form.Control\r\n          as=\"textarea\"\r\n          rows={numRows.current}\r\n          defaultValue={localStorage.getItem(\"user\") && JSON.parse(localStorage.getItem(\"user\") as string).publicKey}\r\n          isValid={copied[0]}\r\n          onFocus={(e: React.FocusEvent<HTMLTextAreaElement>) => copyKey(e, setCopied, \"public\")}\r\n          ref={publicKeyRef}\r\n        />\r\n        <Form.Control.Feedback type=\"valid\">Copied to clipboard!</Form.Control.Feedback>\r\n      </Form.Group>\r\n\r\n      <Form.Group className=\"user-key col-5 px-0 ml-4\">\r\n        <Form.Label className=\"mb-3\">\r\n          <h4 className=\"mb-0\">\r\n            Private:{\" \"}\r\n            {JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey && (\r\n              <span id=\"private-reveal-eyes\" onClick={togglePrivateKey}>\r\n                👀\r\n              </span>\r\n            )}\r\n          </h4>\r\n        </Form.Label>\r\n        <Form.Control\r\n          as=\"textarea\"\r\n          rows={numRows.current}\r\n          defaultValue={\r\n            localStorage.getItem(\"user\")\r\n              ? new Array(JSON.parse(localStorage.getItem(\"user\") as string).privateKey.length).fill(\"◦\").join(\"\")\r\n              : \"\"\r\n          }\r\n          onFocus={(e: React.FocusEvent<HTMLTextAreaElement>) => copyKey(e, setCopied, \"private\")}\r\n          isValid={copied[1]}\r\n          ref={privateKeyRef}\r\n        />\r\n        <Form.Control.Feedback type=\"valid\">Copied to clipboard!</Form.Control.Feedback>\r\n      </Form.Group>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\r\nimport { ITransaction } from \"../../typings/AppTypes\";\r\nimport { ISign } from \"./SignUI\";\r\n\r\ninterface ISend extends ISign {\r\n  details: ITransaction;\r\n  setSigned: (arg: boolean) => void;\r\n  setValidated: (arg: boolean) => void;\r\n}\r\n\r\nexport default function SendUI(props: ISend): JSX.Element {\r\n  return (\r\n    <Form noValidate className=\"col-12 col-lg-5 my-2 my-lg-0 trans-form\" onSubmit={(e) => props.handleSubmit(e)}>\r\n      <Form.Group>\r\n        <Form.Control type=\"text\" defaultValue={props.details.to} disabled={true} />\r\n        <Form.Text className=\"text-muted\">The receiver&apos;s public key</Form.Text>\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <InputGroup className=\"mb-2\">\r\n          <Form.Control type=\"number\" defaultValue={props.details.amount} disabled={true} />\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>LC</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <Form.Control\r\n          as=\"textarea\"\r\n          defaultValue={props.details.message}\r\n          rows={5}\r\n          placeholder=\"optional message...\"\r\n          disabled={true}\r\n        />\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <Form.Control type=\"text\" defaultValue={props.details.signature} disabled={true} />\r\n        <Form.Text className=\"text-muted\">\r\n          Transaction Signature → receiver uses this along with your public key to verify transaction.\r\n        </Form.Text>\r\n      </Form.Group>\r\n\r\n      <Button variant=\"primary\" type=\"submit\" disabled={!props.validated} block>\r\n        <b>Send</b>\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\r\n\r\nexport interface ISign {\r\n  validated: boolean;\r\n  handleSubmit: (e: React.FormEvent<HTMLFormElement>) => void;\r\n}\r\n\r\nexport default function SignUI({ validated, handleSubmit }: ISign): JSX.Element {\r\n  function checkAmount(e: React.ChangeEvent<HTMLInputElement>): void {\r\n    const userBalance = JSON.parse(localStorage.getItem(\"user\") as string)?.balance || 1000;\r\n    e.target.value = Math.min(Math.max(0.1, +e.target.value), userBalance)\r\n      .toFixed(2)\r\n      .toString();\r\n  }\r\n\r\n  return (\r\n    <Form noValidate validated={validated} className=\"col-12 col-lg-5 trans-form\" onSubmit={handleSubmit}>\r\n      <Form.Group>\r\n        <Form.Control\r\n          type=\"text\"\r\n          defaultValue={JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey || \"\"}\r\n          disabled={true}\r\n        />\r\n        <Form.Text className=\"text-muted\">\r\n          Your public key → used to verify transaction was signed using your private key\r\n        </Form.Text>\r\n        <h3 className=\"my-0 text-center\">↓</h3>\r\n        <Form.Control type=\"text\" placeholder=\"Receiver's public key\" pattern=\"[A-Za-z0-9]{182,182}\" required />\r\n        <Form.Control.Feedback type=\"invalid\">Must be of the same format as your public key</Form.Control.Feedback>\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <InputGroup className=\"mb-2\">\r\n          <Form.Control\r\n            type=\"number\"\r\n            placeholder=\"1.00\"\r\n            onBlur={(e: React.ChangeEvent<HTMLInputElement>) => checkAmount(e)}\r\n            required\r\n          />\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>LC</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n        </InputGroup>\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <Form.Control as=\"textarea\" rows={2} placeholder=\"optional message...\" />\r\n      </Form.Group>\r\n\r\n      <Form.Group>\r\n        <Form.Control\r\n          type=\"text\"\r\n          defaultValue={JSON.parse(localStorage.getItem(\"user\") as string)?.privateKey || \"\"}\r\n          disabled={true}\r\n        />\r\n        <Form.Text className=\"text-muted\">Your private key → not shared with anyone, keep this secret!</Form.Text>\r\n      </Form.Group>\r\n\r\n      <Button\r\n        variant=\"primary\"\r\n        type=\"submit\"\r\n        disabled={!JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey || validated}\r\n        block\r\n      >\r\n        <b>Sign</b>\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n","import React, { useState, useRef, useContext } from \"react\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState, ITransaction } from \"../../typings/AppTypes\";\r\nimport { digestMessage } from \"../../utils/conversion\";\r\n\r\nimport SendUI from \"./SendUI\";\r\nimport SignUI from \"./SignUI\";\r\nimport \"./Transaction.css\";\r\n\r\nexport default function Transaction(): JSX.Element {\r\n  const { state } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const [validated, setValidated] = useState<boolean>(false);\r\n  const [signed, setSigned] = useState<boolean>(false);\r\n\r\n  const formDetails = useRef<ITransaction>({\r\n    to: \"\",\r\n    from: JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey ?? \"\",\r\n    amount: undefined,\r\n    message: \"\",\r\n    signature: \"\",\r\n  });\r\n\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const form = e.currentTarget;\r\n    setValidated(true);\r\n\r\n    if (form.checkValidity() && !signed) {\r\n      // haven't signed the transaction yet\r\n      const formInputs = { ...form };\r\n      const formValues = Object.values(formInputs)\r\n        .slice(1, 4)\r\n        .map((input) => input.value);\r\n\r\n      formDetails.current.to = formValues[0];\r\n      formDetails.current.amount = formValues[1];\r\n      formDetails.current.message = formValues[2];\r\n      formDetails.current.signature = await digestMessage(JSON.stringify(formDetails.current));\r\n\r\n      setSigned(true);\r\n    } else if (form.checkValidity()) {\r\n      // signed the transaction and need to send now\r\n      localStorage.setItem(\"transactions\", JSON.stringify([...state.verifiedTrans, formDetails.current]));\r\n      setSigned(false);\r\n      setValidated(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid d-flex justify-content-center mx-auto row mb-2\">\r\n      <SignUI validated={validated} handleSubmit={handleSubmit} />\r\n      <SendUI\r\n        validated={validated}\r\n        setValidated={setValidated}\r\n        setSigned={setSigned}\r\n        handleSubmit={handleSubmit}\r\n        details={formDetails.current}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState, IUser } from \"../../typings/AppTypes\";\r\nimport { copyKey } from \"../../utils/copyInput\";\r\n\r\nimport \"./User.css\";\r\n\r\nexport default function UserItems(): JSX.Element {\r\n  const { state } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n  const [copied, setCopied] = useState<boolean[]>([false]);\r\n\r\n  return (\r\n    <div className=\"container-fluid mb-2\">\r\n      <h3 className=\"font-weight-bold\"> Users</h3>\r\n      <div id=\"list-background\">\r\n        {state.users?.map((user: IUser) => {\r\n          return (\r\n            <Form className=\"item\" key={Math.random()}>\r\n              <Form.Group>\r\n                <Form.Label>\r\n                  <h5 className={copied ? \"my-0\" : \"mt-1\"}>Public Key:</h5>\r\n                </Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  className=\"text-truncate\"\r\n                  onFocus={(e: React.FocusEvent<HTMLInputElement>) => copyKey(e, setCopied)}\r\n                  defaultValue={user.publicKey}\r\n                  isValid={copied[0]}\r\n                />\r\n                <Form.Control.Feedback type=\"valid\">Copied to clipboard</Form.Control.Feedback>\r\n              </Form.Group>\r\n\r\n              <Form.Group>\r\n                <Form.Label>\r\n                  <h5 className=\"my-0\">Balance:</h5>\r\n                </Form.Label>\r\n                <p>{user.balance.toFixed(2)} LC</p>\r\n              </Form.Group>\r\n            </Form>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport NavMenu from \"../components/NavMenu/NavMenu\";\r\nimport KeyGeneration from \"../components/User/KeyGeneration\";\r\nimport Transaction from \"../components/Transaction/Transaction\";\r\nimport UserItems from \"../components/User/UserItems\";\r\n\r\nexport default function Wallet(): JSX.Element {\r\n  return (\r\n    <div>\r\n      <NavMenu />\r\n      <KeyGeneration />\r\n      <Transaction />\r\n      <UserItems />\r\n    </div>\r\n  );\r\n}\r\n","import { digestMessage, randomHash } from \"./conversion\";\r\n\r\nasync function createTarget(numZeros: number): Promise<string> {\r\n  const targetHash = await digestMessage(randomHash(20));\r\n\r\n  // replace leading bits with zeros\r\n  const re = new RegExp(`^.{0,${numZeros}}`, \"g\");\r\n  const zerosStr = Array(numZeros).fill(\"0\").join(\"\");\r\n\r\n  return targetHash.replace(re, zerosStr);\r\n}\r\n\r\nexport async function mine(\r\n  nonce: number,\r\n  setHeader: (arg: number) => void,\r\n  setTarget: (arg: string) => void,\r\n  setSolution: (arg: string) => void,\r\n  setIsValid: (arg: boolean) => void\r\n): Promise<void> {\r\n  // make target\r\n  const numZeros = Math.round(Math.random()) + 2;\r\n  const targetHash = await createTarget(numZeros);\r\n  setTarget(targetHash);\r\n\r\n  // mine\r\n  let candidateSolution = \"\";\r\n  let header = nonce; // re-assigning for clarity\r\n  while (header <= Number.MAX_SAFE_INTEGER) {\r\n    candidateSolution = await digestMessage(header.toString());\r\n    setSolution(candidateSolution);\r\n    setHeader(header++);\r\n\r\n    const leadingBits = candidateSolution.substr(0, numZeros).split(\"\");\r\n    if (leadingBits.every((bit) => bit === \"0\")) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  setIsValid(candidateSolution <= targetHash);\r\n}\r\n","import React, { useState, useRef, useContext } from \"react\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState } from \"../../typings/AppTypes\";\r\nimport { mine } from \"../../utils/mine\";\r\n\r\ninterface IStats {\r\n  chain: boolean;\r\n  isValid: boolean;\r\n  solution: string;\r\n  setIsValid: (arg: boolean) => void;\r\n  setSolution: (arg: string) => void;\r\n  index?: number;\r\n}\r\n\r\nexport default function Statistics(props: IStats): JSX.Element {\r\n  const { state } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const nonce = useRef<number>(Math.round(Math.random() * 1e6));\r\n  const [header, setHeader] = useState<number>();\r\n  const [target, setTarget] = useState<string>();\r\n\r\n  return (\r\n    <div className={props.chain ? \"bordered-background\" : \"col-11 col-lg-5 mx-3\"}>\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Nonce</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control type=\"number\" defaultValue={props.solution ? nonce.current : \"\"} disabled={true} />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Header</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control type=\"number\" defaultValue={header} disabled={true} />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text className=\"font-weight-bold\">Target</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control type=\"text\" defaultValue={target} disabled={true} />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <InputGroup.Text>Sol&apos;n</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          type=\"text\"\r\n          style={props.isValid ? { color: \"green\" } : { color: \"red\" }}\r\n          defaultValue={props.solution}\r\n          disabled={true}\r\n        />\r\n      </InputGroup>\r\n\r\n      <Button\r\n        variant=\"primary\"\r\n        className=\"btn-block d-block mt-3\"\r\n        disabled={props.isValid || state.selectedTrans.length === 0}\r\n        onClick={() => mine(nonce.current, setHeader, setTarget, props.setSolution, props.setIsValid)}\r\n      >\r\n        <h4 className=\"m-0\">Mine</h4>\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\n\r\nimport Statistics from \"./Statistics\";\r\nimport { IBlock } from \"../../typings/AppTypes\";\r\n\r\nimport \"./Block.css\";\r\n\r\nexport default function Block({ details }: { details: IBlock }): JSX.Element {\r\n  const [solution, setSolution] = useState<string>(\"\");\r\n  const [isValid, setIsValid] = useState<boolean>(true);\r\n  const [, setTimestamp] = useState<number>(Date.now());\r\n\r\n  // update timestamp when solution is mined\r\n  useEffect(() => setTimestamp(Date.now()), [solution]);\r\n\r\n  return (\r\n    <div className={\"col my-3 p-2 rounded \" + (isValid ? \"valid-block\" : \"invalid-block\")}>\r\n      <Form className=\"block col-12\">\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Index</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control type=\"number\" defaultValue={details.index} disabled={true} />\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Timestamp</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control type=\"number\" defaultValue={details.timestamp} disabled={true} />\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Previous #</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control type=\"text\" defaultValue={details.prevHash} disabled={true} />\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Current #</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control type=\"text\" defaultValue={details.currHash} disabled={true} />\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Merkle #</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control type=\"text\" defaultValue={\"abc\"} />\r\n        </InputGroup>\r\n      </Form>\r\n\r\n      <Statistics\r\n        chain={true}\r\n        solution={solution}\r\n        setSolution={setSolution}\r\n        isValid={isValid}\r\n        setIsValid={setIsValid}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\n\r\nimport Block from \"../Block/Block\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState } from \"../../typings/AppTypes\";\r\n\r\nimport \"./BlockChain.css\";\r\n\r\nexport default function BlockChain(): JSX.Element {\r\n  const { state } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  return (\r\n    <div className=\"mx-3\" id=\"blockchain\">\r\n      {state.chain.map((block) => {\r\n        return (\r\n          <div className=\"mx-2 d-inline-block\" key={Math.random()}>\r\n            <Block details={block} />\r\n            <h1 className=\"chain\">🔗</h1>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport NavMenu from \"../components/NavMenu/NavMenu\";\r\nimport BlockChain from \"../components/Block/BlockChain\";\r\n\r\nexport default function Chain(): JSX.Element {\r\n  return (\r\n    <div>\r\n      <NavMenu />\r\n      <BlockChain />\r\n    </div>\r\n  );\r\n}\r\n","// modified from https://github.com/foqc/bfs-canvas-tree\r\ninterface ICoordinate {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\nclass Node {\r\n  value: string;\r\n  children: Node[];\r\n  parent: Node | null;\r\n  pos: ICoordinate;\r\n\r\n  constructor(value: string) {\r\n    this.value = value;\r\n    this.children = [];\r\n    this.parent = null;\r\n    this.pos = { x: 0, y: 0 };\r\n  }\r\n\r\n  get left(): Node {\r\n    return this.children[0];\r\n  }\r\n\r\n  set left(node: Node) {\r\n    node.parent = this;\r\n    this.children[0] = node;\r\n  }\r\n\r\n  get right(): Node {\r\n    return this.children[1];\r\n  }\r\n\r\n  set right(node: Node) {\r\n    node.parent = this;\r\n    this.children[1] = node;\r\n  }\r\n\r\n  get position(): ICoordinate {\r\n    return this.pos;\r\n  }\r\n\r\n  set position(position: ICoordinate) {\r\n    this.pos = position;\r\n  }\r\n}\r\n\r\nexport class Tree {\r\n  #root: Node | null;\r\n  #startPosition: ICoordinate;\r\n  #dim: { width: number; height: number };\r\n  #ctx: CanvasRenderingContext2D | null;\r\n\r\n  constructor(canvas: HTMLCanvasElement) {\r\n    this.#root = null;\r\n    this.#startPosition = { x: window.innerWidth / 2 - 210, y: 5 };\r\n    this.#ctx = canvas.getContext(\"2d\");\r\n    this.#dim = { width: canvas.width, height: canvas.height };\r\n  }\r\n\r\n  calculatePosition({ x, y }: ICoordinate, isLeft = false): ICoordinate {\r\n    const offset = 50;\r\n    return { x: isLeft ? x - offset * 6 : x + offset * 6, y: y + offset };\r\n  }\r\n\r\n  clear(): void {\r\n    if (this.#ctx) {\r\n      this.#ctx.clearRect(0, 0, this.#dim.width, this.#dim.height);\r\n    }\r\n  }\r\n\r\n  addNode(value: string): void {\r\n    const newNode = new Node(value !== \"\" ? value.slice(0, 25) + \"...\" : \"\");\r\n    if (!this.#root) {\r\n      newNode.position = this.#startPosition;\r\n      this.#root = newNode;\r\n    } else {\r\n      // start at root, if no node on left add and break, likewise for right\r\n      // only move in direction that does not have both children\r\n      let node = this.#root;\r\n      while (node) {\r\n        if (!node.left) {\r\n          newNode.position = this.calculatePosition(node.position, true);\r\n          node.left = newNode;\r\n          break;\r\n        }\r\n\r\n        if (!node.right) {\r\n          newNode.position = this.calculatePosition(node.position);\r\n          node.right = newNode;\r\n          break;\r\n        }\r\n\r\n        node = !node.left.left || !node.left.right ? node.left : node.right;\r\n      }\r\n    }\r\n  }\r\n\r\n  drawTree(): void {\r\n    const queue = [] as Node[];\r\n    queue.push(this.#root as Node);\r\n\r\n    // level order traversal\r\n    while (queue.length !== 0) {\r\n      const node = queue.shift();\r\n      const rectWidth = node && node.value.length * 9;\r\n\r\n      if (this.#ctx && rectWidth && node) {\r\n        // draw the root node\r\n        const { x, y } = node.position;\r\n        this.#ctx.beginPath();\r\n\r\n        this.#ctx.font = \"1rem Arial\";\r\n        this.#ctx.strokeStyle = \"#000\";\r\n        this.#ctx.fillStyle = node.value === this.#root?.value ? \"#dfd\" : \"#ddf\";\r\n\r\n        this.#ctx.fillRect(x - rectWidth / 2, y + 5, rectWidth, 30);\r\n        this.#ctx.fillStyle = \"#000\";\r\n        this.#ctx.fillText(node.value, x + 10 - rectWidth / 2, y + 25);\r\n\r\n        // draw it's children\r\n        node.children.forEach((child, i) => {\r\n          child.position.x = i === 1 ? child.position.x - 150 : child.position.x + 150; // avoid overlap\r\n          queue.push(child);\r\n          if (this.#ctx) {\r\n            this.#ctx.beginPath();\r\n            this.#ctx.moveTo(x, y + 35);\r\n            this.#ctx.lineTo(child.position.x, child.position.y + 5);\r\n            this.#ctx.stroke();\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Tree } from \"../components/Block/Tree\";\r\nimport { ITransaction } from \"../typings/AppTypes\";\r\nimport { digestMessage } from \"./conversion\";\r\n\r\nexport async function calculateMerkleTreeFormation(\r\n  verifiedTrans: ITransaction[],\r\n  selectedTrans: ITransaction[],\r\n  setMerkleTree: (arg: string[][]) => void\r\n): Promise<void> {\r\n  if (selectedTrans.length > 0) {\r\n    // need to make sure node's in tree appear in same order as in the verified transaction pane, regardless of selection order\r\n    const verifiedSignatures = verifiedTrans.map((trans) => trans.signature);\r\n    const selectedSignatures = selectedTrans.map((trans) => trans.signature);\r\n    let signatures = verifiedSignatures.filter((sig) => selectedSignatures.includes(sig));\r\n    const tree = [signatures];\r\n\r\n    while (signatures.length !== 1) {\r\n      const hashArr = [] as string[];\r\n      for (let i = 0; i < signatures.length; i += 2) {\r\n        const hash = signatures[i + 1] ? await digestMessage(signatures[i] + signatures[i + 1]) : signatures[i];\r\n        hashArr.push(hash);\r\n      }\r\n\r\n      signatures = hashArr;\r\n      tree.push(hashArr);\r\n    }\r\n\r\n    setMerkleTree(tree);\r\n  } else {\r\n    setMerkleTree([[\"\"]]);\r\n  }\r\n}\r\n\r\nexport function getMerkleRoot(tree: string[][]): string {\r\n  return tree[tree.length - 1][0];\r\n}\r\n\r\nexport function flattenTree(tree: string[][]): string[] {\r\n  let flatTree = [] as string[];\r\n  // need to reverse each tree row so that printing produces the right order!\r\n  for (let i = 0; i < tree.length; i++) {\r\n    flatTree = flatTree.concat(tree[i].reverse());\r\n  }\r\n\r\n  return flatTree;\r\n}\r\n\r\nexport function drawTreeDiagramOnCanvas(merkleTree: string[][], canvas: HTMLCanvasElement | null): void {\r\n  if (canvas) {\r\n    const canvasTree = new Tree(canvas);\r\n    canvasTree.clear();\r\n    const flatTree = flattenTree(merkleTree);\r\n    for (let i = flatTree.length - 1; i >= 0; i--) {\r\n      canvasTree.addNode(flatTree[i]);\r\n    }\r\n    canvasTree.drawTree();\r\n  }\r\n}\r\n","import { ACTIONS } from \"../enums/AppDispatchActions\";\r\nimport { IAction, IState, IUser, ITransaction, IBlock } from \"../typings/AppTypes\";\r\n\r\nexport const AppReducer = (state: IState, action: IAction): IState => {\r\n  switch (action.type) {\r\n    case ACTIONS.UPDATE_VERIFIED_TRANS: {\r\n      const verifiedTrans = filterVerifiedTrans(state.selectedTrans, state.verifiedTrans);\r\n      return { ...state, verifiedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_SELECTED_TRANS: {\r\n      return { ...state, selectedTrans: (action.payload as { selectedTrans: ITransaction[] }).selectedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_USERS: {\r\n      return { ...state, users: (action.payload as { users: IUser[] }).users };\r\n    }\r\n\r\n    case ACTIONS.ADD_BLOCK: {\r\n      return { ...state, chain: [...state.chain, (action.payload as { block: IBlock }).block] };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport function filterVerifiedTrans(selectedTrans: ITransaction[], verifiedTrans: ITransaction[]): ITransaction[] {\r\n  const selectedTransSignatures = selectedTrans.map((x) => x.signature);\r\n  return verifiedTrans.filter((x) => !selectedTransSignatures.includes(x.signature));\r\n}\r\n","import React, { useRef, useState, useEffect, useContext } from \"react\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\n\r\nimport Statistics from \"./Statistics\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { IAction, IState } from \"../../typings/AppTypes\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { calculateMerkleTreeFormation, drawTreeDiagramOnCanvas, getMerkleRoot } from \"../../utils/merkleTree\";\r\n\r\nimport \"./Block.css\";\r\nimport { filterVerifiedTrans } from \"../../reducers/AppReducer\";\r\n\r\nexport default function PreviewBlock(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  const nextIndex = useRef<number>(state.chain[state.chain.length - 1].index + 1);\r\n  const prevBlockHash = useRef<string>(state.chain[state.chain.length - 1].currHash);\r\n  const treeCanvas = useRef<HTMLCanvasElement | null>(null);\r\n\r\n  const [solution, setSolution] = useState<string>(\"\");\r\n  const [isValid, setIsValid] = useState<boolean>(false);\r\n  const [showBtn, setShowBtn] = useState<boolean>(true);\r\n  const [timestamp, setTimestamp] = useState<number>(Date.now());\r\n  const [merkleTree, setMerkleTree] = useState<string[][]>([[\"\"]]);\r\n\r\n  useEffect(() => {\r\n    calculateMerkleTreeFormation(state.verifiedTrans, state.selectedTrans, setMerkleTree);\r\n    setIsValid(false);\r\n  }, [state.selectedTrans]);\r\n\r\n  // draw tree in canvas\r\n  useEffect(() => {\r\n    drawTreeDiagramOnCanvas(merkleTree, treeCanvas.current);\r\n  }, [merkleTree]);\r\n\r\n  // update timestamp & currentHash when solution is mined\r\n  useEffect(() => setTimestamp(Date.now()), [solution]);\r\n\r\n  function handleAddBlock() {\r\n    const block = {\r\n      index: nextIndex.current,\r\n      prevHash: prevBlockHash.current,\r\n      currHash: solution,\r\n      transactions: state.selectedTrans,\r\n      timestamp,\r\n    };\r\n\r\n    // add the block, update verified transactions, clear selected transactions, persist in LS\r\n    dispatch({ type: ACTIONS.ADD_BLOCK, payload: { block } });\r\n    localStorage.setItem(\"chain\", JSON.stringify([...state.chain, block]));\r\n\r\n    dispatch({ type: ACTIONS.UPDATE_VERIFIED_TRANS });\r\n    localStorage.setItem(\"transactions\", JSON.stringify(filterVerifiedTrans(state.selectedTrans, state.verifiedTrans)));\r\n\r\n    dispatch({ type: ACTIONS.UPDATE_SELECTED_TRANS, payload: { selectedTrans: [] } });\r\n    localStorage.setItem(\"selectedTransactions\", \"[]\");\r\n\r\n    // update preview details\r\n    nextIndex.current += 1;\r\n    prevBlockHash.current = solution;\r\n    setShowBtn(false);\r\n    setIsValid(false);\r\n    setSolution(\"\");\r\n    setTimestamp(Date.now());\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-fluid row d-flex justify-content-center mx-auto my-3\">\r\n      <div className=\"text-center overflow-auto mb-2\">\r\n        <h4 className=\"font-weight-bold\">Merkle Tree Visualization</h4>\r\n        <canvas ref={treeCanvas} className=\"border border-dark\" width={1500} />\r\n      </div>\r\n\r\n      <Statistics\r\n        chain={false}\r\n        solution={solution}\r\n        setSolution={setSolution}\r\n        isValid={isValid}\r\n        setIsValid={setIsValid}\r\n      />\r\n\r\n      <Form className={\"block col-10 col-lg-5 my-4 my-lg-0 pb-2 \" + (isValid ? \"valid-block\" : \"invalid-block\")}>\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Index</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control type=\"number\" defaultValue={nextIndex.current} disabled={true} />\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Timestamp</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control type=\"number\" defaultValue={timestamp} disabled={true} />\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Previous #</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control type=\"text\" defaultValue={prevBlockHash.current} disabled={true} />\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Current #</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control type=\"text\" defaultValue={solution} disabled={true} />\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <InputGroup.Text>Merkle #</InputGroup.Text>\r\n          </InputGroup.Prepend>\r\n          <Form.Control type=\"text\" defaultValue={getMerkleRoot(merkleTree)} disabled={true} />\r\n        </InputGroup>\r\n\r\n        {isValid && showBtn && (\r\n          <Button variant=\"success\" block onClick={() => handleAddBlock()}>\r\n            <h3 className=\"my-0 font-weight-bold\">+</h3>\r\n          </Button>\r\n        )}\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { IAction, IState, ITransaction } from \"../../typings/AppTypes\";\r\n\r\nimport \"./Transaction.css\";\r\n\r\nexport default function TransactionLineUI(): JSX.Element {\r\n  const { state, dispatch } = useContext(AppContext) as { state: IState; dispatch: React.Dispatch<IAction> };\r\n\r\n  function selectTransaction(transaction: ITransaction): void {\r\n    let selectedTrans = (JSON.parse(localStorage.getItem(\"selectedTransactions\") as string) as ITransaction[]) || [];\r\n    const signatures = selectedTrans.map((x) => x.signature);\r\n    const included = signatures.includes(transaction.signature);\r\n\r\n    if (selectedTrans.length < 4 || included) {\r\n      // if just selected - push onto stack, else remove it\r\n      // adjust backgrounds according to selection/deselection\r\n      if (!included) {\r\n        selectedTrans.push(transaction);\r\n      } else {\r\n        selectedTrans = selectedTrans.filter((x) => x.signature !== transaction.signature);\r\n      }\r\n\r\n      dispatch({ type: ACTIONS.UPDATE_SELECTED_TRANS, payload: { selectedTrans } });\r\n      localStorage.setItem(\"selectedTransactions\", JSON.stringify(selectedTrans));\r\n    } else {\r\n      alert(\"You can mine at most 4 transactions at a time!\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <h3 className=\"font-weight-bold\">Verified Transactions</h3>\r\n      <div id=\"list-background\">\r\n        {state.verifiedTrans.map((transaction: ITransaction) => {\r\n          return (\r\n            <div\r\n              className={\r\n                \"trans-item \" +\r\n                (state.selectedTrans.map((x) => x.signature).includes(transaction.signature) ? \"selected\" : \"not-selected\") // prettier-ignore\r\n              }\r\n              onClick={() => selectTransaction(transaction)}\r\n              key={Math.random()}\r\n            >\r\n              <Form.Group className=\"mb-2 text-center\">\r\n                <Form.Control type=\"text\" defaultValue={transaction.from} disabled={true} />\r\n                <h3 className=\"my-0\">↓</h3>\r\n                <Form.Control type=\"text\" defaultValue={transaction.to} disabled={true} />\r\n              </Form.Group>\r\n\r\n              <InputGroup className=\"mb-2\">\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>Msg</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <Form.Control as=\"textarea\" defaultValue={transaction.message} disabled={true} />\r\n              </InputGroup>\r\n\r\n              <InputGroup className=\"mb-2\">\r\n                <Form.Control type=\"number\" defaultValue={transaction.amount} disabled={true} />\r\n                <InputGroup.Append>\r\n                  <InputGroup.Text>LC</InputGroup.Text>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n\r\n              <InputGroup className=\"mb-2\">\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>Sig</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <Form.Control type=\"text\" defaultValue={transaction.signature} disabled={true} />\r\n              </InputGroup>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport NavMenu from \"../components/NavMenu/NavMenu\";\r\nimport PreviewBlock from \"../components/Block/PreviewBlock\";\r\nimport TransactionItems from \"../components/Transaction/TransactionItems\";\r\n\r\nexport default function Mine(): JSX.Element {\r\n  return (\r\n    <div>\r\n      <NavMenu />\r\n      <TransactionItems />\r\n      <PreviewBlock />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useMemo, useReducer } from \"react\";\r\nimport { Route, BrowserRouter as Router, Redirect } from \"react-router-dom\";\r\n\r\nimport Wallet from \"../../pages/Wallet\";\r\nimport Chain from \"../../pages/Chain\";\r\nimport Mine from \"../../pages/Mine\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\nimport { AppReducer } from \"../../reducers/AppReducer\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\n\r\nexport default function App(): JSX.Element {\r\n  const [state, dispatch] = useReducer(AppReducer, {\r\n    verifiedTrans: JSON.parse(localStorage.getItem(\"transactions\") as string) ?? [],\r\n    selectedTrans: JSON.parse(localStorage.getItem(\"selectedTransactions\") as string) ?? [],\r\n    users: JSON.parse(localStorage.getItem(\"users\") as string) ?? [],\r\n    chain: JSON.parse(localStorage.getItem(\"chain\") as string) ?? [\r\n      {\r\n        index: 0,\r\n        prevHash: \"\",\r\n        currHash: new Array(256).fill(\"0\").join(\"\"),\r\n        transactions: [],\r\n        timestamp: Date.parse(\"04/31/2021\"),\r\n      },\r\n    ],\r\n  });\r\n\r\n  // prevent re-rendering children when App re-renders\r\n  const value = useMemo(() => ({ state, dispatch }), [state, dispatch]);\r\n\r\n  return (\r\n    <Router basename={\"/LibraCoin\"}>\r\n      <AppContext.Provider value={value}>\r\n        <Route exact path=\"/\">\r\n          <Redirect to=\"/wallet\" />\r\n        </Route>\r\n        <Route path=\"/wallet\" component={Wallet} />\r\n        <Route path=\"/mine\" component={Mine} />\r\n        <Route path=\"/blockchain\" component={Chain} />\r\n      </AppContext.Provider>\r\n    </Router>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App/App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}