{"version":3,"sources":["components/Block/BlockTrans.tsx","pages/Chain.tsx","hooks/useAppContext.tsx","enums/ColorPallet.ts","utils/conversion.ts","styles/BlockStyles.tsx","enums/Breakpoints.ts","utils/merkleTree.ts","components/Block/Statistics.tsx","../node_modules/react-bootstrap/esm/Row.js","components/Block/Block.tsx"],"names":["BlockTrans","index","useAppContext","state","dispatch","useState","chain","transactions","transDetails","setTransDetails","calculateNewMerkleRoot","newVal","i","type","a","newTrans","message","to","from","amount","msg","digestMessage","signature","calculateMerkleTreeFormation","newTree","newRoot","getMerkleRoot","newBlocks","timestamp","Date","now","prevHash","currHash","length","merkleRoot","push","valid","ACTIONS","UPDATE_BLOCK","payload","block","className","role","map","transaction","Form","InputGroup","Control","name","value","onChange","e","target","Prepend","as","rows","Append","readOnly","Chain","Block","Statistics","showTrans","useContext","AppContext","COLORS","bufferToHex","hashBuffer","Array","Uint8Array","b","toString","padStart","join","CryptoKeyToHex","format","key","window","crypto","subtle","exportKey","buf","msgUint8","TextEncoder","encode","digest","randomHash","len","getRandomValues","Uint32Array","GradientLine","dir","PREVIEW_LINES","StyledTableData","styled","td","DEFAULT_BACKGROUND","rootCell","ROOT_CELL","middleCells","MIDDLE_CELLS","dataCells","DATA_CELLS","diagRightLine","diagLeftLine","normalLine","StyledInput","props","theme","VALID_SOLUTION","INVALID_SOLUTION","StyledBlockForm","VALID_BACKGROUND","INVALID_BACKGROUND","RevealBlockTransText","Text","BlockContainer","div","DARK_BACKGROUND","StyledButton","Button","DEVICES","xs","SIZES","sm","md","lg","xl","verifiedTrans","selectedTrans","tree","verifiedSignatures","trans","selectedSignatures","signatures","filter","sig","includes","hashArr","hash","nonce","useRef","header","setHeader","setTarget","solution","setSolution","disableMineBtn","setDisableMineBtn","current","Math","round","random","numZeros","re","RegExp","zerosStr","fill","targetHash","replace","candidateSolution","Number","MAX_SAFE_INTEGER","match","preview","UPDATE_PREVIEW","isValidSolution","defaultValue","disabled","variant","onClick","handleMine","animation","_excluded","DEVICE_SIZES","Row","React","forwardRef","_ref","ref","bsPrefix","noGutters","_ref$as","Component","_objectWithoutPropertiesLoose","decoratedBsPrefix","useBootstrapPrefix","sizePrefix","classes","forEach","brkPoint","cols","propValue","infix","createElement","_extends","classNames","apply","concat","displayName","defaultProps","isValid","Col","Fragment","handleViewTransactions","ADD_BLOCK","UPDATE_VERIFIED_TRANS","UPDATE_SELECTED_TRANS","handleAddBlock"],"mappings":"iSAce,SAASA,EAAT,GAAgE,IAA1CC,EAAyC,EAAzCA,MACnC,EAA4BC,cAApBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAEf,EAAwCC,mBAAyBF,EAAMG,MAAML,GAAOM,cAApF,mBAAOC,EAAP,KAAqBC,EAArB,KAH4E,SAK7DC,EAL6D,kFAK5E,WAAsCC,EAAyBC,EAAWC,GAA1E,mCAAAC,EAAA,6DACQC,EADR,YACuCP,IAG5BI,GAAT,2BAAmBG,EAASH,IAA5B,kBAAiCC,EAAOF,IAClCK,EAAUD,EAASH,GAAGK,GAAKF,EAASH,GAAGM,KAAOH,EAASH,GAAGO,OAASJ,EAASH,GAAGQ,IALvF,SAMgCC,YAAcL,GAN9C,cAMED,EAASH,GAAGU,UANd,OAOEb,EAAgBM,GAPlB,SAUwBQ,YAA6BR,EAAUA,GAV/D,OAUQS,EAVR,OAWQC,EAAUC,YAAcF,GAGxBG,EAAsB,GACtBC,EAAYC,KAAKC,MACnBC,EAAW5B,EAAMG,MAAML,GAAO8B,SAC9BC,EAAW,GACNpB,EAAIX,EAlBf,aAkBsBW,EAAIT,EAAMG,MAAM2B,QAlBtC,wBAmBU1B,EAAeK,IAAMX,EAAQc,EAAWZ,EAAMG,MAAMM,GAAGL,aACvD2B,EAAatB,IAAMX,EAAQwB,EAAUtB,EAAMG,MAAMM,GAAGsB,WApB9D,UAqBqBb,YAAcT,EAAImB,EAAWG,GArBlD,QAqBIF,EArBJ,OAsBIL,EAAUQ,KAAV,2BAAoBhC,EAAMG,MAAMM,IAAhC,IAAoCgB,YAAWG,WAAUC,WAAUzB,eAAc2B,aAAYE,OAAO,KACpGL,EAAWC,EAvBf,QAkB8CpB,IAlB9C,wBA0BER,EAAS,CAAES,KAAMwB,IAAQC,aAAcC,QAAS,CAAEC,MAAOb,KA1B3D,6CAL4E,sBAkC5E,OACE,qBACEc,UAAU,mEACV,aAAW,2BACXC,KAAK,OAHP,SAKGlC,EAAamC,KAAI,SAACC,EAAahC,GAC9B,OACE,eAACiC,EAAA,EAAD,CACE,aAAW,0BACXH,KAAK,WACLD,WACGjC,EAAayB,OAAS,GAAKrB,IAAMJ,EAAayB,OAAS,EAAI,QAAU,IAAM,8BAJhF,UAQE,eAACa,EAAA,EAAD,CAAYL,UAAU,mBAAtB,UACE,cAACI,EAAA,EAAKE,QAAN,CACE,aAAW,0BACXC,KAAK,SACLP,UAAU,8BACV5B,KAAK,OACLoC,MAAOL,EAAY1B,KACnBgC,SAAU,SAACC,GAAD,OAAqBzC,EAAuByC,EAAEC,OAAOH,MAAOrC,EAAG,WAE3E,oBAAI6B,UAAU,aAAd,oBACA,cAACI,EAAA,EAAKE,QAAN,CACE,aAAW,wBACXC,KAAK,OACLP,UAAU,8BACV5B,KAAK,OACLoC,MAAOL,EAAY3B,GACnBiC,SAAU,SAACC,GAAD,OAAqBzC,EAAuByC,EAAEC,OAAOH,MAAOrC,EAAG,YAI7E,eAACkC,EAAA,EAAD,CAAYL,UAAU,OAAtB,UACE,cAACK,EAAA,EAAWO,QAAZ,UACE,cAAC,IAAD,oBAEF,cAACR,EAAA,EAAKE,QAAN,CACE,aAAW,6BACXC,KAAK,QACLM,GAAG,WACHC,KAAM,EACNN,MAAOL,EAAYxB,IACnB8B,SAAU,SAACC,GAAD,OAA0CzC,EAAuByC,EAAEC,OAAOH,MAAOrC,EAAG,aAIlG,eAACkC,EAAA,EAAD,CAAYL,UAAU,OAAtB,UACE,cAACI,EAAA,EAAKE,QAAN,CACE,aAAW,4BACXC,KAAK,WACLnC,KAAK,SACLoC,MAAOL,EAAYzB,OACnB+B,SAAU,SAACC,GAAD,OAAqBzC,EAAuByC,EAAEC,OAAOH,MAAOrC,EAAG,aAE3E,cAACkC,EAAA,EAAWU,OAAZ,UACE,cAAC,IAAD,sBAIJ,eAACV,EAAA,EAAD,WACE,cAACA,EAAA,EAAWO,QAAZ,UACE,cAAC,IAAD,oBAEF,cAACR,EAAA,EAAKE,QAAN,CACE,aAAW,+BACXC,KAAK,cACLP,UAAU,gBACV5B,KAAK,OACLoC,MAAOL,EAAYtB,UACnBmC,UAAQ,SAjEd,cAMc7C,S,oBCvDT,SAAS8C,IACtB,IAAQvD,EAAUD,cAAVC,MAER,OACE,qBAAKsC,UAAU,qCAAqCC,KAAK,OAAO,aAAW,uBAA3E,SACGvC,EAAMG,MAAMqC,KAAI,SAACH,GAAD,OACf,eAAC,IAAD,CACEC,UAAU,iCACVC,KAAK,WACL,aAAW,kBAHb,UAME,cAACiB,EAAA,EAAD,CAAOrD,OAAO,EAAML,MAAOuC,EAAMvC,QACjC,cAAC2D,EAAA,EAAD,CAAYtD,OAAO,EAAML,MAAOuC,EAAMvC,QACrCuC,EAAMqB,WAAa,cAAC7D,EAAD,CAAYC,MAAOuC,EAAMvC,UAJxCuC,EAAMT,iB,gCCjBrB,qDASO,SAAS7B,IACd,MAA4B4D,qBAAWC,KACvC,MAAO,CAAE5D,MADT,EAAQA,MACQC,SADhB,EAAeA,Y,gCCVV,IAAK4D,EAAZ,kC,SAAYA,K,0BAAAA,E,0BAAAA,E,2BAAAA,E,6BAAAA,E,yBAAAA,E,wBAAAA,E,yBAAAA,E,8BAAAA,E,gBAAAA,E,iCAAAA,E,6BAAAA,E,oBAAAA,E,uBAAAA,E,qBAAAA,E,sBAAAA,M,iLCEL,SAASC,EAAYC,GAG1B,OAFkBC,MAAMjD,KAAK,IAAIkD,WAAWF,IAClBvB,KAAI,SAAC0B,GAAD,OAAOA,EAAEC,SAAS,IAAIC,SAAS,EAAG,QAAMC,KAAK,IAItE,SAAeC,EAAtB,oC,4CAAO,WAA8BC,EAAgBC,GAA9C,eAAA7D,EAAA,sEACc8D,OAAOC,OAAOC,OAAOC,UAAUL,EAAQC,GADrD,cACCK,EADD,yBAEEf,EAAYe,IAFd,4C,sBAKA,SAAe3D,EAAtB,kC,4CAAO,WAA6BL,GAA7B,iBAAAF,EAAA,6DACCmE,GAAW,IAAIC,eAAcC,OAAOnE,GADrC,SAEoB4D,OAAOC,OAAOC,OAAOM,OAAO,UAAWH,GAF3D,cAECf,EAFD,yBAGED,EAAYC,IAHd,4C,sBAMA,SAASmB,EAAWC,GACzB,OAAOrB,EAAYW,OAAOC,OAAOU,gBAAgB,IAAIC,YAAYF,O,sTCL7DG,EAAe,SAACC,GACpB,MAAM,mBAAN,OAA0BA,EAA1B,0CAA+D1B,IAAO2B,cAAtE,oCAGWC,EAAkBC,IAAOC,GAAV,wPAGjB9B,IAAO+B,oBAQF,gBAAGlF,EAAH,EAAGA,KAAH,OACZA,EAAKmF,SACDhC,IAAOiC,UACPpF,EAAKqF,YACLlC,IAAOmC,aACPtF,EAAKuF,UACLpC,IAAOqC,WACPxF,EAAKyF,cACLb,EAAa,gBACb5E,EAAK0F,aACLd,EAAa,eACb5E,EAAK2F,WACLf,EAAa,WACbzB,IAAO+B,sBAIFU,EAAcZ,YAAOhD,IAAKE,QAAZ8C,CAAH,2CACb,SAACa,GAAD,OAAYA,EAAMC,MAAMvE,MAAQ4B,IAAO4C,eAAiB5C,IAAO6C,oBAG7DC,EAAkBjB,YAAOhD,IAAPgD,CAAH,sDACN,SAACa,GAAD,OAAYA,EAAMC,MAAMvE,MAAQ4B,IAAO+C,iBAAmB/C,IAAOgD,sBAG1EC,EAAuBpB,YAAO/C,IAAWoE,KAAlBrB,CAAH,oEAMpBsB,EAAiBtB,IAAOuB,IAAV,gIAKXpD,IAAOqD,iBAGVC,EAAezB,YAAO0B,IAAP1B,CAAH,uGAGG2B,IAAQC,K,gCCtE7B,IAAKC,EAQAF,EAVZ,kC,SAEYE,K,WAAAA,E,WAAAA,E,WAAAA,E,WAAAA,E,aAAAA,M,cAQAF,O,GACL,cAAgBE,EAAMD,I,KADjBD,I,GAEL,cAAgBE,EAAMC,I,KAFjBH,I,GAGL,cAAgBE,EAAME,I,KAHjBJ,I,GAIL,cAAgBE,EAAMG,I,KAJjBL,I,GAKL,cAAgBE,EAAMI,I,MALjBN,M,+ICPL,SAAejG,EAAtB,oC,4CAAO,WACLwG,EACAC,GAFK,2BAAAlH,EAAA,yDAIDmH,EAAO,CAAC,CAAC,OACTD,EAAc/F,OAAS,GALtB,iBAOGiG,EAAqBH,EAAcpF,KAAI,SAACwF,GAAD,OAAWA,EAAM7G,aACxD8G,EAAqBJ,EAAcrF,KAAI,SAACwF,GAAD,OAAWA,EAAM7G,aAC1D+G,EAAaH,EAAmBI,QAAO,SAACC,GAAD,OAASH,EAAmBI,SAASD,MAChFN,EAAO,CAACI,GAVL,UAY0B,IAAtBA,EAAWpG,OAZf,iBAaKwG,EAAU,GACP7H,EAAI,EAdZ,YAceA,EAAIyH,EAAWpG,QAd9B,qBAecoG,EAAWzH,EAAI,GAf7B,kCAewCS,YAAcgH,EAAWzH,GAAKyH,EAAWzH,EAAI,IAfrF,iDAe2FyH,EAAWzH,GAftG,QAeO8H,EAfP,KAgBCD,EAAQtG,KAAKuG,GAhBd,QAcsC9H,GAAK,EAd3C,uBAmBDyH,EAAaI,EACbR,EAAK9F,KAAKsG,GApBT,gDAwBER,GAxBF,6C,sBA2BA,SAASvG,EAAcuG,GAC5B,OAAOA,EAAKA,EAAKhG,OAAS,GAAG,K,qNCfhB,SAAS2B,EAAW8C,GACjC,MAA4BxG,cAApBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAETuI,EAAQC,iBAAe,GAC7B,EAA4BvI,mBAAiB,GAA7C,mBAAOwI,EAAP,KAAeC,EAAf,KACA,EAA4BzI,mBAAiB,IAA7C,mBAAO+C,EAAP,KAAe2F,EAAf,KACA,EAAgC1I,mBAAiB,IAAjD,mBAAO2I,EAAP,KAAiBC,EAAjB,KACA,EAA4C5I,oBAAkB,GAA9D,mBAAO6I,EAAP,KAAuBC,EAAvB,KAPuE,4CASvE,0DAAArI,EAAA,6DACUR,EAAiBoG,EAAjBpG,MAAOL,EAAUyG,EAAVzG,MAEfkJ,GAAkB,GAClBR,EAAMS,QAAUC,KAAKC,MAAsB,IAAhBD,KAAKE,UAG1BC,EAAWH,KAAKC,MAAMD,KAAKE,UAAY,EACvCE,EAAK,IAAIC,OAAJ,eAAmBF,EAAnB,KAAgC,KACrCG,EAAW,IAAIxF,MAAMqF,GAAUI,KAAK,KAAKpF,KAAK,IATtD,SAUyBnD,YAAcgE,YAAW,KAVlD,OAWEwE,GADIA,EAVN,QAW0BC,QAAQL,EAAIE,GACpCZ,EAAUc,GAGNE,EAAoB,GACpBlB,EAASF,EAAMS,QAhBrB,aAiBSP,GAAUmB,OAAOC,kBAjB1B,kCAkB8B5I,YAAcwH,EAAOvE,YAlBnD,WAkBIyF,EAlBJ,OAmBId,EAAYc,GACZjB,EAAUD,KAEJY,EAAK,IAAIC,OAAJ,aAAiBF,EAAjB,OACPO,EAAkBG,MAAMT,GAvBhC,gFAyBEN,GAAkB,GAEZvH,EAAYC,KAAKC,MACjBS,EA5BR,eA6BMjC,EAAoB,QAAZ,UA7Bd,2BA8BWA,EAAwBH,EAAMG,MAAML,GAA5BE,EAAMgK,SA9BzB,IA+BMvI,YACAG,SAAU5B,EAAMG,OAAQA,EAA8BL,EAAtBE,EAAMgK,QAAQlK,OAAiB,GAAG+B,SAClEA,SAAU+H,EACV3H,MAAO2H,GAAqBF,KAI1BhJ,EAAQP,EAAiC+B,IAAQC,aAAjCD,IAAQ+H,eAC9BhK,EAAS,CAAES,OAAM0B,aAGbjC,EA1CN,iBA2CUqB,EAAsB,GACxBI,EAAWgI,EACX/H,EAAW,GACNpB,EAAIX,EAAQ,EA9CzB,aA8C4BW,EAAIT,EAAMG,MAAM2B,QA9C5C,kCA+CuBZ,YAAcT,EAAImB,EAAW5B,EAAMG,MAAMM,GAAGsB,YA/CnE,QA+CMF,EA/CN,OAgDML,EAAUQ,KAAV,2BAAoBhC,EAAMG,MAAMM,IAAhC,IAAoCgB,YAAWG,WAAUC,WAAUI,OAAO,KAC1EL,EAAWC,EAjDjB,QA8CoDpB,IA9CpD,wBAoDQe,EAAUM,QACZ7B,EAAS,CAAES,KAAMwB,IAAQC,aAAcC,QAAS,CAAEC,MAAOb,KArD/D,6CATuE,sBAmEvE,IAAM0I,EAAmB3D,EAAMpG,OAASH,EAAMG,MAAMoG,EAAMzG,OAAOmC,QAAYsE,EAAMpG,OAASH,EAAMgK,QAAQ/H,MAE1G,OACE,eAAC,IAAD,CACE,aAAW,mBACXK,UAAWiE,EAAMpG,MAAQ,OAAS,8DAFpC,UAIE,eAAC,IAAD,CAAYmC,UAAU,OAAtB,UACE,cAAC,IAAWY,QAAZ,UACE,cAAC,IAAD,sBAEF,cAAC,IAAKN,QAAN,CACE,aAAW,cACXC,KAAK,QACLnC,KAAK,SAELyJ,aAAc3B,EAAMS,QACpBmB,UAAQ,GAFH5B,EAAMS,YAMf,eAAC,IAAD,CAAY3G,UAAU,OAAtB,UACE,cAAC,IAAWY,QAAZ,UACE,cAAC,IAAD,uBAEF,cAAC,IAAKN,QAAN,CAAc,aAAW,eAAeC,KAAK,SAASnC,KAAK,SAASoC,MAAO4F,EAAQ0B,UAAQ,OAG7F,eAAC,IAAD,CAAY9H,UAAU,OAAtB,UACE,cAAC,IAAWY,QAAZ,UACE,cAAC,IAAD,uBAEF,cAAC,IAAKN,QAAN,CACE,aAAW,eACXC,KAAK,SACLP,UAAU,gBACV5B,KAAK,OACLoC,MAAOG,EACPK,UAAQ,OAIZ,eAAC,IAAD,CAAYhB,UAAU,OAAtB,UACE,cAAC,IAAWY,QAAZ,UACE,cAAC,IAAD,sBAEF,cAAC,IAAD,CAAesD,MAAO,CAAEvE,MAAOiI,GAA/B,SACE,cAAC,IAAD,CACE,aAAY,kBAAoBA,EAAkB,GAAK,YACvDrH,KAAK,WACLP,UAAU,gBACV5B,KAAK,OACLoC,MAAO+F,EACPvF,UAAQ,SAKd,cAAC,IAAD,CACE,aAAW,aACX+G,QAAQ,UACR/H,UAAU,gBACV8H,SACG7D,EAAMpG,OAASH,EAAMG,MAAMoG,EAAMzG,OAAOmC,QACvCsE,EAAMpG,QAAUH,EAAMgK,QAAQ/H,OAAwC,IAA/BjC,EAAM6H,cAAc/F,SAC7DiH,EAEFuB,QAAS,kBAtIwD,0CAsIlDC,IATjB,SAWE,qBAAIjI,UAAU,8DAAd,UACE,sBAAMA,UAAU,cAAhB,kBACA,cAAC,IAAD,CAASA,UAAW,SAAWyG,EAAiB,UAAY,aAAcyB,UAAU,SAASjI,KAAK,SAAlG,SACE,sBAAMD,UAAU,UAAhB,oC,oICzJRmI,EAAY,CAAC,WAAY,YAAa,YAAa,MAInDC,EAAe,CAAC,KAAM,KAAM,KAAM,KAAM,MAIxCC,EAAmBC,IAAMC,YAAW,SAAUC,EAAMC,GACtD,IAAIC,EAAWF,EAAKE,SAChB1I,EAAYwI,EAAKxI,UACjB2I,EAAYH,EAAKG,UACjBC,EAAUJ,EAAK3H,GACfgI,OAAwB,IAAZD,EAAqB,MAAQA,EACzC3E,EAAQ6E,YAA8BN,EAAML,GAE5CY,EAAoBC,YAAmBN,EAAU,OACjDO,EAAaF,EAAoB,QACjCG,EAAU,GAed,OAdAd,EAAae,SAAQ,SAAUC,GAC7B,IAEIC,EAFAC,EAAYrF,EAAMmF,UACfnF,EAAMmF,GASb,IAAIG,EAAqB,OAAbH,EAAoB,IAAMA,EAAW,GACrC,OANVC,EADe,MAAbC,GAA0C,kBAAdA,EACvBA,EAAUD,KAEVC,IAISJ,EAAQxJ,KAAK,GAAKuJ,EAAaM,EAAQ,IAAMF,MAE7Cf,IAAMkB,cAAcX,EAAWY,YAAS,CAC1DhB,IAAKA,GACJxE,EAAO,CACRjE,UAAW0J,IAAWC,WAAM,EAAQ,CAAC3J,EAAW+I,EAAmBJ,GAAa,cAAciB,OAAOV,UAGzGb,EAAIwB,YAAc,MAClBxB,EAAIyB,aAnCe,CACjBnB,WAAW,GAmCEN,Q,wEC5BA,SAASnH,EAAT,GAA4D,IAA3CrD,EAA0C,EAA1CA,MAAOL,EAAmC,EAAnCA,MACrC,EAA4BC,cAApBC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,SAiCf,IAAMoM,EAAWlM,GAASH,EAAMG,MAAML,GAAOmC,QAAY9B,GAASH,EAAMgK,QAAQ/H,MAChF,OACE,cAAC,IAAD,CAAeuE,MAAO,CAAEvE,MAAOoK,GAA/B,SACE,cAAC,IAAD,CACE,aAAY,cAAgBA,EAAU,GAAK,YAC3C/J,WAAYnC,EAAQ,GAAK,oBAAsB,cAFjD,SAIE,eAAC,EAAD,WACE,eAACmM,EAAA,EAAD,CAAK5E,IAAKvH,GAASH,EAAMgK,QAAQ/H,MAAQ,EAAI,GAA7C,UACE,eAACU,EAAA,EAAD,CAAYL,UAAU,OAAtB,UACE,cAACK,EAAA,EAAWO,QAAZ,UACE,cAAC,IAAD,sBAEF,cAACR,EAAA,EAAKE,QAAN,CACE,aAAW,cACXC,KAAK,QACLnC,KAAK,SACLoC,MAAO3C,EAAQL,EAAQE,EAAMgK,QAAQlK,MACrCsK,UAAQ,OAIZ,eAACzH,EAAA,EAAD,CAAYL,UAAU,OAAtB,UACE,cAACK,EAAA,EAAWO,QAAZ,UACE,cAAC,IAAD,0BAEF,cAACR,EAAA,EAAKE,QAAN,CACE,aAAW,kBACXC,KAAK,YACLnC,KAAK,SACLoC,MAAO3C,EAAQH,EAAMG,MAAML,GAAO2B,UAAYzB,EAAMgK,QAAQvI,UAC5D2I,UAAQ,OAIZ,eAACzH,EAAA,EAAD,CAAYL,UAAU,OAAtB,UACE,cAACK,EAAA,EAAWO,QAAZ,UACE,cAAC,IAAD,2BAEF,cAACR,EAAA,EAAKE,QAAN,CACE,aAAW,iBACXC,KAAK,WACLP,UAAU,gBACV5B,KAAK,OACLoC,MAAO3C,GAASL,EAAQ,EAAIE,EAAMG,MAAML,EAAQ,GAAG+B,SAAW1B,EAAQ,GAAKH,EAAMgK,QAAQpI,SACzF0B,UAAQ,OAIZ,eAACX,EAAA,EAAD,CAAYL,UAAU,OAAtB,UACE,cAACK,EAAA,EAAWO,QAAZ,UACE,cAAC,IAAD,0BAEF,cAACR,EAAA,EAAKE,QAAN,CACE,aAAW,iBACXC,KAAK,WACLP,UAAU,gBACV5B,KAAK,OACLoC,MAAO3C,EAAQH,EAAMG,MAAML,GAAO+B,SAAW7B,EAAMgK,QAAQnI,SAC3DyB,UAAQ,OAIZ,eAACX,EAAA,EAAD,CAAYL,UAAU,OAAtB,UACE,cAACK,EAAA,EAAWO,QAAZ,UACE,cAAC,IAAD,yBAED/C,GAAmB,IAAVL,EACR,cAAC4C,EAAA,EAAKE,QAAN,CACE,aAAW,uBACXC,KAAK,aACLnC,KAAK,OACLyJ,aAAa,GACbC,UAAQ,IAGV,eAAC,IAAMmC,SAAP,WACE,cAAC7J,EAAA,EAAKE,QAAN,CACE,aAAW,eACXC,KAAK,aACLP,UAAU,gBACV5B,KAAK,OACLoC,MAAO3C,EAAQH,EAAMG,MAAML,GAAOiC,WAAa/B,EAAMgK,QAAQjI,WAC7DuB,UAAQ,IAETnD,GACC,cAACwC,EAAA,EAAWU,OAAZ,UACE,cAAC,IAAD,CAAsB,aAAW,aAAaiH,QAAS,kBA5F3E,WACE,IAAMjI,EAAQrC,EAAMG,MAAML,GAC1BG,EAAS,CAAES,KAAMwB,IAAQC,aAAcC,QAAS,CAAEC,MAAM,2BAAMA,GAAP,IAAcqB,WAAYrB,EAAMqB,eA0FR8I,IAA7D,SACGxM,EAAMG,MAAML,GAAO4D,UAAY,eAAO,4BAQrD,cAAC4I,EAAA,EAAD,CAAK5E,IAAKvH,GAASH,EAAMgK,QAAQ/H,MAAQ,EAAI,EAA7C,UACI9B,GAASH,EAAMgK,QAAQ/H,OACvB,cAAC,IAAD,CACE,aAAW,YACXK,UAAU,eACV+H,QAAQ,UACRhI,OAAK,EACLiI,QAAS,kBAtIvB,WAGE,IAAMjI,EAAK,2BACNrC,EAAMgK,SADA,IAET5J,aAAcJ,EAAM6H,cACpB5F,MAAOjC,EAAMG,MAAMH,EAAMgK,QAAQlK,MAAQ,GAAGmC,MAC5CyB,WAAW,IAGPsG,EAAU,CACdvI,UAAWC,KAAKC,MAChB7B,MAAOE,EAAMgK,QAAQlK,MAAQ,EAC7B8B,SAAU5B,EAAMgK,QAAQnI,SACxBA,SAAU,GACVE,WAAY,GACZE,OAAO,GAIThC,EAAS,CAAES,KAAMwB,IAAQuK,UAAWrK,QAAS,CAAEC,WAC/CpC,EAAS,CAAES,KAAMwB,IAAQwK,wBACzBzM,EAAS,CAAES,KAAMwB,IAAQyK,sBAAuBvK,QAAS,CAAEyF,cAAe,MAC1E5H,EAAS,CAAES,KAAMwB,IAAQ+H,eAAgB7H,QAAS,CAAE4H,aA+GzB4C,IALjB,SAOE,oBAAItK,UAAU,OAAd","file":"static/js/7.47b2a8d9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\n\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { useAppContext } from \"../../hooks/useAppContext\";\r\nimport { StyledInputGroupText } from \"../../styles/GlobalStyles\";\r\nimport { IBlock, ITransaction } from \"../../typings/AppTypes\";\r\n\r\nimport { digestMessage } from \"../../utils/conversion\";\r\nimport { calculateMerkleTreeFormation, getMerkleRoot } from \"../../utils/merkleTree\";\r\n\r\ntype TChangeType = \"from\" | \"to\" | \"msg\" | \"amount\";\r\ntype TInputChange<T = HTMLInputElement> = React.ChangeEvent<T>;\r\n\r\nexport default function BlockTrans({ index }: { index: number }): JSX.Element {\r\n  const { state, dispatch } = useAppContext();\r\n\r\n  const [transDetails, setTransDetails] = useState<ITransaction[]>(state.chain[index].transactions);\r\n\r\n  async function calculateNewMerkleRoot(newVal: number | string, i: number, type: TChangeType): Promise<void> {\r\n    const newTrans: ITransaction[] = [...transDetails];\r\n\r\n    // update the changed value & signature\r\n    newTrans[i] = { ...newTrans[i], [type]: newVal };\r\n    const message = newTrans[i].to + newTrans[i].from + newTrans[i].amount + newTrans[i].msg;\r\n    newTrans[i].signature = await digestMessage(message);\r\n    setTransDetails(newTrans);\r\n\r\n    // calculate new merkle root\r\n    const newTree = await calculateMerkleTreeFormation(newTrans, newTrans);\r\n    const newRoot = getMerkleRoot(newTree);\r\n\r\n    // propagate changes to next blocks\r\n    const newBlocks: IBlock[] = [];\r\n    const timestamp = Date.now();\r\n    let prevHash = state.chain[index].prevHash;\r\n    let currHash = \"\";\r\n    for (let i = index; i < state.chain.length; i++) {\r\n      const transactions = i === index ? newTrans : state.chain[i].transactions;\r\n      const merkleRoot = i === index ? newRoot : state.chain[i].merkleRoot;\r\n      currHash = await digestMessage(i + prevHash + merkleRoot);\r\n      newBlocks.push({ ...state.chain[i], timestamp, prevHash, currHash, transactions, merkleRoot, valid: false });\r\n      prevHash = currHash; // next block's prevHash is this block's currHash\r\n    }\r\n\r\n    dispatch({ type: ACTIONS.UPDATE_BLOCK, payload: { block: newBlocks } });\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"row flex-nowrap overflow-auto mx-1 mt-3 p-2 rounded bg-secondary\"\r\n      aria-label=\"Block Transactions Group\"\r\n      role=\"list\"\r\n    >\r\n      {transDetails.map((transaction, i) => {\r\n        return (\r\n          <Form\r\n            aria-label=\"Block Transactions Item\"\r\n            role=\"listitem\"\r\n            className={\r\n              (transDetails.length > 1 && i !== transDetails.length - 1 ? \"mr-2 \" : \"\") + \"col-12 bg-light p-2 rounded\"\r\n            }\r\n            key={`sig:${i}`}\r\n          >\r\n            <InputGroup className=\"mb-2 text-center\">\r\n              <Form.Control\r\n                aria-label=\"Block Transactions From\"\r\n                name=\"btFrom\"\r\n                className=\"text-truncate rounded w-100\"\r\n                type=\"text\"\r\n                value={transaction.from}\r\n                onChange={(e: TInputChange) => calculateNewMerkleRoot(e.target.value, i, \"from\")}\r\n              />\r\n              <h3 className=\"my-0 w-100\">↓</h3>\r\n              <Form.Control\r\n                aria-label=\"Block Transactions To\"\r\n                name=\"btTo\"\r\n                className=\"text-truncate rounded w-100\"\r\n                type=\"text\"\r\n                value={transaction.to}\r\n                onChange={(e: TInputChange) => calculateNewMerkleRoot(e.target.value, i, \"to\")}\r\n              />\r\n            </InputGroup>\r\n\r\n            <InputGroup className=\"mb-2\">\r\n              <InputGroup.Prepend>\r\n                <StyledInputGroupText>Msg</StyledInputGroupText>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                aria-label=\"Block Transactions Message\"\r\n                name=\"btMsg\"\r\n                as=\"textarea\"\r\n                rows={3}\r\n                value={transaction.msg}\r\n                onChange={(e: TInputChange<HTMLTextAreaElement>) => calculateNewMerkleRoot(e.target.value, i, \"msg\")}\r\n              />\r\n            </InputGroup>\r\n\r\n            <InputGroup className=\"mb-2\">\r\n              <Form.Control\r\n                aria-label=\"Block Transactions Amount\"\r\n                name=\"btAmount\"\r\n                type=\"number\"\r\n                value={transaction.amount}\r\n                onChange={(e: TInputChange) => calculateNewMerkleRoot(e.target.value, i, \"amount\")}\r\n              />\r\n              <InputGroup.Append>\r\n                <StyledInputGroupText>LC</StyledInputGroupText>\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n\r\n            <InputGroup>\r\n              <InputGroup.Prepend>\r\n                <StyledInputGroupText>Sig</StyledInputGroupText>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                aria-label=\"Block Transactions Signature\"\r\n                name=\"btSignature\"\r\n                className=\"text-truncate\"\r\n                type=\"text\"\r\n                value={transaction.signature}\r\n                readOnly\r\n              />\r\n            </InputGroup>\r\n          </Form>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Block from \"../components/Block/Block\";\r\nimport BlockTrans from \"../components/Block/BlockTrans\";\r\nimport Statistics from \"../components/Block/Statistics\";\r\nimport { useAppContext } from \"../hooks/useAppContext\";\r\nimport { BlockContainer } from \"../styles/BlockStyles\";\r\n\r\nexport default function Chain(): JSX.Element {\r\n  const { state } = useAppContext();\r\n\r\n  return (\r\n    <div className=\"mx-3 row flex-nowrap overflow-auto\" role=\"list\" aria-label=\"Blockchain Container\">\r\n      {state.chain.map((block) => (\r\n        <BlockContainer\r\n          className=\"mx-2 flex-column flex-shrink-0\"\r\n          role=\"listitem\"\r\n          aria-label=\"Block Container\"\r\n          key={block.prevHash}\r\n        >\r\n          <Block chain={true} index={block.index} />\r\n          <Statistics chain={true} index={block.index} />\r\n          {block.showTrans && <BlockTrans index={block.index} />}\r\n        </BlockContainer>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext } from \"react\";\r\nimport { AppContext } from \"../context/AppContext\";\r\nimport { IAction, IState } from \"../typings/AppTypes\";\r\n\r\ninterface IAppContext {\r\n  state: IState;\r\n  dispatch: React.Dispatch<IAction>;\r\n}\r\n\r\nexport function useAppContext(): IAppContext {\r\n  const { state, dispatch } = useContext(AppContext) as IAppContext;\r\n  return { state, dispatch };\r\n}\r\n","export enum COLORS {\r\n  DEFAULT_BACKGROUND = \"#fff\",\r\n\r\n  DARK_BACKGROUND = \"#1f1f1f\",\r\n\r\n  VALID_BACKGROUND = \"#b4ff9a\",\r\n  INVALID_BACKGROUND = \"#ff9a9a\",\r\n  VALID_SOLUTION = \"#008000\",\r\n  INVALID_SOLUTION = \"#f00\",\r\n\r\n  NAVBAR_BACKGROUND = \"#eee\",\r\n  NAV_LINK_UNDERSCORE = \"#8ac0ff\",\r\n  NAV_TEXT = \"#000\",\r\n\r\n  SELECTED_TRANS_BACKGROUND = \"#dfd\",\r\n  SELECTED_TRANS_BORDER = \"#090\",\r\n\r\n  ROOT_CELL = \"#4f9249\",\r\n  MIDDLE_CELLS = \"#cf8b31\",\r\n  DATA_CELLS = \"#7d95ff\",\r\n  PREVIEW_LINES = \"#777\"\r\n}\r\n","import { TextEncoder } from \"text-encoding\";\r\n\r\nexport function bufferToHex(hashBuffer: ArrayBuffer): string {\r\n  const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\r\n  const hashHex = hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\"); // convert bytes to hex string\r\n  return hashHex;\r\n}\r\n\r\nexport async function CryptoKeyToHex(format: string, key: CryptoKey): Promise<string> {\r\n  const buf = (await window.crypto.subtle.exportKey(format, key)) as ArrayBuffer;\r\n  return bufferToHex(buf);\r\n}\r\n\r\nexport async function digestMessage(message: string): Promise<string> {\r\n  const msgUint8 = new TextEncoder().encode(message); // encode as (utf-8) Uint8Array\r\n  const hashBuffer = await window.crypto.subtle.digest(\"SHA-256\", msgUint8); // hash the message\r\n  return bufferToHex(hashBuffer);\r\n}\r\n\r\nexport function randomHash(len: number): string {\r\n  return bufferToHex(window.crypto.getRandomValues(new Uint32Array(len)));\r\n}\r\n","import { Button, Form, InputGroup } from \"react-bootstrap\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { COLORS } from \"../enums/ColorPallet\";\r\nimport { DEVICES } from \"../enums/Breakpoints\";\r\n\r\nexport interface IStyledTableDataProps {\r\n  rootCell: boolean;\r\n  middleCells: boolean;\r\n  dataCells: boolean;\r\n  diagRightLine: boolean;\r\n  diagLeftLine: boolean;\r\n  normalLine: boolean;\r\n}\r\n\r\nconst GradientLine = (dir: string) => {\r\n  return `linear-gradient(${dir}, transparent calc(50% - 1px), ${COLORS.PREVIEW_LINES}, transparent calc(50% + 1px));`;\r\n};\r\n\r\nexport const StyledTableData = styled.td`\r\n  width: 11%;\r\n  height: 35px;\r\n  color: ${COLORS.DEFAULT_BACKGROUND};\r\n\r\n  /* increase the specificity to avoid using !important */\r\n  &&& {\r\n    border-top: none;\r\n  }\r\n\r\n  /* stylelint-disable */\r\n  background: ${({ type }: { type: IStyledTableDataProps }) =>\r\n    type.rootCell\r\n      ? COLORS.ROOT_CELL\r\n      : type.middleCells\r\n      ? COLORS.MIDDLE_CELLS\r\n      : type.dataCells\r\n      ? COLORS.DATA_CELLS\r\n      : type.diagRightLine\r\n      ? GradientLine(\"to top right\")\r\n      : type.diagLeftLine\r\n      ? GradientLine(\"to top left\")\r\n      : type.normalLine\r\n      ? GradientLine(\"to left\")\r\n      : COLORS.DEFAULT_BACKGROUND};\r\n  /* stylelint-enable */\r\n`;\r\n\r\nexport const StyledInput = styled(Form.Control)`\r\n  color: ${(props) => (props.theme.valid ? COLORS.VALID_SOLUTION : COLORS.INVALID_SOLUTION)};\r\n`;\r\n\r\nexport const StyledBlockForm = styled(Form)`\r\n  background-color: ${(props) => (props.theme.valid ? COLORS.VALID_BACKGROUND : COLORS.INVALID_BACKGROUND)};\r\n`;\r\n\r\nexport const RevealBlockTransText = styled(InputGroup.Text)`\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport const BlockContainer = styled.div`\r\n  width: 20rem;\r\n  height: fit-content;\r\n  padding: 8px;\r\n  border-radius: 4px;\r\n  background: ${COLORS.DARK_BACKGROUND};\r\n`;\r\n\r\nexport const StyledButton = styled(Button)`\r\n  height: 100%;\r\n\r\n  @media only screen and (${DEVICES.xs}) {\r\n    height: 85%;\r\n  }\r\n`;\r\n","// https://www.w3schools.com/css/css_rwd_mediaqueries.asp\r\n\r\nexport enum SIZES {\r\n  xs = \"600px\",\r\n  sm = \"600px\",\r\n  md = \"768px\",\r\n  lg = \"992px\",\r\n  xl = \"1200px\"\r\n}\r\n\r\nexport enum DEVICES {\r\n  xs = \"max-width: \" + SIZES.xs,\r\n  sm = \"min-width: \" + SIZES.sm,\r\n  md = \"min-width: \" + SIZES.md,\r\n  lg = \"min-width: \" + SIZES.lg,\r\n  xl = \"min-width: \" + SIZES.xl\r\n}\r\n","import { ITransaction } from \"../typings/AppTypes\";\r\nimport { digestMessage } from \"./conversion\";\r\n\r\nexport async function calculateMerkleTreeFormation(\r\n  verifiedTrans: ITransaction[],\r\n  selectedTrans: ITransaction[]\r\n): Promise<string[][]> {\r\n  let tree = [[\"\"]];\r\n  if (selectedTrans.length > 0) {\r\n    // need to make sure node's in tree appear in same order as in the verified transaction pane, regardless of selection order\r\n    const verifiedSignatures = verifiedTrans.map((trans) => trans.signature);\r\n    const selectedSignatures = selectedTrans.map((trans) => trans.signature);\r\n    let signatures = verifiedSignatures.filter((sig) => selectedSignatures.includes(sig));\r\n    tree = [signatures];\r\n\r\n    while (signatures.length !== 1) {\r\n      const hashArr = [] as string[];\r\n      for (let i = 0; i < signatures.length; i += 2) {\r\n        const hash = signatures[i + 1] ? await digestMessage(signatures[i] + signatures[i + 1]) : signatures[i];\r\n        hashArr.push(hash);\r\n      }\r\n\r\n      signatures = hashArr;\r\n      tree.push(hashArr);\r\n    }\r\n  }\r\n\r\n  return tree;\r\n}\r\n\r\nexport function getMerkleRoot(tree: string[][]): string {\r\n  return tree[tree.length - 1][0];\r\n}\r\n\r\nexport function flattenTree(tree: string[][]): string[] {\r\n  let flatTree = [] as string[];\r\n  // need to reverse each tree row so that printing produces the right order!\r\n  for (let i = 0; i < tree.length; i++) {\r\n    flatTree = flatTree.concat(tree[i].reverse());\r\n  }\r\n\r\n  return flatTree;\r\n}\r\n","import React, { useState, useRef } from \"react\";\r\nimport { Button, Form, InputGroup, Spinner } from \"react-bootstrap\";\r\n\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { useAppContext } from \"../../hooks/useAppContext\";\r\nimport { IBlock } from \"../../typings/AppTypes\";\r\nimport { digestMessage, randomHash } from \"../../utils/conversion\";\r\n\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { StyledInput } from \"../../styles/BlockStyles\";\r\nimport { StyledInputGroupText } from \"../../styles/GlobalStyles\";\r\ninterface IStatisticsProps {\r\n  chain: boolean;\r\n  index: number;\r\n}\r\n\r\nexport default function Statistics(props: IStatisticsProps): JSX.Element {\r\n  const { state, dispatch } = useAppContext();\r\n\r\n  const nonce = useRef<number>(0);\r\n  const [header, setHeader] = useState<number>(0);\r\n  const [target, setTarget] = useState<string>(\"\");\r\n  const [solution, setSolution] = useState<string>(\"\");\r\n  const [disableMineBtn, setDisableMineBtn] = useState<boolean>(false);\r\n\r\n  async function handleMine() {\r\n    const { chain, index } = props;\r\n\r\n    setDisableMineBtn(true);\r\n    nonce.current = Math.round(Math.random() * 1e6);\r\n\r\n    // make target with 2 or 3 leading zeros\r\n    const numZeros = Math.round(Math.random()) + 2;\r\n    const re = new RegExp(`^.{0,${numZeros}}`, \"g\");\r\n    const zerosStr = new Array(numZeros).fill(\"0\").join(\"\");\r\n    let targetHash = await digestMessage(randomHash(20));\r\n    targetHash = targetHash.replace(re, zerosStr);\r\n    setTarget(targetHash);\r\n\r\n    // mine block for a new current hash (solution)\r\n    let candidateSolution = \"\";\r\n    let header = nonce.current;\r\n    while (header <= Number.MAX_SAFE_INTEGER) {\r\n      candidateSolution = await digestMessage(header.toString());\r\n      setSolution(candidateSolution);\r\n      setHeader(header++);\r\n\r\n      const re = new RegExp(`^0{${numZeros}}`); // exactly numZeros 0 characters at start of string\r\n      if (candidateSolution.match(re)) break;\r\n    }\r\n    setDisableMineBtn(false);\r\n\r\n    const timestamp = Date.now();\r\n    const payload = {\r\n      [!chain ? \"preview\" : \"block\"]: {\r\n        ...(!chain ? state.preview : state.chain[index]),\r\n        timestamp,\r\n        prevHash: state.chain[(!chain ? state.preview.index : index) - 1].currHash,\r\n        currHash: candidateSolution,\r\n        valid: candidateSolution <= targetHash\r\n      }\r\n    };\r\n\r\n    const type = !chain ? ACTIONS.UPDATE_PREVIEW : ACTIONS.UPDATE_BLOCK;\r\n    dispatch({ type, payload });\r\n\r\n    // propagate changes to next blocks if in blockchain mode and mined block is not last\r\n    if (chain) {\r\n      const newBlocks: IBlock[] = [];\r\n      let prevHash = candidateSolution;\r\n      let currHash = \"\";\r\n      for (let i = index + 1; i < state.chain.length; i++) {\r\n        currHash = await digestMessage(i + prevHash + state.chain[i].merkleRoot);\r\n        newBlocks.push({ ...state.chain[i], timestamp, prevHash, currHash, valid: false });\r\n        prevHash = currHash; // next block's prevHash is this block's currHash\r\n      }\r\n\r\n      if (newBlocks.length) {\r\n        dispatch({ type: ACTIONS.UPDATE_BLOCK, payload: { block: newBlocks } });\r\n      }\r\n    }\r\n  }\r\n\r\n  const isValidSolution = (props.chain && state.chain[props.index].valid) || (!props.chain && state.preview.valid);\r\n\r\n  return (\r\n    <Form\r\n      aria-label=\"Block Statistics\"\r\n      className={props.chain ? \"mt-3\" : \"col-11 col-lg-5 mx-3 mb-2 mb-lg-0 bg-dark px-2 pb-2 rounded\"}\r\n    >\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <StyledInputGroupText>Nonce</StyledInputGroupText>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Block Nonce\"\r\n          name=\"nonce\"\r\n          type=\"number\"\r\n          key={nonce.current}\r\n          defaultValue={nonce.current}\r\n          disabled\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <StyledInputGroupText>Header</StyledInputGroupText>\r\n        </InputGroup.Prepend>\r\n        <Form.Control aria-label=\"Block Header\" name=\"header\" type=\"number\" value={header} disabled />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <StyledInputGroupText>Target</StyledInputGroupText>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Block Target\"\r\n          name=\"target\"\r\n          className=\"text-truncate\"\r\n          type=\"text\"\r\n          value={target}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <StyledInputGroupText>Sol&apos;n</StyledInputGroupText>\r\n        </InputGroup.Prepend>\r\n        <ThemeProvider theme={{ valid: isValidSolution }}>\r\n          <StyledInput\r\n            aria-label={\"Block Solution\" + (isValidSolution ? \"\" : \" Invalid\")}\r\n            name=\"solution\"\r\n            className=\"text-truncate\"\r\n            type=\"text\"\r\n            value={solution}\r\n            readOnly\r\n          />\r\n        </ThemeProvider>\r\n      </InputGroup>\r\n\r\n      <Button\r\n        aria-label=\"Block Mine\"\r\n        variant=\"primary\"\r\n        className=\"btn-block p-1\"\r\n        disabled={\r\n          (props.chain && state.chain[props.index].valid) ||\r\n          (!props.chain && (state.preview.valid || state.selectedTrans.length === 0)) ||\r\n          disableMineBtn\r\n        }\r\n        onClick={() => handleMine()}\r\n      >\r\n        <h4 className=\"my-0 row justify-content-end align-items-center flex-nowrap\">\r\n          <span className=\"col-10 pl-5\">Mine</span>\r\n          <Spinner className={\"mr-3 \" + (disableMineBtn ? \"visible\" : \"invisible\")} animation=\"border\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n          </Spinner>\r\n        </h4>\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"bsPrefix\", \"className\", \"noGutters\", \"as\"];\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar DEVICE_SIZES = ['xl', 'lg', 'md', 'sm', 'xs'];\nvar defaultProps = {\n  noGutters: false\n};\nvar Row = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      noGutters = _ref.noGutters,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  var sizePrefix = decoratedBsPrefix + \"-cols\";\n  var classes = [];\n  DEVICE_SIZES.forEach(function (brkPoint) {\n    var propValue = props[brkPoint];\n    delete props[brkPoint];\n    var cols;\n\n    if (propValue != null && typeof propValue === 'object') {\n      cols = propValue.cols;\n    } else {\n      cols = propValue;\n    }\n\n    var infix = brkPoint !== 'xs' ? \"-\" + brkPoint : '';\n    if (cols != null) classes.push(\"\" + sizePrefix + infix + \"-\" + cols);\n  });\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames.apply(void 0, [className, decoratedBsPrefix, noGutters && 'no-gutters'].concat(classes))\n  }));\n});\nRow.displayName = 'Row';\nRow.defaultProps = defaultProps;\nexport default Row;","import React from \"react\";\r\nimport { Col, Form, InputGroup, Row } from \"react-bootstrap\";\r\n\r\nimport { useAppContext } from \"../../hooks/useAppContext\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\n\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { RevealBlockTransText, StyledBlockForm, StyledButton } from \"../../styles/BlockStyles\";\r\nimport { StyledInputGroupText } from \"../../styles/GlobalStyles\";\r\n\r\nexport interface IBlockProps {\r\n  chain: boolean;\r\n  index: number;\r\n}\r\n\r\nexport default function Block({ chain, index }: IBlockProps): JSX.Element {\r\n  const { state, dispatch } = useAppContext();\r\n\r\n  function handleAddBlock() {\r\n    // this only happens on the mining page so can use state.preview.index here\r\n\r\n    const block = {\r\n      ...state.preview,\r\n      transactions: state.selectedTrans,\r\n      valid: state.chain[state.preview.index - 1].valid, // validity depends on previous block\r\n      showTrans: false\r\n    };\r\n\r\n    const preview = {\r\n      timestamp: Date.now(),\r\n      index: state.preview.index + 1,\r\n      prevHash: state.preview.currHash,\r\n      currHash: \"\",\r\n      merkleRoot: \"\",\r\n      valid: false\r\n    };\r\n\r\n    // add the block, update verified transactions, clear selected transactions, update preview\r\n    dispatch({ type: ACTIONS.ADD_BLOCK, payload: { block } });\r\n    dispatch({ type: ACTIONS.UPDATE_VERIFIED_TRANS });\r\n    dispatch({ type: ACTIONS.UPDATE_SELECTED_TRANS, payload: { selectedTrans: [] } });\r\n    dispatch({ type: ACTIONS.UPDATE_PREVIEW, payload: { preview } });\r\n  }\r\n\r\n  function handleViewTransactions(): void {\r\n    const block = state.chain[index];\r\n    dispatch({ type: ACTIONS.UPDATE_BLOCK, payload: { block: { ...block, showTrans: !block.showTrans } } });\r\n  }\r\n\r\n  const isValid = (chain && state.chain[index].valid) || (!chain && state.preview.valid);\r\n  return (\r\n    <ThemeProvider theme={{ valid: isValid }}>\r\n      <StyledBlockForm\r\n        aria-label={\"Block Form\" + (isValid ? \"\" : \" Invalid\")}\r\n        className={(chain ? \"\" : \"col-11 col-lg-5 \") + \"p-2 rounded\"}\r\n      >\r\n        <Row>\r\n          <Col lg={!chain && state.preview.valid ? 9 : 12}>\r\n            <InputGroup className=\"mb-2\">\r\n              <InputGroup.Prepend>\r\n                <StyledInputGroupText>Index</StyledInputGroupText>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                aria-label=\"Block Index\"\r\n                name=\"index\"\r\n                type=\"number\"\r\n                value={chain ? index : state.preview.index}\r\n                disabled\r\n              />\r\n            </InputGroup>\r\n\r\n            <InputGroup className=\"my-2\">\r\n              <InputGroup.Prepend>\r\n                <StyledInputGroupText>Timestamp</StyledInputGroupText>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                aria-label=\"Block Timestamp\"\r\n                name=\"timestamp\"\r\n                type=\"number\"\r\n                value={chain ? state.chain[index].timestamp : state.preview.timestamp}\r\n                disabled\r\n              />\r\n            </InputGroup>\r\n\r\n            <InputGroup className=\"my-2\">\r\n              <InputGroup.Prepend>\r\n                <StyledInputGroupText>Previous #</StyledInputGroupText>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                aria-label=\"Block PrevHash\"\r\n                name=\"prevHash\"\r\n                className=\"text-truncate\"\r\n                type=\"text\"\r\n                value={chain && index > 0 ? state.chain[index - 1].currHash : chain ? \"\" : state.preview.prevHash}\r\n                readOnly\r\n              />\r\n            </InputGroup>\r\n\r\n            <InputGroup className=\"my-2\">\r\n              <InputGroup.Prepend>\r\n                <StyledInputGroupText>Current #</StyledInputGroupText>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                aria-label=\"Block CurrHash\"\r\n                name=\"currHash\"\r\n                className=\"text-truncate\"\r\n                type=\"text\"\r\n                value={chain ? state.chain[index].currHash : state.preview.currHash}\r\n                readOnly\r\n              />\r\n            </InputGroup>\r\n\r\n            <InputGroup className=\"mt-2\">\r\n              <InputGroup.Prepend>\r\n                <StyledInputGroupText>Merkle #</StyledInputGroupText>\r\n              </InputGroup.Prepend>\r\n              {chain && index === 0 ? (\r\n                <Form.Control\r\n                  aria-label=\"Block Merkle Genesis\"\r\n                  name=\"merkleRoot\"\r\n                  type=\"text\"\r\n                  defaultValue=\"\"\r\n                  disabled\r\n                />\r\n              ) : (\r\n                <React.Fragment>\r\n                  <Form.Control\r\n                    aria-label=\"Block Merkle\"\r\n                    name=\"merkleRoot\"\r\n                    className=\"text-truncate\"\r\n                    type=\"text\"\r\n                    value={chain ? state.chain[index].merkleRoot : state.preview.merkleRoot}\r\n                    readOnly\r\n                  />\r\n                  {chain && (\r\n                    <InputGroup.Append>\r\n                      <RevealBlockTransText aria-label=\"Show Trans\" onClick={() => handleViewTransactions()}>\r\n                        {state.chain[index].showTrans ? \"🙈\" : \"🙉\"}\r\n                      </RevealBlockTransText>\r\n                    </InputGroup.Append>\r\n                  )}\r\n                </React.Fragment>\r\n              )}\r\n            </InputGroup>\r\n          </Col>\r\n          <Col lg={!chain && state.preview.valid ? 3 : 0}>\r\n            {!chain && state.preview.valid && (\r\n              <StyledButton\r\n                aria-label=\"Add Block\"\r\n                className=\"mt-2 mt-lg-0\"\r\n                variant=\"success\"\r\n                block\r\n                onClick={() => handleAddBlock()}\r\n              >\r\n                <h4 className=\"my-0\">Add Block</h4>\r\n              </StyledButton>\r\n            )}\r\n          </Col>\r\n        </Row>\r\n      </StyledBlockForm>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n"],"sourceRoot":""}