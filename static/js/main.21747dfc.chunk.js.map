{"version":3,"sources":["enums/ColorPallet.ts","enums/Breakpoints.ts","styles/NavMenuStyles.tsx","components/NavMenu/NavMenu.tsx","enums/AppDispatchActions.ts","context/AppContext.ts","hooks/useAppContext.tsx","utils/conversion.ts","styles/GlobalStyles.tsx","styles/UserStyles.tsx","utils/copyInput.ts","components/User/KeyGeneration.tsx","hooks/useAddUser.ts","components/User/UserItems.tsx","schema/SignSchema.ts","utils/numberManipulation.ts","styles/TransactionStyles.tsx","components/Transaction/Sign.tsx","hooks/useResetTransactionDetails.ts","components/Transaction/Send.tsx","pages/Wallet.tsx","styles/BlockStyles.tsx","components/Block/Block.tsx","utils/merkleTree.ts","components/Block/BlockTrans.tsx","components/Block/Statistics.tsx","pages/Chain.tsx","components/Transaction/TransactionItems.tsx","components/Block/PreviewTree.tsx","hooks/useDrawPreviewTree.ts","pages/Mine.tsx","reducers/AppReducer.ts","components/App/App.tsx","index.tsx"],"names":["COLORS","SIZES","DEVICES","xs","sm","md","lg","xl","StyledNav","styled","Navbar","NAVBAR_BACKGROUND","StyledNavLink","Nav","Link","NAV_TEXT","NAV_LINK_UNDERSCORE","NavLinkWrapper","text","href","active","location","includes","toUpperCase","slice","NavMenu","expand","className","Brand","src","alt","width","height","Toggle","Collapse","id","ACTIONS","AppContext","React","createContext","undefined","useAppContext","useContext","state","dispatch","bufferToHex","hashBuffer","Array","from","Uint8Array","map","b","toString","padStart","join","CryptoKeyToHex","format","key","a","window","crypto","subtle","exportKey","buf","digestMessage","message","msgUint8","TextEncoder","encode","digest","randomHash","len","getRandomValues","Uint32Array","GlobalStyle","createGlobalStyle","StyledInputGroupText","InputGroup","Text","UserKey","UserItem","Form","DEFAULT_BACKGROUND","RevealEyes","span","copyInput","target","assignName","value","blur","select","document","execCommand","type","ASSIGN_COPIED","payload","copied","removeCopied","KeyGeneration","numRows","useRef","useState","show","setShow","userSK","users","useEffect","generateKey","name","namedCurve","publicKey","privateKey","publicKeyStr","privateKeyStr","newUser","balance","SET_MAIN_USER","user","UPDATE_USERS","addUser","useAddUser","Prepend","Control","as","rows","current","isValid","onFocus","e","onBlur","readOnly","Feedback","length","fill","Append","onClick","UserItems","i","defaultValue","disabled","minVal","min","decimalFormat","num","Number","Math","floor","split","SignSchema","lenPK","yup","shape","to","obj","diff","max","matches","RegExp","required","amount","test","x","replace","msg","optional","Transaction","margin","padding","borderRadius","border","css","TransList","div","TransItem","props","theme","selected","SELECTED_TRANS_BACKGROUND","SELECTED_TRANS_BORDER","TransForm","Sign","userPK","SET_VALIDATED","validated","SET_SIGNED","signed","sent","SET_DETAILS","details","signature","useResetTransactionDetails","TextAreaFormControl","validationSchema","onSubmit","data","setSubmitting","Object","values","reduce","total","curr","currentDetails","initialValues","handleSubmit","isSubmitting","touched","errors","noValidate","wallet","isInvalid","render","errorMessage","role","step","placeholder","toFixed","Button","variant","block","Send","preventDefault","ADD_VERIFIED_TRANS","trans","Wallet","GradientLine","dir","PREVIEW_LINES","StyledTableData","td","rootCell","ROOT_CELL","middleCells","MIDDLE_CELLS","dataCells","DATA_CELLS","diagRightLine","diagLeftLine","normalLine","StyledInput","valid","VALID_SOLUTION","INVALID_SOLUTION","StyledBlockForm","VALID_BACKGROUND","INVALID_BACKGROUND","RevealBlockTransText","BlockContainer","Block","chain","index","preview","timestamp","currHash","prevHash","Fragment","merkleRoot","UPDATE_BLOCK","showTrans","handleViewTransactions","transactions","selectedTrans","Date","now","ADD_BLOCK","UPDATE_VERIFIED_TRANS","UPDATE_SELECTED_TRANS","UPDATE_PREVIEW","handleAddBlock","calculateMerkleTreeFormation","verifiedTrans","tree","verifiedSignatures","selectedSignatures","signatures","filter","sig","hashArr","hash","push","getMerkleRoot","BlockTrans","transDetails","setTransDetails","calculateNewMerkleRoot","newVal","newTrans","newTree","newRoot","newBlocks","transaction","onChange","Statistics","nonce","header","setHeader","setTarget","solution","setSolution","disableMineBtn","setDisableMineBtn","round","random","numZeros","re","zerosStr","targetHash","candidateSolution","MAX_SAFE_INTEGER","match","isValidSolution","handleMine","Chain","TransactionItems","JSON","parse","stringify","included","newPreview","alert","isSelected","selectTransaction","Group","PreviewTree","numCells","strLen","verified","setTree","drawTree","useDrawPreviewTree","truncate","str","n","substr","getText","rowNum","isTitle","getClassName","isCorrectColumn","Table","responsive","size","_","title","Mine","AppReducer","action","localStorage","setItem","selectedTransSignatures","blocks","isArray","forEach","newSent","App","useReducer","getItem","useMemo","basename","Provider","exact","path","component","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.21747dfc.chunk.js","sourcesContent":["export enum COLORS {\r\n  DEFAULT_BACKGROUND = \"#fff\",\r\n\r\n  VALID_BACKGROUND = \"#b4ff9a\",\r\n  INVALID_BACKGROUND = \"#ff9a9a\",\r\n  VALID_SOLUTION = \"#008000\",\r\n  INVALID_SOLUTION = \"#f00\",\r\n\r\n  NAVBAR_BACKGROUND = \"#eee\",\r\n  NAV_LINK_UNDERSCORE = \"#8ac0ff\",\r\n  NAV_TEXT = \"#000\",\r\n\r\n  SELECTED_TRANS_BACKGROUND = \"#dfd\",\r\n  SELECTED_TRANS_BORDER = \"#090\",\r\n\r\n  ROOT_CELL = \"#4f9249\",\r\n  MIDDLE_CELLS = \"#cf8b31\",\r\n  DATA_CELLS = \"#7d95ff\",\r\n  PREVIEW_LINES = \"#777\"\r\n}\r\n","// https://www.w3schools.com/css/css_rwd_mediaqueries.asp\r\n\r\nexport enum SIZES {\r\n  xs = \"600px\",\r\n  sm = \"600px\",\r\n  md = \"768px\",\r\n  lg = \"992px\",\r\n  xl = \"1200px\"\r\n}\r\n\r\nexport enum DEVICES {\r\n  xs = \"max-width: \" + SIZES.xs,\r\n  sm = \"min-width: \" + SIZES.sm,\r\n  md = \"min-width: \" + SIZES.md,\r\n  lg = \"min-width: \" + SIZES.lg,\r\n  xl = \"min-width: \" + SIZES.xl\r\n}\r\n","import { Nav, Navbar } from \"react-bootstrap\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { COLORS } from \"../enums/ColorPallet\";\r\nimport { DEVICES } from \"../enums/Breakpoints\";\r\n\r\nexport const StyledNav = styled(Navbar)`\r\n  background-color: ${COLORS.NAVBAR_BACKGROUND};\r\n`;\r\n\r\nexport const StyledNavLink = styled(Nav.Link)`\r\n  font-size: larger;\r\n  text-align: right;\r\n  color: ${COLORS.NAV_TEXT};\r\n  font-weight: bolder;\r\n\r\n  &:hover,\r\n  &.active {\r\n    font-weight: bolder;\r\n  }\r\n\r\n  &:hover {\r\n    border-bottom: ${COLORS.NAV_LINK_UNDERSCORE} 1px solid;\r\n  }\r\n\r\n  @media only screen and (${DEVICES.xs}) {\r\n    &:hover {\r\n      border-bottom: none;\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport { StyledNav, StyledNavLink } from \"../../styles/NavMenuStyles\";\r\n\r\nconst NavLinkWrapper = ({ text }: { text: string }) => {\r\n  return (\r\n    <StyledNavLink href={\"/LibraCoin/\" + text} active={location.href.includes(\"/\" + text)}>\r\n      {text[0].toUpperCase() + text.slice(1)}\r\n    </StyledNavLink>\r\n  );\r\n};\r\n\r\nexport default function NavMenu(): JSX.Element {\r\n  return (\r\n    <StyledNav expand=\"lg\" className=\"mb-3\">\r\n      <Navbar.Brand aria-label=\"LibraCoin Logo\" href=\"https://github.com/lbragile/LibraCoin\">\r\n        <img src=\"./assets/libracoin-logo-256.png\" alt=\"LibraCoin Logo\" width=\"64\" height=\"64\" />\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"ml-auto\">\r\n          <NavLinkWrapper text=\"wallet\" />\r\n          <NavLinkWrapper text=\"mine\" />\r\n          <NavLinkWrapper text=\"blockchain\" />\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </StyledNav>\r\n  );\r\n}\r\n","export enum ACTIONS {\r\n  ADD_VERIFIED_TRANS = \"ADD_VERIFIED_TRANS\",\r\n  UPDATE_VERIFIED_TRANS = \"UPDATE_VERIFIED_TRANS\",\r\n  UPDATE_SELECTED_TRANS = \"UPDATE_SELECTED_TRANS\",\r\n  UPDATE_USERS = \"UPDATE_USERS\",\r\n  SET_MAIN_USER = \"SET_MAIN_USER\",\r\n  ADD_BLOCK = \"ADD_BLOCK\",\r\n  UPDATE_BLOCK = \"UPDATE_BLOCK\",\r\n  UPDATE_PREVIEW = \"UPDATE_PREVIEW\",\r\n  ASSIGN_COPIED = \"ASSIGN_COPIED\",\r\n  SET_SIGNED = \"SET_SIGNED\",\r\n  SET_VALIDATED = \"SET_VALIDATED\",\r\n  SET_DETAILS = \"SET_DETAILS\"\r\n}\r\n","import React from \"react\";\r\nimport { IAction, IState } from \"../typings/AppTypes\";\r\n\r\ntype TAppContext = { state: IState; dispatch: React.Dispatch<IAction> } | undefined;\r\n\r\nexport const AppContext = React.createContext<TAppContext>(undefined);\r\n","import React, { useContext } from \"react\";\r\nimport { AppContext } from \"../context/AppContext\";\r\nimport { IAction, IState } from \"../typings/AppTypes\";\r\n\r\ninterface IAppContext {\r\n  state: IState;\r\n  dispatch: React.Dispatch<IAction>;\r\n}\r\n\r\nexport function useAppContext(): IAppContext {\r\n  const { state, dispatch } = useContext(AppContext) as IAppContext;\r\n  return { state, dispatch };\r\n}\r\n","import { TextEncoder } from \"text-encoding\";\r\n\r\nexport function bufferToHex(hashBuffer: ArrayBuffer): string {\r\n  const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\r\n  const hashHex = hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\"); // convert bytes to hex string\r\n  return hashHex;\r\n}\r\n\r\nexport async function CryptoKeyToHex(format: string, key: CryptoKey): Promise<string> {\r\n  const buf = (await window.crypto.subtle.exportKey(format, key)) as ArrayBuffer;\r\n  return bufferToHex(buf);\r\n}\r\n\r\nexport async function digestMessage(message: string): Promise<string> {\r\n  const msgUint8 = new TextEncoder().encode(message); // encode as (utf-8) Uint8Array\r\n  const hashBuffer = await window.crypto.subtle.digest(\"SHA-256\", msgUint8); // hash the message\r\n  return bufferToHex(hashBuffer);\r\n}\r\n\r\nexport function randomHash(len: number): string {\r\n  return bufferToHex(window.crypto.getRandomValues(new Uint32Array(len)));\r\n}\r\n","import { InputGroup } from \"react-bootstrap\";\r\nimport styled, { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n\r\nexport const StyledInputGroupText = styled(InputGroup.Text)`\r\n  &&& {\r\n    font-weight: bold;\r\n  }\r\n`;\r\n","import { Form, InputGroup } from \"react-bootstrap\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { COLORS } from \"../enums/ColorPallet\";\r\n\r\nexport const UserKey = styled(InputGroup)`\r\n  margin: 0.25em 0.5em;\r\n  word-wrap: break-word;\r\n`;\r\n\r\nexport const UserItem = styled(Form)`\r\n  background-color: ${COLORS.DEFAULT_BACKGROUND};\r\n  margin: 1em 0.5em;\r\n  padding: 1em;\r\n  width: 14rem;\r\n`;\r\n\r\nexport const RevealEyes = styled.span`\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { ACTIONS } from \"../enums/AppDispatchActions\";\r\nimport { IAction } from \"../typings/AppTypes\";\r\n\r\nexport function copyInput(\r\n  target: HTMLTextAreaElement | HTMLInputElement,\r\n  assignName: string,\r\n  dispatch: React.Dispatch<IAction>\r\n): void {\r\n  if (!target.value.includes(\"◦\")) {\r\n    target.select();\r\n    document.execCommand(\"copy\");\r\n    dispatch({ type: ACTIONS.ASSIGN_COPIED, payload: { copied: assignName } });\r\n  } else {\r\n    target.blur();\r\n  }\r\n}\r\n\r\nexport function removeCopied(dispatch: React.Dispatch<IAction>): void {\r\n  dispatch({ type: ACTIONS.ASSIGN_COPIED, payload: { copied: \"\" } });\r\n}\r\n","import React, { useRef, useState } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\n\r\nimport { useAddUser } from \"../../hooks/useAddUser\";\r\nimport { useAppContext } from \"../../hooks/useAppContext\";\r\nimport { StyledInputGroupText } from \"../../styles/GlobalStyles\";\r\nimport { RevealEyes, UserKey } from \"../../styles/UserStyles\";\r\nimport { copyInput, removeCopied } from \"../../utils/copyInput\";\r\n\r\nexport default function KeyGeneration(): JSX.Element {\r\n  const { state, dispatch } = useAppContext();\r\n\r\n  const numRows = useRef(4);\r\n  const [show, setShow] = useState<boolean>(false);\r\n\r\n  useAddUser(state.user.publicKey, state.users);\r\n\r\n  return (\r\n    <div className=\"container-fluid d-flex justify-content-center mx-auto row my-5\">\r\n      <UserKey className=\"col-12 col-lg-5 pl-3 pl-lg-0\">\r\n        <InputGroup.Prepend>\r\n          <StyledInputGroupText>Public</StyledInputGroupText>\r\n        </InputGroup.Prepend>\r\n\r\n        <Form.Control\r\n          aria-label=\"publicKey\"\r\n          as=\"textarea\"\r\n          rows={numRows.current}\r\n          className=\"rounded-right\"\r\n          value={state.user.publicKey}\r\n          isValid={state.copied === \"walletPK\"}\r\n          onFocus={(e: React.FocusEvent<HTMLTextAreaElement>) => copyInput(e.target, \"walletPK\", dispatch)}\r\n          onBlur={() => removeCopied(dispatch)}\r\n          readOnly\r\n        />\r\n\r\n        <Form.Control.Feedback type=\"valid\">Copied to clipboard!</Form.Control.Feedback>\r\n      </UserKey>\r\n\r\n      <UserKey className=\"col-12 col-lg-5 pl-3\">\r\n        <InputGroup.Prepend>\r\n          <StyledInputGroupText>Private</StyledInputGroupText>\r\n        </InputGroup.Prepend>\r\n\r\n        <Form.Control\r\n          aria-label=\"privateKey\"\r\n          as=\"textarea\"\r\n          rows={numRows.current}\r\n          value={show ? state.user.privateKey : new Array(state.user.privateKey.length).fill(\"◦\").join(\"\")}\r\n          onFocus={(e: React.FocusEvent<HTMLTextAreaElement>) => copyInput(e.target, \"walletSK\", dispatch)}\r\n          onBlur={() => removeCopied(dispatch)}\r\n          isValid={state.copied === \"walletSK\"}\r\n          readOnly\r\n        />\r\n\r\n        <InputGroup.Append>\r\n          <StyledInputGroupText className=\"rounded-right\">\r\n            <RevealEyes onClick={() => setShow(!show)}>👀</RevealEyes>\r\n          </StyledInputGroupText>\r\n        </InputGroup.Append>\r\n\r\n        <Form.Control.Feedback type=\"valid\">Copied to clipboard!</Form.Control.Feedback>\r\n      </UserKey>\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useAppContext } from \"./useAppContext\";\r\nimport { ACTIONS } from \"../enums/AppDispatchActions\";\r\nimport { CryptoKeyToHex } from \"../utils/conversion\";\r\nimport { IUser } from \"../typings/AppTypes\";\r\n\r\nexport function useAddUser(userSK: string, users: IUser[]): void {\r\n  const { dispatch } = useAppContext();\r\n\r\n  useEffect(() => {\r\n    async function addUser(): Promise<void> {\r\n      if (userSK === \"\") {\r\n        const { publicKey, privateKey } = await window.crypto.subtle.generateKey(\r\n          { name: \"ECDSA\", namedCurve: \"P-256\" },\r\n          true,\r\n          [\"sign\", \"verify\"]\r\n        );\r\n\r\n        const publicKeyStr = await CryptoKeyToHex(\"spki\", publicKey as CryptoKey);\r\n        const privateKeyStr = await CryptoKeyToHex(\"pkcs8\", privateKey as CryptoKey);\r\n\r\n        const newUser = { publicKey: publicKeyStr, balance: \"1000.00\" };\r\n        dispatch({ type: ACTIONS.SET_MAIN_USER, payload: { user: { ...newUser, privateKey: privateKeyStr } } });\r\n        dispatch({ type: ACTIONS.UPDATE_USERS, payload: { users: [...users, newUser] } });\r\n      }\r\n    }\r\n\r\n    addUser();\r\n  }, [dispatch, userSK, users]);\r\n}\r\n","import React from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { useAppContext } from \"../../hooks/useAppContext\";\r\nimport { StyledInputGroupText } from \"../../styles/GlobalStyles\";\r\nimport { UserItem } from \"../../styles/UserStyles\";\r\nimport { IUser } from \"../../typings/AppTypes\";\r\nimport { copyInput, removeCopied } from \"../../utils/copyInput\";\r\n\r\nexport default function UserItems(): JSX.Element {\r\n  const { state, dispatch } = useAppContext();\r\n\r\n  return (\r\n    <div className=\"container-fluid mb-2\">\r\n      <h3 className=\"font-weight-bold\">Users</h3>\r\n      <div className=\"row flex-nowrap overflow-auto bg-dark mx-1 px-2 rounded\">\r\n        {state.users.map((user: IUser, i: number) => {\r\n          return (\r\n            <UserItem className=\"rounded flex-shrink-0\" key={`user-${user.publicKey}`}>\r\n              <InputGroup>\r\n                <InputGroup.Prepend>\r\n                  <StyledInputGroupText>🔑</StyledInputGroupText>\r\n                </InputGroup.Prepend>\r\n                <Form.Control\r\n                  aria-label=\"User Public Key\"\r\n                  type=\"text\"\r\n                  className=\"text-truncate rounded-right\"\r\n                  onFocus={(e: React.FocusEvent<HTMLInputElement>) => copyInput(e.target, \"userItem-\" + i, dispatch)}\r\n                  onBlur={() => removeCopied(dispatch)}\r\n                  defaultValue={user.publicKey}\r\n                  isValid={state.copied === \"userItem-\" + i}\r\n                  readOnly\r\n                />\r\n                <Form.Control.Feedback type=\"valid\">Copied to clipboard</Form.Control.Feedback>\r\n              </InputGroup>\r\n\r\n              <InputGroup className=\"mt-2\">\r\n                <Form.Control aria-label=\"balance\" type=\"number\" defaultValue={user.balance} disabled />\r\n                <InputGroup.Append>\r\n                  <StyledInputGroupText>LC</StyledInputGroupText>\r\n                </InputGroup.Append>\r\n              </InputGroup>\r\n            </UserItem>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import * as yup from \"yup\";\r\nimport { StringSchema } from \"yup\";\r\nimport { RequiredNumberSchema } from \"yup/lib/number\";\r\nimport { RequiredStringSchema } from \"yup/lib/string\";\r\nimport { numberWithCommas } from \"../utils/numberManipulation\";\r\n\r\ntype reqStrSchema = RequiredStringSchema<string | undefined, Record<string, unknown>>;\r\ntype optStrSchema = StringSchema<string | undefined, Record<string, unknown>>;\r\ntype reqNumSchema = RequiredNumberSchema<number | undefined, Record<string, unknown>>;\r\n\r\ntype TSignSchema = {\r\n  to: reqStrSchema;\r\n  amount: reqNumSchema;\r\n  msg: optStrSchema;\r\n};\r\n\r\nconst minVal = (min: number, value?: number): boolean => (value === undefined ? true : value >= min);\r\nconst decimalFormat = (value?: number): boolean => {\r\n  const num = Number(value);\r\n  return Math.floor(num) === num || !value ? true : value.toString().split(\".\")[1].length <= 2;\r\n};\r\n\r\nexport const SignSchema = (lenPK: number, balance: number): yup.ObjectSchema<TSignSchema> => {\r\n  return yup.object().shape({\r\n    to: yup\r\n      .string()\r\n      .min(lenPK, (obj) => {\r\n        const diff = obj.min - obj.value.length;\r\n        return `Length is too short. Add ${diff} alphanumeric character${diff === 1 ? \"\" : \"s\"}`;\r\n      })\r\n      .max(lenPK, (obj) => {\r\n        const diff = obj.value.length - obj.max;\r\n        return `Length is too long. Remove ${diff} alphanumeric character${diff === 1 ? \"\" : \"s\"}`;\r\n      })\r\n      .matches(new RegExp(`[A-Za-z0-9]{${lenPK}}`), \"Format is invalid, characters must be alphanumeric\")\r\n      .required(\"Receiver Public Key is required!\"),\r\n    amount: yup\r\n      .number()\r\n      .test(\"negative\", \"Cannot be a negative value\", (value) => minVal(0, value))\r\n      .test(\"min\", \"Must be at least $0.10 LC\", (value) => minVal(0.1, value))\r\n      .test(\"format\", \"Allowed at most 2 decimal places\", decimalFormat)\r\n      .max(balance, `Must be at most $${numberWithCommas(balance)} LC`)\r\n      .required(\"Amount is required!\"),\r\n    msg: yup.string().optional()\r\n  });\r\n};\r\n","// https://stackoverflow.com/a/2901298/4298115\r\nexport function numberWithCommas(x: number): string {\r\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n","import { Form } from \"react-bootstrap\";\r\nimport styled, { css } from \"styled-components\";\r\n\r\nimport { COLORS } from \"../enums/ColorPallet\";\r\n\r\n// create a \"mixin\"\r\nconst Transaction = (margin: string, padding: string, borderRadius: string, border: string) => css`\r\n  margin: ${margin};\r\n  padding: ${padding};\r\n  border-radius: ${borderRadius};\r\n  border: ${border};\r\n`;\r\n\r\nexport const TransList = styled.div`\r\n  min-height: 18rem;\r\n`;\r\n\r\nexport const TransItem = styled(Form)`\r\n  ${Transaction(\"0.5rem\", \"0.5em\", \"5px\", \"2px solid transparent\")}; /* stylelint-disable-line */\r\n  min-width: 14rem;\r\n  background-color: ${(props) => (props.theme.selected ? COLORS.SELECTED_TRANS_BACKGROUND : COLORS.DEFAULT_BACKGROUND)};\r\n\r\n  &:hover {\r\n    cursor: pointer;\r\n    border: 2px solid ${COLORS.SELECTED_TRANS_BORDER};\r\n  }\r\n`;\r\n\r\nexport const TransForm = styled(Form)`\r\n  ${Transaction(\"0 1rem\", \"1em\", \"6px\", \"1px solid black\")}; /* stylelint-disable-line */\r\n`;\r\n","import React from \"react\";\r\n\r\nimport { Formik, ErrorMessage, Field } from \"formik\";\r\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\r\n\r\nimport { useAppContext } from \"../../hooks/useAppContext\";\r\nimport { useResetTransactionDetails } from \"../../hooks/useResetTransactionDetails\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { SignSchema } from \"../../schema/SignSchema\";\r\nimport { digestMessage } from \"../../utils/conversion\";\r\nimport { TransForm } from \"../../styles/TransactionStyles\";\r\nimport { StyledInputGroupText } from \"../../styles/GlobalStyles\";\r\n\r\nexport default function Sign(): JSX.Element {\r\n  const { state, dispatch } = useAppContext();\r\n\r\n  useResetTransactionDetails(state.user.publicKey);\r\n\r\n  const TextAreaFormControl = (props: unknown): JSX.Element => {\r\n    return <Form.Control as=\"textarea\" {...props} />;\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      validationSchema={SignSchema(state.user.publicKey.length, state.user.balance)}\r\n      onSubmit={async (data, { setSubmitting }) => {\r\n        setSubmitting(true);\r\n        const message = Object.values(data).reduce((total, curr) => total + curr, \"\");\r\n        const currentDetails = { ...data, from: state.user.publicKey, signature: await digestMessage(message) };\r\n\r\n        dispatch({ type: ACTIONS.SET_SIGNED, payload: { signed: true } });\r\n        dispatch({ type: ACTIONS.SET_DETAILS, payload: { details: currentDetails } });\r\n        setSubmitting(false);\r\n      }}\r\n      initialValues={{ to: \"\", amount: \"\", msg: \"\" }}\r\n    >\r\n      {({ handleSubmit, isSubmitting, touched, errors }) => (\r\n        <TransForm aria-label=\"Sign Form\" noValidate className=\"col-12 col-lg-5\" onSubmit={handleSubmit}>\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <StyledInputGroupText>Sender Public Key</StyledInputGroupText>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              aria-label=\"Sender Public Key\"\r\n              name=\"from\"\r\n              className=\"text-truncate rounded-right\"\r\n              type=\"text\"\r\n              value={state.user.publicKey}\r\n              readOnly\r\n            />\r\n          </InputGroup>\r\n\r\n          <Form.Text className=\"text-muted\">Used to verify transaction was signed using your private key</Form.Text>\r\n\r\n          <InputGroup className=\"my-2\">\r\n            <InputGroup.Prepend>\r\n              <StyledInputGroupText>Receiver Public Key</StyledInputGroupText>\r\n            </InputGroup.Prepend>\r\n            <Field\r\n              as={Form.Control}\r\n              aria-label=\"Receiver PK\"\r\n              name=\"to\"\r\n              className=\"text-truncate rounded-right\"\r\n              type=\"text\"\r\n              required\r\n              readOnly={state.wallet.signed}\r\n              isInvalid={!!touched.to && !!errors.to}\r\n              isValid={!!touched.to && !errors.to}\r\n            />\r\n\r\n            <ErrorMessage\r\n              name=\"to\"\r\n              render={(errorMessage) => (\r\n                <Form.Control.Feedback\r\n                  className=\"font-weight-bold\"\r\n                  type=\"invalid\"\r\n                  role=\"alert\"\r\n                  aria-label=\"Receiver PK Feedback\"\r\n                >\r\n                  {errorMessage}\r\n                </Form.Control.Feedback>\r\n              )}\r\n            />\r\n          </InputGroup>\r\n\r\n          <InputGroup className=\"mb-2\">\r\n            <Field\r\n              as={Form.Control}\r\n              aria-label=\"Sign Amount\"\r\n              name=\"amount\"\r\n              type=\"number\"\r\n              step=\"any\"\r\n              placeholder={(1).toFixed(2)}\r\n              required\r\n              readOnly={state.wallet.signed}\r\n              isInvalid={!!touched.amount && !!errors.amount}\r\n              isValid={!!touched.amount && !errors.amount}\r\n            />\r\n\r\n            <InputGroup.Append>\r\n              <StyledInputGroupText className=\"rounded-right border-left-0\">LC</StyledInputGroupText>\r\n            </InputGroup.Append>\r\n\r\n            <ErrorMessage\r\n              name=\"amount\"\r\n              render={(errorMessage) => (\r\n                <Form.Control.Feedback\r\n                  className=\"font-weight-bold\"\r\n                  type=\"invalid\"\r\n                  role=\"alert\"\r\n                  aria-label=\"Amount Feedback\"\r\n                >\r\n                  {errorMessage}\r\n                </Form.Control.Feedback>\r\n              )}\r\n            />\r\n          </InputGroup>\r\n\r\n          <InputGroup className=\"mb-2\">\r\n            <InputGroup.Prepend>\r\n              <StyledInputGroupText>Message</StyledInputGroupText>\r\n            </InputGroup.Prepend>\r\n            <Field\r\n              as={TextAreaFormControl}\r\n              aria-label=\"Sign Message\"\r\n              name=\"msg\"\r\n              rows={2}\r\n              placeholder=\"optional message...\"\r\n              readOnly={state.wallet.signed}\r\n              isValid={!!touched.msg && !errors.msg}\r\n            />\r\n          </InputGroup>\r\n\r\n          <InputGroup>\r\n            <InputGroup.Prepend>\r\n              <StyledInputGroupText>Sender Private Key</StyledInputGroupText>\r\n            </InputGroup.Prepend>\r\n            <Form.Control\r\n              aria-label=\"Sender Private Key\"\r\n              name=\"fromSK\"\r\n              className=\"text-truncate\"\r\n              type=\"text\"\r\n              value={state.user.privateKey}\r\n              readOnly\r\n            />\r\n          </InputGroup>\r\n\r\n          <Form.Text className=\"text-muted\">Not shared with anyone, keep this secret!</Form.Text>\r\n\r\n          <Button\r\n            aria-label=\"Sign Button\"\r\n            className=\"mt-2\"\r\n            variant={state.wallet.signed ? \"success\" : \"primary\"}\r\n            type=\"submit\"\r\n            disabled={state.wallet.signed || isSubmitting}\r\n            block\r\n          >\r\n            <b>{state.wallet.signed ? \"Signed\" : \"Sign\"}</b>\r\n          </Button>\r\n        </TransForm>\r\n      )}\r\n    </Formik>\r\n  );\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { ACTIONS } from \"../enums/AppDispatchActions\";\r\nimport { useAppContext } from \"./useAppContext\";\r\n\r\nexport function useResetTransactionDetails(userPK: string): void {\r\n  const { dispatch } = useAppContext();\r\n\r\n  useEffect(() => {\r\n    dispatch({ type: ACTIONS.SET_VALIDATED, payload: { validated: false } });\r\n    dispatch({ type: ACTIONS.SET_SIGNED, payload: { signed: false, sent: false } });\r\n    dispatch({\r\n      type: ACTIONS.SET_DETAILS,\r\n      payload: {\r\n        details: { from: userPK, to: \"\", amount: \"0.00\", msg: \"\", signature: \"\" }\r\n      }\r\n    });\r\n  }, [dispatch, userPK]);\r\n}\r\n","import React from \"react\";\r\n\r\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { useAppContext } from \"../../hooks/useAppContext\";\r\nimport { StyledInputGroupText } from \"../../styles/GlobalStyles\";\r\nimport { TransForm } from \"../../styles/TransactionStyles\";\r\n\r\nexport default function Send(): JSX.Element {\r\n  const { state, dispatch } = useAppContext();\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n\r\n    dispatch({ type: ACTIONS.SET_SIGNED, payload: { signed: false } });\r\n    dispatch({ type: ACTIONS.SET_VALIDATED, payload: { validated: false } });\r\n    dispatch({ type: ACTIONS.ADD_VERIFIED_TRANS, payload: { trans: state.wallet.details } });\r\n    dispatch({\r\n      type: ACTIONS.SET_DETAILS,\r\n      payload: { details: { from: \"\", to: \"\", amount: (0).toFixed(2), msg: \"\", signature: \"\" } }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <TransForm aria-label=\"Send Form\" noValidate className=\"col-12 col-lg-5 my-2 my-lg-0\" onSubmit={handleSubmit}>\r\n      <InputGroup>\r\n        <InputGroup.Prepend>\r\n          <StyledInputGroupText>Receiver Public Key</StyledInputGroupText>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Receiver PK\"\r\n          name=\"receiver-pk\"\r\n          className=\"text-truncate\"\r\n          type=\"text\"\r\n          value={state.wallet.details.to}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <Form.Text className=\"text-muted\">Make sure this matches the value used when signing</Form.Text>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <Form.Control\r\n          aria-label=\"Send Amount\"\r\n          name=\"amount\"\r\n          type=\"number\"\r\n          value={state.wallet.details.amount}\r\n          readOnly\r\n        />\r\n        <InputGroup.Append>\r\n          <StyledInputGroupText className=\"rounded-right border-left-0\">LC</StyledInputGroupText>\r\n        </InputGroup.Append>\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"mb-2\">\r\n        <InputGroup.Prepend>\r\n          <StyledInputGroupText>Message</StyledInputGroupText>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Send Message\"\r\n          name=\"msg\"\r\n          as=\"textarea\"\r\n          value={state.wallet.details.msg}\r\n          rows={4}\r\n          placeholder=\"optional message...\"\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup>\r\n        <InputGroup.Prepend>\r\n          <StyledInputGroupText>Transaction Signature</StyledInputGroupText>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Transaction Signature\"\r\n          name=\"sig\"\r\n          type=\"text\"\r\n          className=\"text-truncate\"\r\n          value={state.wallet.details.signature}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <Form.Text className=\"text-muted\">Receiver uses this along with your public key to verify transaction</Form.Text>\r\n\r\n      <Button\r\n        aria-label=\"Send Button\"\r\n        className=\"mt-2\"\r\n        variant={state.wallet.sent ? \"success\" : \"primary\"}\r\n        type=\"submit\"\r\n        disabled={!state.wallet.signed}\r\n        block\r\n      >\r\n        <b>{state.wallet.sent ? \"Sent\" : \"Send\"}</b>\r\n      </Button>\r\n    </TransForm>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nimport NavMenu from \"../components/NavMenu/NavMenu\";\r\nimport KeyGeneration from \"../components/User/KeyGeneration\";\r\nimport UserItems from \"../components/User/UserItems\";\r\nimport Sign from \"../components/Transaction/Sign\";\r\nimport Send from \"../components/Transaction/Send\";\r\n\r\nexport default function Wallet(): JSX.Element {\r\n  return (\r\n    <div>\r\n      <NavMenu />\r\n\r\n      <KeyGeneration />\r\n\r\n      <div className=\"container-fluid d-flex justify-content-center mx-auto row my-4\">\r\n        <Sign />\r\n        <Send />\r\n      </div>\r\n\r\n      <UserItems />\r\n    </div>\r\n  );\r\n}\r\n","import { Form, InputGroup } from \"react-bootstrap\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { COLORS } from \"../enums/ColorPallet\";\r\n\r\nexport interface IStyledTableDataProps {\r\n  rootCell: boolean;\r\n  middleCells: boolean;\r\n  dataCells: boolean;\r\n  diagRightLine: boolean;\r\n  diagLeftLine: boolean;\r\n  normalLine: boolean;\r\n}\r\n\r\nconst GradientLine = (dir: string) => {\r\n  return `linear-gradient(${dir}, transparent calc(50% - 1px), ${COLORS.PREVIEW_LINES}, transparent calc(50% + 1px));`;\r\n};\r\n\r\nexport const StyledTableData = styled.td`\r\n  width: 11%;\r\n  height: 35px;\r\n  color: ${COLORS.DEFAULT_BACKGROUND};\r\n\r\n  /* increase the specificity to avoid using !important */\r\n  &&& {\r\n    border-top: none;\r\n  }\r\n\r\n  /* stylelint-disable */\r\n  background: ${({ type }: { type: IStyledTableDataProps }) =>\r\n    type.rootCell\r\n      ? COLORS.ROOT_CELL\r\n      : type.middleCells\r\n      ? COLORS.MIDDLE_CELLS\r\n      : type.dataCells\r\n      ? COLORS.DATA_CELLS\r\n      : type.diagRightLine\r\n      ? GradientLine(\"to top right\")\r\n      : type.diagLeftLine\r\n      ? GradientLine(\"to top left\")\r\n      : type.normalLine\r\n      ? GradientLine(\"to left\")\r\n      : COLORS.DEFAULT_BACKGROUND};\r\n  /* stylelint-enable */\r\n`;\r\n\r\nexport const StyledInput = styled(Form.Control)`\r\n  color: ${(props) => (props.theme.valid ? COLORS.VALID_SOLUTION : COLORS.INVALID_SOLUTION)};\r\n`;\r\n\r\nexport const StyledBlockForm = styled(Form)`\r\n  background-color: ${(props) => (props.theme.valid ? COLORS.VALID_BACKGROUND : COLORS.INVALID_BACKGROUND)};\r\n`;\r\n\r\nexport const RevealBlockTransText = styled(InputGroup.Text)`\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nexport const BlockContainer = styled.div`\r\n  width: 20rem;\r\n`;\r\n","import React from \"react\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\n\r\nimport { useAppContext } from \"../../hooks/useAppContext\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\n\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { RevealBlockTransText, StyledBlockForm } from \"../../styles/BlockStyles\";\r\nimport { StyledInputGroupText } from \"../../styles/GlobalStyles\";\r\n\r\nexport interface IBlockProps {\r\n  chain: boolean;\r\n  index: number;\r\n}\r\n\r\nexport default function Block({ chain, index }: IBlockProps): JSX.Element {\r\n  const { state, dispatch } = useAppContext();\r\n\r\n  function handleAddBlock() {\r\n    // this only happens on the mining page so can use state.preview.index here\r\n\r\n    const block = {\r\n      ...state.preview,\r\n      transactions: state.selectedTrans,\r\n      valid: state.chain[state.preview.index - 1].valid, // validity depends on previous block\r\n      showTrans: false\r\n    };\r\n\r\n    const preview = {\r\n      timestamp: Date.now(),\r\n      index: state.preview.index + 1,\r\n      prevHash: state.preview.currHash,\r\n      currHash: \"\",\r\n      merkleRoot: \"\",\r\n      valid: false\r\n    };\r\n\r\n    // add the block, update verified transactions, clear selected transactions, update preview\r\n    dispatch({ type: ACTIONS.ADD_BLOCK, payload: { block } });\r\n    dispatch({ type: ACTIONS.UPDATE_VERIFIED_TRANS });\r\n    dispatch({ type: ACTIONS.UPDATE_SELECTED_TRANS, payload: { selectedTrans: [] } });\r\n    dispatch({ type: ACTIONS.UPDATE_PREVIEW, payload: { preview } });\r\n  }\r\n\r\n  function handleViewTransactions(): void {\r\n    const block = state.chain[index];\r\n    dispatch({ type: ACTIONS.UPDATE_BLOCK, payload: { block: { ...block, showTrans: !block.showTrans } } });\r\n  }\r\n\r\n  const isValid = (chain && state.chain[index].valid) || (!chain && state.preview.valid);\r\n  return (\r\n    <ThemeProvider theme={{ valid: isValid }}>\r\n      <StyledBlockForm\r\n        aria-label={\"Block Form\" + (isValid ? \"\" : \" Invalid\")}\r\n        className={(chain ? \"\" : \"col-10 col-lg-5 \") + \"my-4 my-lg-0 p-2 rounded\"}\r\n      >\r\n        <InputGroup className=\"mb-2\">\r\n          <InputGroup.Prepend>\r\n            <StyledInputGroupText>Index</StyledInputGroupText>\r\n          </InputGroup.Prepend>\r\n          <Form.Control\r\n            aria-label=\"Block Index\"\r\n            name=\"index\"\r\n            type=\"number\"\r\n            value={chain ? index : state.preview.index}\r\n            disabled\r\n          />\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <StyledInputGroupText>Timestamp</StyledInputGroupText>\r\n          </InputGroup.Prepend>\r\n          <Form.Control\r\n            aria-label=\"Block Timestamp\"\r\n            name=\"timestamp\"\r\n            type=\"number\"\r\n            value={chain ? state.chain[index].timestamp : state.preview.timestamp}\r\n            disabled\r\n          />\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <StyledInputGroupText>Previous #</StyledInputGroupText>\r\n          </InputGroup.Prepend>\r\n          <Form.Control\r\n            aria-label=\"Block PrevHash\"\r\n            name=\"prevHash\"\r\n            className=\"text-truncate\"\r\n            type=\"text\"\r\n            value={chain && index > 0 ? state.chain[index - 1].currHash : chain ? \"\" : state.preview.prevHash}\r\n            readOnly\r\n          />\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"my-2\">\r\n          <InputGroup.Prepend>\r\n            <StyledInputGroupText>Current #</StyledInputGroupText>\r\n          </InputGroup.Prepend>\r\n          <Form.Control\r\n            aria-label=\"Block CurrHash\"\r\n            name=\"currHash\"\r\n            className=\"text-truncate\"\r\n            type=\"text\"\r\n            value={chain ? state.chain[index].currHash : state.preview.currHash}\r\n            readOnly\r\n          />\r\n        </InputGroup>\r\n\r\n        <InputGroup className=\"mt-2\">\r\n          <InputGroup.Prepend>\r\n            <StyledInputGroupText>Merkle #</StyledInputGroupText>\r\n          </InputGroup.Prepend>\r\n          {chain && index === 0 ? (\r\n            <Form.Control aria-label=\"Block Merkle Genesis\" name=\"merkleRoot\" type=\"text\" defaultValue=\"\" disabled />\r\n          ) : (\r\n            <React.Fragment>\r\n              <Form.Control\r\n                aria-label=\"Block Merkle\"\r\n                name=\"merkleRoot\"\r\n                className=\"text-truncate\"\r\n                type=\"text\"\r\n                value={chain ? state.chain[index].merkleRoot : state.preview.merkleRoot}\r\n                readOnly\r\n              />\r\n              {chain && (\r\n                <InputGroup.Append>\r\n                  <RevealBlockTransText aria-label=\"Show Trans\" onClick={() => handleViewTransactions()}>\r\n                    {state.chain[index].showTrans ? \"🙈\" : \"🙉\"}\r\n                  </RevealBlockTransText>\r\n                </InputGroup.Append>\r\n              )}\r\n            </React.Fragment>\r\n          )}\r\n        </InputGroup>\r\n\r\n        {!chain && state.preview.valid && (\r\n          <Button aria-label=\"Add Block\" className=\"mt-2\" variant=\"success\" block onClick={() => handleAddBlock()}>\r\n            <h4 className=\"my-0\">Add Block</h4>\r\n          </Button>\r\n        )}\r\n      </StyledBlockForm>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","import { ITransaction } from \"../typings/AppTypes\";\r\nimport { digestMessage } from \"./conversion\";\r\n\r\nexport async function calculateMerkleTreeFormation(\r\n  verifiedTrans: ITransaction[],\r\n  selectedTrans: ITransaction[]\r\n): Promise<string[][]> {\r\n  let tree = [[\"\"]];\r\n  if (selectedTrans.length > 0) {\r\n    // need to make sure node's in tree appear in same order as in the verified transaction pane, regardless of selection order\r\n    const verifiedSignatures = verifiedTrans.map((trans) => trans.signature);\r\n    const selectedSignatures = selectedTrans.map((trans) => trans.signature);\r\n    let signatures = verifiedSignatures.filter((sig) => selectedSignatures.includes(sig));\r\n    tree = [signatures];\r\n\r\n    while (signatures.length !== 1) {\r\n      const hashArr = [] as string[];\r\n      for (let i = 0; i < signatures.length; i += 2) {\r\n        const hash = signatures[i + 1] ? await digestMessage(signatures[i] + signatures[i + 1]) : signatures[i];\r\n        hashArr.push(hash);\r\n      }\r\n\r\n      signatures = hashArr;\r\n      tree.push(hashArr);\r\n    }\r\n  }\r\n\r\n  return tree;\r\n}\r\n\r\nexport function getMerkleRoot(tree: string[][]): string {\r\n  return tree[tree.length - 1][0];\r\n}\r\n\r\nexport function flattenTree(tree: string[][]): string[] {\r\n  let flatTree = [] as string[];\r\n  // need to reverse each tree row so that printing produces the right order!\r\n  for (let i = 0; i < tree.length; i++) {\r\n    flatTree = flatTree.concat(tree[i].reverse());\r\n  }\r\n\r\n  return flatTree;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\n\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { useAppContext } from \"../../hooks/useAppContext\";\r\nimport { StyledInputGroupText } from \"../../styles/GlobalStyles\";\r\nimport { IBlock, ITransaction } from \"../../typings/AppTypes\";\r\n\r\nimport { digestMessage } from \"../../utils/conversion\";\r\nimport { calculateMerkleTreeFormation, getMerkleRoot } from \"../../utils/merkleTree\";\r\n\r\ntype TChangeType = \"from\" | \"to\" | \"msg\" | \"amount\";\r\ntype TInputChange<T = HTMLInputElement> = React.ChangeEvent<T>;\r\n\r\nexport default function BlockTrans({ index }: { index: number }): JSX.Element {\r\n  const { state, dispatch } = useAppContext();\r\n\r\n  const [transDetails, setTransDetails] = useState<ITransaction[]>(state.chain[index].transactions);\r\n\r\n  async function calculateNewMerkleRoot(newVal: number | string, i: number, type: TChangeType): Promise<void> {\r\n    const newTrans: ITransaction[] = [...transDetails];\r\n\r\n    // update the changed value & signature\r\n    newTrans[i] = { ...newTrans[i], [type]: newVal };\r\n    const message = newTrans[i].to + newTrans[i].from + newTrans[i].amount + newTrans[i].msg;\r\n    newTrans[i].signature = await digestMessage(message);\r\n    setTransDetails(newTrans);\r\n\r\n    // calculate new merkle root\r\n    const newTree = await calculateMerkleTreeFormation(newTrans, newTrans);\r\n    const newRoot = getMerkleRoot(newTree);\r\n\r\n    // propagate changes to next blocks\r\n    const newBlocks: IBlock[] = [];\r\n    const timestamp = Date.now();\r\n    let prevHash = state.chain[index].prevHash;\r\n    let currHash = \"\";\r\n    for (let i = index; i < state.chain.length; i++) {\r\n      const transactions = i === index ? newTrans : state.chain[i].transactions;\r\n      const merkleRoot = i === index ? newRoot : state.chain[i].merkleRoot;\r\n      currHash = await digestMessage(i + prevHash + merkleRoot);\r\n      newBlocks.push({ ...state.chain[i], timestamp, prevHash, currHash, transactions, merkleRoot, valid: false });\r\n      prevHash = currHash; // next block's prevHash is this block's currHash\r\n    }\r\n\r\n    dispatch({ type: ACTIONS.UPDATE_BLOCK, payload: { block: newBlocks } });\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className=\"row flex-nowrap overflow-auto mx-1 p-2 rounded bg-dark\"\r\n      aria-label=\"Block Transactions Group\"\r\n      role=\"list\"\r\n    >\r\n      {transDetails.map((transaction, i) => {\r\n        return (\r\n          <Form\r\n            aria-label=\"Block Transactions Item\"\r\n            role=\"listitem\"\r\n            className={\r\n              (transDetails.length > 1 && i !== transDetails.length - 1 ? \"mr-2 \" : \"\") +\r\n              \"col-12 bg-light border border-dark p-1 rounded\"\r\n            }\r\n            key={`sig:${i}`}\r\n          >\r\n            <InputGroup className=\"mb-2 text-center\">\r\n              <Form.Control\r\n                aria-label=\"Block Transactions From\"\r\n                name=\"btFrom\"\r\n                className=\"text-truncate rounded w-100\"\r\n                type=\"text\"\r\n                value={transaction.from}\r\n                onChange={(e: TInputChange) => calculateNewMerkleRoot(e.target.value, i, \"from\")}\r\n              />\r\n              <h3 className=\"my-0 w-100\">↓</h3>\r\n              <Form.Control\r\n                aria-label=\"Block Transactions To\"\r\n                name=\"btTo\"\r\n                className=\"text-truncate rounded w-100\"\r\n                type=\"text\"\r\n                value={transaction.to}\r\n                onChange={(e: TInputChange) => calculateNewMerkleRoot(e.target.value, i, \"to\")}\r\n              />\r\n            </InputGroup>\r\n\r\n            <InputGroup className=\"mb-2\">\r\n              <InputGroup.Prepend>\r\n                <StyledInputGroupText>Msg</StyledInputGroupText>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                aria-label=\"Block Transactions Message\"\r\n                name=\"btMsg\"\r\n                as=\"textarea\"\r\n                rows={3}\r\n                value={transaction.msg}\r\n                onChange={(e: TInputChange<HTMLTextAreaElement>) => calculateNewMerkleRoot(e.target.value, i, \"msg\")}\r\n              />\r\n            </InputGroup>\r\n\r\n            <InputGroup className=\"mb-2\">\r\n              <Form.Control\r\n                aria-label=\"Block Transactions Amount\"\r\n                name=\"btAmount\"\r\n                type=\"number\"\r\n                value={transaction.amount}\r\n                onChange={(e: TInputChange) => calculateNewMerkleRoot(e.target.value, i, \"amount\")}\r\n              />\r\n              <InputGroup.Append>\r\n                <StyledInputGroupText>LC</StyledInputGroupText>\r\n              </InputGroup.Append>\r\n            </InputGroup>\r\n\r\n            <InputGroup>\r\n              <InputGroup.Prepend>\r\n                <StyledInputGroupText>Sig</StyledInputGroupText>\r\n              </InputGroup.Prepend>\r\n              <Form.Control\r\n                aria-label=\"Block Transactions Signature\"\r\n                name=\"btSignature\"\r\n                className=\"text-truncate\"\r\n                type=\"text\"\r\n                value={transaction.signature}\r\n                readOnly\r\n              />\r\n            </InputGroup>\r\n          </Form>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useRef } from \"react\";\r\nimport { Button, Form, InputGroup } from \"react-bootstrap\";\r\n\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { useAppContext } from \"../../hooks/useAppContext\";\r\nimport { IBlock } from \"../../typings/AppTypes\";\r\nimport { digestMessage, randomHash } from \"../../utils/conversion\";\r\n\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { StyledInput } from \"../../styles/BlockStyles\";\r\nimport { StyledInputGroupText } from \"../../styles/GlobalStyles\";\r\ninterface IStatisticsProps {\r\n  chain: boolean;\r\n  index: number;\r\n}\r\n\r\nexport default function Statistics(props: IStatisticsProps): JSX.Element {\r\n  const { state, dispatch } = useAppContext();\r\n\r\n  const nonce = useRef<number>(0);\r\n  const [header, setHeader] = useState<number>(0);\r\n  const [target, setTarget] = useState<string>(\"\");\r\n  const [solution, setSolution] = useState<string>(\"\");\r\n  const [disableMineBtn, setDisableMineBtn] = useState<boolean>(false);\r\n\r\n  async function handleMine() {\r\n    const { chain, index } = props;\r\n\r\n    setDisableMineBtn(true);\r\n    nonce.current = Math.round(Math.random() * 1e6);\r\n\r\n    // make target with 2 or 3 leading zeros\r\n    const numZeros = Math.round(Math.random()) + 2;\r\n    const re = new RegExp(`^.{0,${numZeros}}`, \"g\");\r\n    const zerosStr = new Array(numZeros).fill(\"0\").join(\"\");\r\n    let targetHash = await digestMessage(randomHash(20));\r\n    targetHash = targetHash.replace(re, zerosStr);\r\n    setTarget(targetHash);\r\n\r\n    // mine block for a new current hash (solution)\r\n    let candidateSolution = \"\";\r\n    let header = nonce.current;\r\n    while (header <= Number.MAX_SAFE_INTEGER) {\r\n      candidateSolution = await digestMessage(header.toString());\r\n      setSolution(candidateSolution);\r\n      setHeader(header++);\r\n\r\n      const re = new RegExp(`^0{${numZeros}}`); // exactly numZeros 0 characters at start of string\r\n      if (candidateSolution.match(re)) break;\r\n    }\r\n    setDisableMineBtn(false);\r\n\r\n    const timestamp = Date.now();\r\n    const payload = {\r\n      [!chain ? \"preview\" : \"block\"]: {\r\n        ...(!chain ? state.preview : state.chain[index]),\r\n        timestamp,\r\n        prevHash: state.chain[(!chain ? state.preview.index : index) - 1].currHash,\r\n        currHash: candidateSolution,\r\n        valid: candidateSolution <= targetHash\r\n      }\r\n    };\r\n\r\n    const type = !chain ? ACTIONS.UPDATE_PREVIEW : ACTIONS.UPDATE_BLOCK;\r\n    dispatch({ type, payload });\r\n\r\n    // propagate changes to next blocks if in blockchain mode and mined block is not last\r\n    if (chain) {\r\n      const newBlocks: IBlock[] = [];\r\n      let prevHash = candidateSolution;\r\n      let currHash = \"\";\r\n      for (let i = index + 1; i < state.chain.length; i++) {\r\n        currHash = await digestMessage(i + prevHash + state.chain[i].merkleRoot);\r\n        newBlocks.push({ ...state.chain[i], timestamp, prevHash, currHash, valid: false });\r\n        prevHash = currHash; // next block's prevHash is this block's currHash\r\n      }\r\n\r\n      if (newBlocks.length) {\r\n        dispatch({ type: ACTIONS.UPDATE_BLOCK, payload: { block: newBlocks } });\r\n      }\r\n    }\r\n  }\r\n\r\n  const isValidSolution = (props.chain && state.chain[props.index].valid) || (!props.chain && state.preview.valid);\r\n\r\n  return (\r\n    <Form aria-label=\"Block Statistics\" className={props.chain ? \"my-3\" : \"col-11 col-lg-5 mx-3\"}>\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <StyledInputGroupText>Nonce</StyledInputGroupText>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Block Nonce\"\r\n          name=\"nonce\"\r\n          type=\"number\"\r\n          key={nonce.current}\r\n          defaultValue={nonce.current}\r\n          disabled\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <StyledInputGroupText>Header</StyledInputGroupText>\r\n        </InputGroup.Prepend>\r\n        <Form.Control aria-label=\"Block Header\" name=\"header\" type=\"number\" value={header} disabled />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <StyledInputGroupText>Target</StyledInputGroupText>\r\n        </InputGroup.Prepend>\r\n        <Form.Control\r\n          aria-label=\"Block Target\"\r\n          name=\"target\"\r\n          className=\"text-truncate\"\r\n          type=\"text\"\r\n          value={target}\r\n          readOnly\r\n        />\r\n      </InputGroup>\r\n\r\n      <InputGroup className=\"my-2\">\r\n        <InputGroup.Prepend>\r\n          <StyledInputGroupText>Sol&apos;n</StyledInputGroupText>\r\n        </InputGroup.Prepend>\r\n        <ThemeProvider theme={{ valid: isValidSolution }}>\r\n          <StyledInput\r\n            aria-label={\"Block Solution\" + (isValidSolution ? \"\" : \" Invalid\")}\r\n            name=\"solution\"\r\n            className=\"text-truncate\"\r\n            type=\"text\"\r\n            value={solution}\r\n            readOnly\r\n          />\r\n        </ThemeProvider>\r\n      </InputGroup>\r\n\r\n      <Button\r\n        aria-label=\"Block Mine\"\r\n        variant=\"primary\"\r\n        className=\"btn-block mt-2 py-2\"\r\n        disabled={\r\n          (props.chain && state.chain[props.index].valid) ||\r\n          (!props.chain && (state.preview.valid || state.selectedTrans.length === 0)) ||\r\n          disableMineBtn\r\n        }\r\n        onClick={() => handleMine()}\r\n      >\r\n        <h4 className=\"my-0 row justify-content-end align-items-center flex-nowrap\">\r\n          <span className=\"col-10 pl-5\">Mine</span>\r\n          <span\r\n            className={\"spinner-border spinner-border-md mr-3 \" + (disableMineBtn ? \"visible\" : \"invisible\")}\r\n            role=\"status\"\r\n          />\r\n        </h4>\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Block from \"../components/Block/Block\";\r\nimport BlockTrans from \"../components/Block/BlockTrans\";\r\nimport Statistics from \"../components/Block/Statistics\";\r\nimport NavMenu from \"../components/NavMenu/NavMenu\";\r\nimport { useAppContext } from \"../hooks/useAppContext\";\r\nimport { BlockContainer } from \"../styles/BlockStyles\";\r\n\r\nexport default function Chain(): JSX.Element {\r\n  const { state } = useAppContext();\r\n\r\n  return (\r\n    <div>\r\n      <NavMenu />\r\n\r\n      <div className=\"mx-3 row flex-nowrap overflow-auto\">\r\n        {state.chain.map((block) => (\r\n          <BlockContainer\r\n            className=\"mx-2 flex-column flex-shrink-0\"\r\n            role=\"list\"\r\n            aria-label=\"Block Container\"\r\n            key={block.prevHash}\r\n          >\r\n            <Block chain={true} index={block.index} />\r\n            <Statistics chain={true} index={block.index} />\r\n            {block.showTrans && <BlockTrans index={block.index} />}\r\n          </BlockContainer>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Form, InputGroup } from \"react-bootstrap\";\r\nimport { ACTIONS } from \"../../enums/AppDispatchActions\";\r\nimport { useAppContext } from \"../../hooks/useAppContext\";\r\nimport { ITransaction } from \"../../typings/AppTypes\";\r\nimport { calculateMerkleTreeFormation, getMerkleRoot } from \"../../utils/merkleTree\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport { TransItem, TransList } from \"../../styles/TransactionStyles\";\r\nimport { StyledInputGroupText } from \"../../styles/GlobalStyles\";\r\n\r\nexport default function TransactionItems(): JSX.Element {\r\n  const { state, dispatch } = useAppContext();\r\n\r\n  async function selectTransaction(transaction: ITransaction): Promise<void> {\r\n    let selectedTrans: ITransaction[] = JSON.parse(JSON.stringify(state.selectedTrans));\r\n    const signatures = selectedTrans.map((x) => x.signature);\r\n    const included = signatures.includes(transaction.signature);\r\n\r\n    if (selectedTrans.length < 4 || included) {\r\n      // if just selected - push onto stack, else remove it\r\n      // adjust backgrounds according to selection/deselection\r\n      if (!included) {\r\n        selectedTrans.push(transaction);\r\n      } else {\r\n        selectedTrans = selectedTrans.filter((x) => x.signature !== transaction.signature);\r\n      }\r\n\r\n      const newTree = await calculateMerkleTreeFormation(state.verifiedTrans, selectedTrans);\r\n      const newPreview = {\r\n        ...state.preview,\r\n        merkleRoot: getMerkleRoot(newTree),\r\n        valid: false\r\n      };\r\n\r\n      dispatch({ type: ACTIONS.UPDATE_SELECTED_TRANS, payload: { selectedTrans } });\r\n      dispatch({ type: ACTIONS.UPDATE_PREVIEW, payload: { preview: newPreview } });\r\n    } else {\r\n      alert(\"You can mine at most 4 transactions at a time!\");\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <h3 aria-label=\"Title\" className=\"font-weight-bold\">\r\n        Verified Transactions\r\n      </h3>\r\n      <TransList className=\"row flex-nowrap overflow-auto bg-dark mx-1 px-2 rounded\">\r\n        {state.verifiedTrans.map((transaction) => {\r\n          const isSelected = state.selectedTrans.map((x) => x.signature).includes(transaction.signature);\r\n          return (\r\n            <ThemeProvider theme={{ selected: isSelected }} key={`sig:${transaction.signature}`}>\r\n              <TransItem\r\n                aria-label={\"Transaction Information\" + (isSelected ? \" Selected\" : \"\")}\r\n                onClick={() => selectTransaction(transaction)}\r\n              >\r\n                <Form.Group className=\"mb-2 text-center\">\r\n                  <Form.Control\r\n                    aria-label=\"Transaction From\"\r\n                    name=\"from\"\r\n                    className=\"text-truncate\"\r\n                    type=\"text\"\r\n                    defaultValue={transaction.from}\r\n                    readOnly\r\n                  />\r\n                  <h3 className=\"my-0\">↓</h3>\r\n                  <Form.Control\r\n                    aria-label=\"Transaction To\"\r\n                    name=\"to\"\r\n                    className=\"text-truncate\"\r\n                    type=\"text\"\r\n                    defaultValue={transaction.to}\r\n                    readOnly\r\n                  />\r\n                </Form.Group>\r\n\r\n                <InputGroup className=\"mb-2\">\r\n                  <InputGroup.Prepend>\r\n                    <StyledInputGroupText>Msg</StyledInputGroupText>\r\n                  </InputGroup.Prepend>\r\n                  <Form.Control\r\n                    aria-label=\"Transaction Message\"\r\n                    name=\"msg\"\r\n                    as=\"textarea\"\r\n                    defaultValue={transaction.msg}\r\n                    readOnly\r\n                  />\r\n                </InputGroup>\r\n\r\n                <InputGroup className=\"mb-2\">\r\n                  <Form.Control\r\n                    aria-label=\"Transaction Amount\"\r\n                    name=\"amount\"\r\n                    type=\"number\"\r\n                    defaultValue={transaction.amount}\r\n                    disabled\r\n                  />\r\n                  <InputGroup.Append>\r\n                    <StyledInputGroupText>LC</StyledInputGroupText>\r\n                  </InputGroup.Append>\r\n                </InputGroup>\r\n\r\n                <InputGroup>\r\n                  <InputGroup.Prepend>\r\n                    <StyledInputGroupText>Sig</StyledInputGroupText>\r\n                  </InputGroup.Prepend>\r\n                  <Form.Control\r\n                    aria-label=\"Transaction Signature\"\r\n                    name=\"signature\"\r\n                    className=\"text-truncate\"\r\n                    type=\"text\"\r\n                    defaultValue={transaction.signature}\r\n                    readOnly\r\n                  />\r\n                </InputGroup>\r\n              </TransItem>\r\n            </ThemeProvider>\r\n          );\r\n        })}\r\n      </TransList>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useRef } from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport { useAppContext } from \"../../hooks/useAppContext\";\r\nimport { useDrawPreviewTree } from \"../../hooks/useDrawPreviewTree\";\r\nimport { IStyledTableDataProps, StyledTableData } from \"../../styles/BlockStyles\";\r\n\r\nexport default function PreviewTree(): JSX.Element {\r\n  const { state } = useAppContext();\r\n\r\n  const numCells = useRef<number>(9);\r\n  const strLen = useRef<number>(20);\r\n  const tree = useDrawPreviewTree(state.verifiedTrans, state.selectedTrans);\r\n\r\n  // https://stackoverflow.com/a/1199420/4298115\r\n  function truncate(str: string, n = strLen.current): string {\r\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n  }\r\n\r\n  function getText(rowNum: number, index: number, isTitle: boolean): string {\r\n    let text = \"\";\r\n\r\n    switch (rowNum) {\r\n      case 0: {\r\n        if (index === Math.floor(numCells.current / 2)) {\r\n          text = isTitle ? tree[tree.length - 1][0] : truncate(tree[tree.length - 1][0]);\r\n        }\r\n        break;\r\n      }\r\n\r\n      case 1: {\r\n        if (index === numCells.current / 3 - 1) {\r\n          text = isTitle ? tree[tree.length - 2][0] : truncate(tree[tree.length - 2][0]);\r\n        } else if (index === (numCells.current / 3) * 2) {\r\n          text = isTitle ? tree[tree.length - 2][1] : truncate(tree[tree.length - 2][1]);\r\n        }\r\n        break;\r\n      }\r\n\r\n      case 2: {\r\n        if (index === 0) {\r\n          text = isTitle ? tree[0][0] : truncate(tree[0][0]);\r\n        } else if (index === numCells.current / 3 - 1) {\r\n          text = isTitle ? tree[0][1] : truncate(tree[0][1]);\r\n        } else if (index === (numCells.current / 3) * 2) {\r\n          text = isTitle ? tree[0][2] : truncate(tree[0][2]);\r\n        } else if (index === numCells.current - 1) {\r\n          text = isTitle ? tree[0][3] : truncate(tree[0][3]);\r\n        }\r\n        break;\r\n      }\r\n\r\n      // no default\r\n    }\r\n\r\n    return text;\r\n  }\r\n\r\n  function getClassName(rowNum: number, index: number): IStyledTableDataProps {\r\n    let type = {\r\n      rootCell: false,\r\n      middleCells: false,\r\n      dataCells: false,\r\n      diagRightLine: false,\r\n      diagLeftLine: false,\r\n      normalLine: false\r\n    };\r\n\r\n    switch (rowNum) {\r\n      case 0:\r\n        type = { ...type, rootCell: index === Math.floor(numCells.current / 2) };\r\n        break;\r\n\r\n      case 1: {\r\n        type = { ...type, diagLeftLine: index === numCells.current / 3 };\r\n        type = { ...type, diagRightLine: index === (2 * numCells.current) / 3 - 1 };\r\n        break;\r\n      }\r\n\r\n      case 2: {\r\n        const isCorrectColumn = [numCells.current / 3 - 1, (2 * numCells.current) / 3].includes(index);\r\n        type = { ...type, dataCells: isCorrectColumn && tree.length <= 2 };\r\n        type = { ...type, middleCells: isCorrectColumn && tree.length > 2 };\r\n        break;\r\n      }\r\n\r\n      case 3: {\r\n        type = { ...type, diagLeftLine: index === 1 };\r\n        type = { ...type, diagRightLine: index === numCells.current - 2 && tree[0].length === 4 };\r\n        type = { ...type, normalLine: [numCells.current / 3 - 1, (numCells.current / 3) * 2].includes(index) };\r\n        break;\r\n      }\r\n\r\n      case 4: {\r\n        const isCorrectColumn = [0, numCells.current / 3 - 1, (numCells.current / 3) * 2].includes(index);\r\n        type = { ...type, dataCells: isCorrectColumn || (numCells.current - 1 === index && tree[0].length === 4) };\r\n        break;\r\n      }\r\n\r\n      // no default\r\n    }\r\n\r\n    return type;\r\n  }\r\n\r\n  return (\r\n    <div className=\"w-100 my-3 text-center\">\r\n      <h3 className=\"font-weight-bold\">Merkle Tree Visualization</h3>\r\n      {tree[tree.length - 1][0] !== \"\" ? (\r\n        <Table\r\n          role=\"grid\"\r\n          aria-label=\"Preview Table\"\r\n          className=\"w-75 mx-auto my-1 text-center border\"\r\n          responsive\r\n          size=\"sm\"\r\n        >\r\n          <tbody role=\"presentation\">\r\n            <tr>\r\n              {Array.from({ length: numCells.current }).map((_, i) => (\r\n                <StyledTableData key={\"first-data-row-\" + i} type={getClassName(0, i)} title={getText(0, i, true)}>\r\n                  {getText(0, i, false)}\r\n                </StyledTableData>\r\n              ))}\r\n            </tr>\r\n            {tree.length >= 2 && (\r\n              <>\r\n                <tr>\r\n                  {Array.from({ length: numCells.current }).map((_, i) => (\r\n                    <StyledTableData key={\"first-break-row-\" + i} type={getClassName(1, i)} />\r\n                  ))}\r\n                </tr>\r\n                <tr>\r\n                  {Array.from({ length: numCells.current }).map((_, i) => (\r\n                    <StyledTableData key={\"second-data-row-\" + i} type={getClassName(2, i)} title={getText(1, i, true)}>\r\n                      {getText(1, i, false)}\r\n                    </StyledTableData>\r\n                  ))}\r\n                </tr>\r\n              </>\r\n            )}\r\n            {tree.length === 3 && (\r\n              <>\r\n                <tr>\r\n                  {Array.from({ length: numCells.current }).map((_, i) => (\r\n                    <StyledTableData key={\"second-break-row-\" + i} type={getClassName(3, i)} />\r\n                  ))}\r\n                </tr>\r\n                <tr>\r\n                  {Array.from({ length: numCells.current }).map((_, i) => (\r\n                    <StyledTableData key={\"third-data-row-\" + i} type={getClassName(4, i)} title={getText(2, i, true)}>\r\n                      {getText(2, i, false)}\r\n                    </StyledTableData>\r\n                  ))}\r\n                </tr>\r\n              </>\r\n            )}\r\n          </tbody>\r\n        </Table>\r\n      ) : (\r\n        <p className=\"my-3 border w-75 mx-auto\">Please select a verified transaction from above...</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { ITransaction } from \"../typings/AppTypes\";\r\nimport { calculateMerkleTreeFormation } from \"../utils/merkleTree\";\r\n\r\nexport function useDrawPreviewTree(verified: ITransaction[], selected: ITransaction[]): string[][] {\r\n  const [tree, setTree] = useState<string[][]>([[\"\"]]);\r\n\r\n  useEffect(() => {\r\n    async function drawTree() {\r\n      const newTree = await calculateMerkleTreeFormation(verified, selected);\r\n      setTree(newTree);\r\n    }\r\n\r\n    drawTree();\r\n  }, [verified, selected]);\r\n\r\n  return tree;\r\n}\r\n","import React from \"react\";\r\n\r\nimport NavMenu from \"../components/NavMenu/NavMenu\";\r\nimport Block from \"../components/Block/Block\";\r\nimport TransactionItems from \"../components/Transaction/TransactionItems\";\r\nimport PreviewTree from \"../components/Block/PreviewTree\";\r\nimport Statistics from \"../components/Block/Statistics\";\r\n\r\nexport default function Mine(): JSX.Element {\r\n  return (\r\n    <div>\r\n      <NavMenu />\r\n      <TransactionItems />\r\n      <div className=\"container-fluid row d-flex justify-content-center mx-auto my-3\">\r\n        <PreviewTree />\r\n        <Statistics chain={false} index={0} />\r\n        <Block chain={false} index={0} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { ACTIONS } from \"../enums/AppDispatchActions\";\r\nimport { IAction, IState, IUser, ITransaction, IBlock, IMainUser } from \"../typings/AppTypes\";\r\n\r\nexport const AppReducer = (state: IState, action: IAction): IState => {\r\n  switch (action.type) {\r\n    case ACTIONS.ADD_VERIFIED_TRANS: {\r\n      const { trans } = action.payload as { trans: ITransaction };\r\n      const verifiedTrans = [...state.verifiedTrans, { ...trans }];\r\n      localStorage.setItem(\"verTrans\", JSON.stringify(verifiedTrans, null, 2));\r\n      return { ...state, verifiedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_VERIFIED_TRANS: {\r\n      const selectedTransSignatures = state.selectedTrans.map((x) => x.signature);\r\n      const verifiedTrans = state.verifiedTrans.filter((x) => !selectedTransSignatures.includes(x.signature));\r\n      localStorage.setItem(\"verTrans\", JSON.stringify(verifiedTrans, null, 2));\r\n      return { ...state, verifiedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_SELECTED_TRANS: {\r\n      const { selectedTrans } = action.payload as { selectedTrans: ITransaction[] };\r\n      localStorage.setItem(\"selTrans\", JSON.stringify(selectedTrans, null, 2));\r\n      return { ...state, selectedTrans };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_USERS: {\r\n      const { users } = action.payload as { users: IUser[] };\r\n      localStorage.setItem(\"users\", JSON.stringify(users, null, 2));\r\n      return { ...state, users };\r\n    }\r\n\r\n    case ACTIONS.SET_MAIN_USER: {\r\n      const { user } = action.payload as { user: IMainUser };\r\n      localStorage.setItem(\"user\", JSON.stringify(user, null, 2));\r\n      return { ...state, user };\r\n    }\r\n\r\n    case ACTIONS.ADD_BLOCK: {\r\n      const { block } = action.payload as { block: IBlock };\r\n      const chain = [...state.chain, { ...block }];\r\n      localStorage.setItem(\"chain\", JSON.stringify(chain, null, 2));\r\n      return { ...state, chain };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_BLOCK: {\r\n      const { block } = action.payload as { block: IBlock | IBlock[] };\r\n      const blocks = Array.isArray(block) ? [...block] : [block];\r\n      const chain = [...state.chain];\r\n\r\n      blocks.forEach((b) => (chain[b.index] = { ...b }));\r\n\r\n      localStorage.setItem(\"chain\", JSON.stringify(chain, null, 2));\r\n      return { ...state, chain };\r\n    }\r\n\r\n    case ACTIONS.UPDATE_PREVIEW: {\r\n      const { preview } = action.payload as { preview: IBlock };\r\n      localStorage.setItem(\"preview\", JSON.stringify(preview, null, 2));\r\n      return { ...state, preview: { ...preview } };\r\n    }\r\n\r\n    case ACTIONS.ASSIGN_COPIED: {\r\n      const { copied } = action.payload as { copied: string };\r\n      localStorage.setItem(\"copied\", copied);\r\n      return { ...state, copied };\r\n    }\r\n\r\n    case ACTIONS.SET_SIGNED: {\r\n      const { signed, sent } = action.payload as { signed: boolean; sent?: boolean };\r\n      const newSent = sent !== undefined ? sent : !signed;\r\n      const wallet = { ...state.wallet, signed, sent: newSent };\r\n      localStorage.setItem(\"wallet\", JSON.stringify(wallet, null, 2));\r\n      return { ...state, wallet };\r\n    }\r\n\r\n    case ACTIONS.SET_VALIDATED: {\r\n      const { validated } = action.payload as { validated: boolean };\r\n      localStorage.setItem(\"wallet\", JSON.stringify({ ...state.wallet, validated }, null, 2));\r\n      return { ...state, wallet: { ...state.wallet, validated } };\r\n    }\r\n\r\n    case ACTIONS.SET_DETAILS: {\r\n      const { details } = action.payload as { details: ITransaction };\r\n      localStorage.setItem(\"wallet\", JSON.stringify({ ...state.wallet, details }, null, 2));\r\n      return { ...state, wallet: { ...state.wallet, details } };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { useMemo, useReducer } from \"react\";\r\nimport { Route, BrowserRouter as Router, Redirect } from \"react-router-dom\";\r\nimport logger from \"use-reducer-logger\";\r\n\r\nimport Wallet from \"../../pages/Wallet\";\r\nimport Chain from \"../../pages/Chain\";\r\nimport Mine from \"../../pages/Mine\";\r\n\r\nimport { AppReducer } from \"../../reducers/AppReducer\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\n\r\nimport { GlobalStyle } from \"../../styles/GlobalStyles\";\r\n\r\nexport default function App(): JSX.Element {\r\n  const [state, dispatch] = useReducer(process.env.NODE_ENV === \"development\" ? logger(AppReducer) : AppReducer, {\r\n    verifiedTrans: JSON.parse(localStorage.getItem(\"verTrans\") as string) ?? [],\r\n    selectedTrans: JSON.parse(localStorage.getItem(\"selTrans\") as string) ?? [],\r\n    users: JSON.parse(localStorage.getItem(\"users\") as string) ?? [],\r\n    user: JSON.parse(localStorage.getItem(\"user\") as string) ?? { publicKey: \"\", privateKey: \"\", balance: 1000.0 },\r\n    chain: JSON.parse(localStorage.getItem(\"chain\") as string) ?? [\r\n      {\r\n        index: 0,\r\n        prevHash: \"\",\r\n        currHash: new Array(64).fill(\"0\").join(\"\"),\r\n        transactions: [],\r\n        timestamp: Date.parse(\"31 Apr 2021 00:00:00 UTC\"),\r\n        merkleRoot: \"\",\r\n        valid: true\r\n      }\r\n    ],\r\n    copied: \"\",\r\n    preview: JSON.parse(localStorage.getItem(\"preview\") as string) ?? {\r\n      index: 1,\r\n      prevHash: new Array(64).fill(\"0\").join(\"\"),\r\n      currHash: \"\",\r\n      transactions: [],\r\n      timestamp: Date.parse(\"31 Apr 2021 00:00:00 UTC\"),\r\n      merkleRoot: \"\",\r\n      valid: false\r\n    },\r\n    wallet: JSON.parse(localStorage.getItem(\"wallet\") as string) ?? {\r\n      sent: false,\r\n      signed: false,\r\n      validated: false,\r\n      details: { from: \"\", to: \"\", amount: (0).toFixed(2), msg: \"\", signature: \"\" }\r\n    }\r\n  });\r\n\r\n  // prevent re-rendering children when App re-renders\r\n  const value = useMemo(() => ({ state, dispatch }), [state, dispatch]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <GlobalStyle />\r\n      <Router basename={\"/LibraCoin\"}>\r\n        <AppContext.Provider value={value}>\r\n          <Route exact path=\"/\">\r\n            <Redirect to=\"/wallet\" />\r\n          </Route>\r\n          <Route path=\"/wallet\" component={Wallet} />\r\n          <Route path=\"/mine\" component={Mine} />\r\n          <Route path=\"/blockchain\" component={Chain} />\r\n        </AppContext.Provider>\r\n      </Router>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./components/App/App\";\r\nimport \"bootstrap/scss/bootstrap.scss\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}