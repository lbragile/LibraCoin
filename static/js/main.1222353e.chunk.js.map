{"version":3,"sources":["components/Navbar/NavbarUI.tsx","components/Transaction/TransactionUI.tsx","components/User/UserUI.tsx","components/Block/block_class.ts","components/Transaction/transaction_class.ts","components/Chain/chain_class.ts","components/Wallet/Wallet_class.ts","components/Wallet/WalletUI.tsx","components/Block/BlockUI.tsx","components/Chain/ChainUI.tsx","components/Mine/MineUI.tsx","components/App/App.tsx","index.tsx"],"names":["NavbarUI","Navbar","bg","expand","className","Brand","href","src","width","Toggle","aria-controls","Collapse","id","Nav","Link","active","location","includes","TransactionUI","useState","show","setShow","validated","setValidated","onClick","Modal","centered","backdrop","onHide","Header","closeButton","Body","Form","noValidate","onSubmit","e","currentTarget","checkValidity","preventDefault","stopPropagation","Group","controlId","Label","Control","type","defaultValue","JSON","parse","localStorage","getItem","publicKey","Text","pattern","required","Feedback","InputGroup","placeholder","onBlur","userBalance","balance","target","value","Math","min","max","toFixed","toString","checkAmount","Prepend","privateKey","Button","variant","block","UserUI","users","copied","setCopied","modalText","useRef","index","map","user","i","current","showUserDetails","random","Title","onFocus","select","setSelectionRange","document","execCommand","copyPublicKey","isValid","Block","prevHash","currHash","transactions","timestamp","Date","now","this","Transaction","amount","from","to","message","Chain","genericCryptoKey","extractable","algorithm","name","usages","genesisTransaction","genesisPrevHash","Array","fill","join","genesisCurrHash","randomHash","replace","length","push","len","bufferToHex","window","crypto","getRandomValues","Uint32Array","a","msgUint8","TextEncoder","encode","subtle","digest","hashBuffer","nonce","leadingZeros","console","log","candidateSolution","Number","MAX_SAFE_INTEGER","digestMessage","substr","split","every","bit","transaction","signature","data","stringToArrayBuffer","stringify","verify","hash","addBlock","numZeros","round","targetHash","re","RegExp","zerosStr","targetStr","mine","newHash","newBlock","lastBlock","str","buf","ArrayBuffer","bufView","Uint16Array","strLen","charCodeAt","Uint8Array","b","padStart","instance","Wallet","generateKey","namedCurve","keyPair","sign","verifyTransaction","alert","format","key","exportKey","WalletUI","setUsers","addUser","initialize","CryptoKeyToHex","publicKeyStr","privateKeyStr","innerText","newUsers","setItem","isPublic","as","rows","ref","BlockUI","details","blockItem","ChainUI","MineUI","minedBlock","stats","solution","App","basename","path","component","exact","ReactDOM","render","StrictMode","getElementById"],"mappings":"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CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,OAElB,CACErB,MAAO,EACPgB,SAAU,GACVC,SAAU,8CACVC,aAAc,GACdC,UAAWC,KAAKC,a,MC9Pb,SAAS0G,IACtB,IAAMC,EAAajI,iBAAe,CAChCC,MAAO,EACPmB,UAAWC,KAAKC,MAChBL,SAAU,uBACVC,SAAU,wBACVC,aAAc,KAGV+G,EAAQlI,iBAAe,CAAE0D,MAAO,IAAK5E,OAAQ,0BAA2BqJ,SAAU,0BAExF,OACE,sBAAK7M,UAAU,kBAAf,UACE,cAACJ,EAAD,IAEA,qBAAKY,GAAG,uBAAR,SACE,0DAGF,sBAAKR,UAAU,MAAf,UACE,sBAAKQ,GAAG,wBAAR,UACE,sBAAKA,GAAG,aAAR,UACE,8BACE,uCADF,IACiBoM,EAAM7H,QAAQqD,SAE/B,8BACE,wCADF,IACkBwE,EAAM7H,QAAQvB,UAEhC,8BACE,0CADF,IACoBoJ,EAAM7H,QAAQ8H,eAIpC,cAAC3I,EAAA,EAAD,CAAQC,QAAQ,UAAU3D,GAAG,iBAA7B,qBAKF,sBAAKA,GAAG,cAAcR,UAAU,cAAhC,UACE,cAACkE,EAAA,EAAD,CAAQC,QAAQ,UAAU3D,GAAG,iBAA7B,eAGA,8BACE,uCADF,IACiBmM,EAAW5H,QAAQJ,SAEpC,8BACE,2CADF,IACqBgI,EAAW5H,QAAQe,aAExC,8BACE,+CADF,IACyB6G,EAAW5H,QAAQY,YAE5C,8BACE,8CADF,IACwBgH,EAAW5H,QAAQa,YAE3C,8BACE,6CADF,IACuB,oC,YC1DlB,SAASkH,IACtB,OACE,eAAC,IAAD,CAAQC,SAAU,aAAlB,UACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWzB,EAAU0B,OAAK,IAC1C,cAAC,IAAD,CAAOF,KAAK,UAAUC,UAAWzB,IACjC,cAAC,IAAD,CAAOwB,KAAK,QAAQC,UAAWP,IAC/B,cAAC,IAAD,CAAOM,KAAK,cAAcC,UAAWR,OCZ3CU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/H,SAASgI,eAAe,W","file":"static/js/main.1222353e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\n\r\nimport \"./Navbar.css\";\r\n\r\nexport default function NavbarUI(): JSX.Element {\r\n  return (\r\n    <Navbar bg=\"none\" expand=\"lg\" className=\"mb-3\">\r\n      <Navbar.Brand href=\"https://github.com/lbragile/LibraCoin\">\r\n        <img src=\"./assets/libracoin-logo-256.png\" width=\"64\" />\r\n      </Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\">\r\n          <Nav.Link href=\"/LibraCoin/wallet\" active={location.href.includes(\"/wallet\")}>\r\n            Wallet\r\n          </Nav.Link>\r\n          <Nav.Link href=\"/LibraCoin/mine\" active={location.href.includes(\"/mine\")}>\r\n            Mine\r\n          </Nav.Link>\r\n          <Nav.Link href=\"/LibraCoin/blockchain\" active={location.href.includes(\"/blockchain\")}>\r\n            Blockchain\r\n          </Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nimport { Modal, Form, Button, InputGroup } from \"react-bootstrap\";\r\n\r\nexport default function TransactionUI(): JSX.Element {\r\n  const [show, setShow] = useState<boolean>(false);\r\n  const [validated, setValidated] = useState<boolean>(false);\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    const form = e.currentTarget;\r\n    if (form.checkValidity() === false) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n    }\r\n\r\n    setValidated(true);\r\n  };\r\n\r\n  function checkAmount(e: React.ChangeEvent<HTMLInputElement>): void {\r\n    const userBalance = JSON.parse(localStorage.getItem(\"user\") as string)?.balance || 1000;\r\n    e.target.value = Math.min(Math.max(0.1, +e.target.value), userBalance)\r\n      .toFixed(2)\r\n      .toString();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button className=\"font-weight-bold btn btn-info p-3 my-5\" onClick={() => setShow(true)}>\r\n        Make Transaction\r\n      </button>\r\n      <Modal show={show} centered backdrop=\"static\" onHide={() => setShow(false)}>\r\n        <Modal.Header closeButton>\r\n          <h4>LibraCoin Transaction</h4>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form noValidate validated={validated} onSubmit={handleSubmit}>\r\n            <Form.Group controlId=\"TransFrom\">\r\n              <Form.Label>\r\n                <b>From:</b>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                defaultValue={JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey || \"\"}\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                Your public key → used to verify transaction was signed using your private key\r\n              </Form.Text>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"TransTo\">\r\n              <Form.Label>\r\n                <b>To:</b>\r\n              </Form.Label>\r\n              <Form.Control type=\"text\" pattern=\"[A-Za-z0-9]{182,182}\" required />\r\n              <Form.Control.Feedback type=\"invalid\">\r\n                Must be of the same format as your public key\r\n              </Form.Control.Feedback>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"TransAmount\">\r\n              <Form.Label>\r\n                <b>Amount:</b>\r\n              </Form.Label>\r\n              <InputGroup className=\"mb-2\">\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"1.00\"\r\n                  onBlur={(e: React.ChangeEvent<HTMLInputElement>) => checkAmount(e)}\r\n                  required\r\n                />\r\n                <InputGroup.Prepend>\r\n                  <InputGroup.Text>LC</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n              </InputGroup>\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"TransPrivate\">\r\n              <Form.Label>\r\n                <b>Private Key:</b>\r\n              </Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                defaultValue={JSON.parse(localStorage.getItem(\"user\") as string)?.privateKey || \"\"}\r\n                required\r\n              />\r\n              <Form.Text className=\"text-muted\">This is not shared with anyone, keep this secret!</Form.Text>\r\n            </Form.Group>\r\n\r\n            <Button variant=\"primary\" type=\"submit\" block>\r\n              Sign\r\n            </Button>\r\n          </Form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useRef } from \"react\";\r\nimport { Form, Modal } from \"react-bootstrap\";\r\n\r\nimport \"./User.css\";\r\n\r\ninterface IUser {\r\n  publicKey: string;\r\n  balance: number;\r\n  index?: number;\r\n}\r\n\r\nexport default function UserUI({ users }: { users: IUser[] }): JSX.Element {\r\n  const [show, setShow] = useState(false);\r\n  const [copied, setCopied] = useState(false);\r\n  const modalText = useRef<IUser>({ index: 0, publicKey: \"\", balance: 0 });\r\n\r\n  function showUserDetails(user: IUser, index: number): void {\r\n    modalText.current = { ...user, index };\r\n    setShow(true);\r\n  }\r\n\r\n  function copyPublicKey(e: React.FocusEvent<HTMLInputElement>): void {\r\n    e.target.select();\r\n    e.target.setSelectionRange(0, 99999);\r\n    document.execCommand(\"copy\");\r\n    setCopied(true);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h3>\r\n          <b>Users:</b>\r\n        </h3>\r\n        <div id=\"user-list-background\">\r\n          {users.map((user, i) => {\r\n            return (\r\n              <div className=\"user-item ml-3 col-1\" onClick={() => showUserDetails(user, i)} key={Math.random()}>\r\n                <p className=\"user-item-index-text\">\r\n                  <b>{i}</b>\r\n                </p>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n\r\n      <Modal show={show} centered onHide={() => setShow(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>User {modalText.current.index} Details</Modal.Title>{\" \"}\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <div>\r\n            <h5>Public Key:</h5>\r\n            <Form.Control\r\n              type=\"text\"\r\n              className=\"text-truncate\"\r\n              onFocus={(e: React.FocusEvent<HTMLInputElement>) => copyPublicKey(e)}\r\n              value={modalText.current.publicKey}\r\n              isValid={copied}\r\n            />\r\n            <Form.Control.Feedback type=\"valid\">Copied to clipboard</Form.Control.Feedback>\r\n          </div>\r\n\r\n          <div className=\"mt-4\">\r\n            <h5>Balance:</h5>\r\n            {modalText.current.balance.toFixed(2)} LC\r\n          </div>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\n// for testing\r\n// users = [\r\n//   { publicKey: \"a\", balance: 0 },\r\n//   { publicKey: \"b\", balance: 1 },\r\n//   { publicKey: \"c\", balance: 2 },\r\n//   { publicKey: \"d\", balance: 3 },\r\n//   { publicKey: \"e\", balance: 4 },\r\n//   { publicKey: \"f\", balance: 5 },\r\n//   { publicKey: \"g\", balance: 6 },\r\n//   { publicKey: \"h\", balance: 7 },\r\n//   { publicKey: \"i\", balance: 8 },\r\n//   { publicKey: \"j\", balance: 9 },\r\n//   { publicKey: \"k\", balance: 10 },\r\n//   { publicKey: \"l\", balance: 11 },\r\n//   { publicKey: \"m\", balance: 12 },\r\n//   { publicKey: \"n\", balance: 13 },\r\n//   { publicKey: \"o\", balance: 14 },\r\n// ];\r\n","import { Transaction } from \"../Transaction/transaction_class\";\r\n\r\nexport class Block {\r\n  index: number;\r\n  prevHash: string;\r\n  currHash: string;\r\n  transactions: Transaction[];\r\n  timestamp = Date.now();\r\n\r\n  constructor(index: number, prevHash: string, currHash: string, transactions: Transaction[]) {\r\n    this.index = index;\r\n    this.prevHash = prevHash;\r\n    this.currHash = currHash;\r\n    this.transactions = transactions;\r\n  }\r\n}\r\n","export class Transaction {\r\n  amount: number;\r\n  from: CryptoKey;\r\n  to: CryptoKey;\r\n  message?: string;\r\n\r\n  constructor(amount: number, from: CryptoKey, to: CryptoKey, message?: string) {\r\n    this.amount = amount;\r\n    this.from = from;\r\n    this.to = to;\r\n    this.message = message;\r\n  }\r\n}\r\n","import { Block } from \"../Block/block_class\";\r\nimport { Transaction } from \"../Transaction/transaction_class\";\r\nimport { Wallet } from \"../Wallet/Wallet_class\";\r\n\r\nexport class Chain {\r\n  #chain: Block[];\r\n  #verifiedTransactions: Transaction[];\r\n  #BLOCK_LIMIT = 2;\r\n  #users: Wallet[];\r\n\r\n  static instance = new Chain();\r\n\r\n  static stringToArrayBuffer(str: string): ArrayBuffer {\r\n    const buf = new ArrayBuffer(str.length * 2); // 2 bytes for each char\r\n    const bufView = new Uint16Array(buf);\r\n    for (let i = 0, strLen = str.length; i < strLen; i++) {\r\n      bufView[i] = str.charCodeAt(i);\r\n    }\r\n    return buf;\r\n  }\r\n\r\n  static bufferToHex(hashBuffer: ArrayBuffer): string {\r\n    const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array\r\n    const hashHex = hashArray.map((b) => b.toString(16).padStart(2, \"0\")).join(\"\"); // convert bytes to hex string\r\n    return hashHex;\r\n  }\r\n\r\n  constructor() {\r\n    const genericCryptoKey = {\r\n      type: \"public\",\r\n      extractable: true,\r\n      algorithm: { name: \"ECDSA\" },\r\n      usages: [\"verify\"],\r\n    } as CryptoKey;\r\n\r\n    const genesisTransaction = [new Transaction(0, genericCryptoKey, genericCryptoKey)];\r\n    const genesisPrevHash = Array(64).fill(\"0\").join(\"\");\r\n    const genesisCurrHash = this.randomHash(32).replace(/^.{0,3}/, \"000\");\r\n    this.#chain = [new Block(0, genesisPrevHash, genesisCurrHash, genesisTransaction)];\r\n    this.#verifiedTransactions = [];\r\n    this.#users = [];\r\n  }\r\n\r\n  get blockChain(): Block[] {\r\n    return this.#chain;\r\n  }\r\n\r\n  get lastBlock(): Block {\r\n    return this.#chain[this.#chain.length - 1];\r\n  }\r\n\r\n  addUser(user: Wallet): void {\r\n    this.#users.push(user);\r\n  }\r\n\r\n  randomHash(len: number): string {\r\n    return Chain.bufferToHex(window.crypto.getRandomValues(new Uint32Array(len)));\r\n  }\r\n\r\n  async digestMessage(message: string): Promise<string> {\r\n    const msgUint8 = new TextEncoder().encode(message); // encode as (utf-8) Uint8Array\r\n    const hashBuffer = await window.crypto.subtle.digest(\"SHA-256\", msgUint8); // hash the message\r\n    return Chain.bufferToHex(hashBuffer);\r\n  }\r\n\r\n  async mine(nonce: number, leadingZeros: number): Promise<string> {\r\n    console.log(\"⚒ mining...\");\r\n\r\n    let candidateSolution = \"\";\r\n    while (nonce <= Number.MAX_SAFE_INTEGER) {\r\n      candidateSolution = await this.digestMessage(nonce.toString());\r\n\r\n      const leadingBits = candidateSolution.substr(0, leadingZeros).split(\"\");\r\n      if (leadingBits.every((bit) => bit === \"0\")) {\r\n        console.log(`Solved: ${nonce}`);\r\n        break;\r\n      }\r\n\r\n      nonce++;\r\n    }\r\n\r\n    return candidateSolution;\r\n  }\r\n\r\n  async verifyTransaction(transaction: Transaction, signature: ArrayBuffer): Promise<boolean> {\r\n    const data = Chain.stringToArrayBuffer(JSON.stringify(transaction));\r\n    const isValid = await crypto.subtle.verify({ name: \"ECDSA\", hash: \"SHA-256\" }, transaction.from, signature, data);\r\n\r\n    if (isValid) {\r\n      this.#verifiedTransactions.push(transaction);\r\n      console.log(\"✅ Verified Transaction!\");\r\n      console.log(`Transaction Pool Now Has ${this.#verifiedTransactions.length} Verified Transactions`);\r\n    }\r\n\r\n    if (this.#verifiedTransactions.length === this.#BLOCK_LIMIT) {\r\n      await this.addBlock(this.#verifiedTransactions);\r\n      this.#verifiedTransactions = []; // empty the verified transaction pool\r\n    }\r\n\r\n    return isValid;\r\n  }\r\n\r\n  async addBlock(transactions: Transaction[]): Promise<void> {\r\n    // new hash needs between 2 and 3 leading zeros\r\n    const numZeros = Math.round(Math.random() * 2) + 2;\r\n    const targetHash = await this.digestMessage(this.randomHash(20));\r\n\r\n    // replace leading bits with zeros\r\n    const re = new RegExp(`^.{0,${numZeros}}`, \"g\");\r\n    const zerosStr = Array(numZeros).fill(\"0\").join(\"\");\r\n    const targetStr = targetHash.replace(re, zerosStr);\r\n\r\n    // only add a block of transactions to the chain if it was mined successfully and the new hash is <= target\r\n    // eslint-disable-next-line no-constant-condition\r\n    while (true) {\r\n      const nonce = Math.round(Math.random() * 999999999);\r\n      const newHash = await this.mine(nonce, numZeros);\r\n\r\n      if (newHash <= targetStr) {\r\n        const newBlock = new Block(this.lastBlock.index + 1, this.lastBlock.currHash, newHash, transactions);\r\n        this.#chain.push(newBlock);\r\n        console.log(\"✨ Added Block To Chain\");\r\n        break;\r\n      } else {\r\n        console.log(\"❌ Failed Mining Below Target\");\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Chain } from \"../Chain/chain_class\";\r\nimport { Transaction } from \"../Transaction/transaction_class\";\r\n\r\nexport class Wallet {\r\n  publicKey: CryptoKey;\r\n  privateKey: CryptoKey;\r\n  balance: number;\r\n\r\n  constructor() {\r\n    this.publicKey = { type: \"public\", extractable: true, algorithm: { name: \"ECDSA\" }, usages: [\"verify\"] };\r\n    this.privateKey = { type: \"private\", extractable: true, algorithm: { name: \"ECDSA\" }, usages: [\"sign\"] };\r\n    this.balance = 1000;\r\n  }\r\n\r\n  async initialize(): Promise<void> {\r\n    const keyPair = await window.crypto.subtle.generateKey({ name: \"ECDSA\", namedCurve: \"P-256\" }, true, [\"sign\", \"verify\"]); // prettier-ignore\r\n    this.publicKey = keyPair.publicKey;\r\n    this.privateKey = keyPair.privateKey;\r\n  }\r\n\r\n  static async CryptoKeyToHex(format: string, key: CryptoKey): Promise<string> {\r\n    const buf = (await window.crypto.subtle.exportKey(format, key)) as ArrayBuffer;\r\n    return Chain.bufferToHex(buf);\r\n  }\r\n\r\n  getMessageEncoding(message: string): Uint8Array {\r\n    return new TextEncoder().encode(message);\r\n  }\r\n\r\n  async sendMoney(amount: number, to: CryptoKey, message?: string): Promise<void> {\r\n    if (amount <= this.balance) {\r\n      const transaction = new Transaction(amount, this.publicKey, to, message);\r\n      const data = Chain.stringToArrayBuffer(JSON.stringify(transaction));\r\n      const signature = await window.crypto.subtle.sign({ name: \"ECDSA\", hash: \"SHA-256\" }, this.privateKey, data);\r\n\r\n      const isValid = await Chain.instance.verifyTransaction(transaction, signature);\r\n\r\n      if (isValid) {\r\n        this.balance -= amount;\r\n      } else {\r\n        alert(\"Invalid transaction!\");\r\n      }\r\n    } else {\r\n      alert(\"Your balance is not high enough to cover this transaction.\");\r\n    }\r\n  }\r\n}\r\n","import React, { useRef, useState } from \"react\";\r\n\r\nimport { Button, Form } from \"react-bootstrap\";\r\n\r\nimport NavbarUI from \"../Navbar/NavbarUI\";\r\nimport TransactionUI from \"../Transaction/TransactionUI\";\r\nimport UserUI from \"../User/UserUI\";\r\nimport { Wallet } from \"../Wallet/Wallet_class\";\r\n\r\nimport \"./Wallet.css\";\r\n\r\nexport default function WalletUI(): JSX.Element {\r\n  const publicKey = useRef<HTMLTextAreaElement>(null);\r\n  const privateKey = useRef<HTMLTextAreaElement>(null);\r\n\r\n  const [copied, setCopied] = useState<boolean[]>([false, false]);\r\n  const [users, setUsers] = useState<{ publicKey: string; balance: number }[]>(\r\n    localStorage.getItem(\"users\") ? JSON.parse(localStorage.getItem(\"users\") as string) : []\r\n  );\r\n\r\n  const addUser = async () => {\r\n    const user = new Wallet();\r\n    await user.initialize();\r\n\r\n    const publicKeyStr = await Wallet.CryptoKeyToHex(\"spki\", user.publicKey);\r\n    const privateKeyStr = await Wallet.CryptoKeyToHex(\"pkcs8\", user.privateKey);\r\n    if (publicKey.current && privateKey.current) {\r\n      publicKey.current.innerText = publicKeyStr;\r\n      privateKey.current.innerText = new Array(privateKeyStr.length).fill(\"◦\").join(\"\");\r\n    }\r\n\r\n    const newUsers = [...users, { publicKey: publicKeyStr, balance: user.balance }];\r\n    localStorage.setItem(\"user\", JSON.stringify({ publicKey: publicKeyStr, privateKey: privateKeyStr, balance: user.balance })); // prettier-ignore\r\n    localStorage.setItem(\"users\", JSON.stringify(newUsers));\r\n    setUsers(newUsers);\r\n  };\r\n\r\n  function copyPublicKey(e: React.FocusEvent<HTMLTextAreaElement>, type: \"public\" | \"private\"): void {\r\n    e.target.select();\r\n    e.target.setSelectionRange(0, 99999);\r\n    document.execCommand(\"copy\");\r\n\r\n    const isPublic = type === \"public\";\r\n    setCopied([isPublic, !isPublic && !e.target.value.includes(\"◦\")]);\r\n  }\r\n\r\n  const togglePrivateKey = () => {\r\n    if (privateKey.current) {\r\n      if (privateKey.current.value.includes(\"◦\")) {\r\n        privateKey.current.value = JSON.parse(localStorage.getItem(\"user\") as string).privateKey;\r\n      } else {\r\n        privateKey.current.value = new Array(privateKey.current.value.length).fill(\"◦\").join(\"\");\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid my-3\">\r\n      <NavbarUI />\r\n\r\n      <div className=\"row\">\r\n        {!JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey ? (\r\n          <div className=\"col-2\">\r\n            <Button variant=\"primary\" className=\"p-3 font-weight-bold\" onClick={addUser}>\r\n              Create Wallet\r\n            </Button>\r\n          </div>\r\n        ) : (\r\n          <div className=\"col-1\"></div>\r\n        )}\r\n        <div className=\"col-5\">\r\n          <div className=\"user-key\">\r\n            <h3 className=\"mb-3\">Public Key:</h3>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              rows={7}\r\n              className=\"userKey\"\r\n              defaultValue={\r\n                localStorage.getItem(\"user\") && JSON.parse(localStorage.getItem(\"user\") as string).publicKey\r\n              }\r\n              isValid={copied[0]}\r\n              onFocus={(e: React.FocusEvent<HTMLTextAreaElement>) => copyPublicKey(e, \"public\")}\r\n              ref={publicKey}\r\n            />\r\n            <Form.Control.Feedback type=\"valid\">Copied to clipboard!</Form.Control.Feedback>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-5\">\r\n          <div className=\"user-key\">\r\n            <h3 className=\"mb-3\">\r\n              Private Key:{\" \"}\r\n              {JSON.parse(localStorage.getItem(\"user\") as string)?.publicKey && (\r\n                <span id=\"private-reveal-eyes\" onClick={togglePrivateKey}>\r\n                  👀\r\n                </span>\r\n              )}\r\n            </h3>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              rows={7}\r\n              className=\"userKey\"\r\n              defaultValue={\r\n                localStorage.getItem(\"user\")\r\n                  ? new Array(JSON.parse(localStorage.getItem(\"user\") as string).privateKey.length).fill(\"◦\").join(\"\")\r\n                  : \"\"\r\n              }\r\n              onFocus={(e: React.FocusEvent<HTMLTextAreaElement>) => copyPublicKey(e, \"private\")}\r\n              isValid={copied[1]}\r\n              ref={privateKey}\r\n            />\r\n            <Form.Control.Feedback type=\"valid\">Copied to clipboard!</Form.Control.Feedback>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <TransactionUI />\r\n      <UserUI users={users} />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useRef } from \"react\";\r\nimport { Transaction } from \"../Transaction/transaction_class\";\r\n\r\nimport { Modal, Form } from \"react-bootstrap\";\r\n\r\nimport \"./Block.css\";\r\nexport interface IBlock {\r\n  index: number;\r\n  prevHash: string;\r\n  currHash: string;\r\n  transactions: Transaction[];\r\n  timestamp: number;\r\n}\r\n\r\nexport default function BlockUI({ details }: { details: IBlock[] }): JSX.Element {\r\n  const [show, setShow] = useState<boolean>(false);\r\n  const blockItem = useRef<IBlock>({ index: 0, prevHash: \"\", currHash: \"\", transactions: [], timestamp: Date.now() });\r\n\r\n  return (\r\n    <div className=\"container-fluid mx-5 row\">\r\n      {details.map((block, i) => (\r\n        <div className=\"row block-and-chain my-2\" key={Math.random()}>\r\n          <div\r\n            className={\"block-background \" + (i > 2 ? \"invalid-block\" : \"valid-block\")}\r\n            onClick={() => {\r\n              blockItem.current = block;\r\n              setShow(true);\r\n            }}\r\n          >\r\n            <div className=\"block-counter\">{i}</div>\r\n          </div>\r\n          <div className=\"chain-link\">🔗</div>\r\n        </div>\r\n      ))}\r\n\r\n      <Modal show={show} centered onHide={() => setShow(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Block Details</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form>\r\n            <Form.Group controlId=\"index-indicator\">\r\n              <Form.Label>\r\n                <h5>Index:</h5>\r\n              </Form.Label>\r\n              <Form.Control type=\"number\" defaultValue={blockItem.current.index} />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"index-indicator\">\r\n              <Form.Label>\r\n                <h5>Timestamp:</h5>\r\n              </Form.Label>\r\n              <Form.Control type=\"number\" defaultValue={blockItem.current.timestamp} />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"prevHash-indicator\">\r\n              <Form.Label>\r\n                <h5>Previous Hash:</h5>\r\n              </Form.Label>\r\n              <Form.Control type=\"text\" defaultValue={blockItem.current.prevHash} />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"prevHash-indicator\">\r\n              <Form.Label>\r\n                <h5>Current Hash:</h5>\r\n              </Form.Label>\r\n              <Form.Control type=\"text\" defaultValue={blockItem.current.currHash} />\r\n            </Form.Group>\r\n\r\n            <Form.Group controlId=\"prevHash-indicator\">\r\n              <Form.Label>\r\n                <h5>Merkle Root:</h5>\r\n              </Form.Label>\r\n              <Form.Control type=\"text\" defaultValue={JSON.stringify(blockItem.current.transactions)} />\r\n            </Form.Group>\r\n          </Form>\r\n        </Modal.Body>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport BlockUI from \"../Block/BlockUI\";\r\nimport NavbarUI from \"../Navbar/NavbarUI\";\r\n\r\nexport default function ChainUI(): JSX.Element {\r\n  return (\r\n    <div>\r\n      <NavbarUI />\r\n      <BlockUI\r\n        details={[\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n          {\r\n            index: 0,\r\n            prevHash: \"\",\r\n            currHash: \"0000000000000000000000000000000000000000000\",\r\n            transactions: [],\r\n            timestamp: Date.now(),\r\n          },\r\n        ]}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useRef } from \"react\";\r\nimport NavbarUI from \"../Navbar/NavbarUI\";\r\nimport { IBlock } from \"../Block/BlockUI\";\r\n\r\nimport \"./Mine.css\";\r\nimport { Button } from \"react-bootstrap\";\r\n\r\ninterface IStats {\r\n  nonce: number;\r\n  target: string;\r\n  solution: string;\r\n}\r\n\r\nexport default function MineUI(): JSX.Element {\r\n  const minedBlock = useRef<IBlock>({\r\n    index: 0,\r\n    timestamp: Date.now(),\r\n    prevHash: \"00000000000000000...\",\r\n    currHash: \"000absd234hdsf84h5...\",\r\n    transactions: [],\r\n  });\r\n\r\n  const stats = useRef<IStats>({ nonce: 654, target: \"000wld823nfwe3024rin...\", solution: \"000absd234hdsf84h5...\" });\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <NavbarUI />\r\n\r\n      <div id=\"verified-transaction\">\r\n        <h3>Verified Transactions:</h3>\r\n      </div>\r\n\r\n      <div className=\"row\">\r\n        <div id=\"mine-interactive-area\">\r\n          <div id=\"statistics\">\r\n            <p>\r\n              <b>Nonce:</b> {stats.current.nonce}\r\n            </p>\r\n            <p>\r\n              <b>Target:</b> {stats.current.target}\r\n            </p>\r\n            <p>\r\n              <b>Solution:</b> {stats.current.solution}\r\n            </p>\r\n          </div>\r\n\r\n          <Button variant=\"primary\" id=\"mine-add-block\">\r\n            Mine\r\n          </Button>\r\n        </div>\r\n\r\n        <div id=\"mined-block\" className=\"valid-block\">\r\n          <Button variant=\"success\" id=\"mine-add-block\">\r\n            +\r\n          </Button>\r\n          <p>\r\n            <b>Index:</b> {minedBlock.current.index}\r\n          </p>\r\n          <p>\r\n            <b>Timestamp:</b> {minedBlock.current.timestamp}\r\n          </p>\r\n          <p>\r\n            <b>Previous Hash:</b> {minedBlock.current.prevHash}\r\n          </p>\r\n          <p>\r\n            <b>Current Hash:</b> {minedBlock.current.currHash}\r\n          </p>\r\n          <p>\r\n            <b>Merkle Root:</b> {\"4h354kdnf380sdf234...\"}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Route, BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nimport WalletUI from \"../Wallet/WalletUI\";\r\nimport ChainUI from \"../Chain/ChainUI\";\r\nimport MineUI from \"../Mine/MineUI\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./App.css\";\r\n\r\nexport default function App(): JSX.Element {\r\n  return (\r\n    <Router basename={\"/LibraCoin\"}>\r\n      <Route path=\"/\" component={WalletUI} exact />\r\n      <Route path=\"/wallet\" component={WalletUI} />\r\n      <Route path=\"/mine\" component={MineUI} />\r\n      <Route path=\"/blockchain\" component={ChainUI} />\r\n    </Router>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App/App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}